
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Permission
 * 
 */
export type Permission = $Result.DefaultSelection<Prisma.$PermissionPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model Exercise
 * 
 */
export type Exercise = $Result.DefaultSelection<Prisma.$ExercisePayload>
/**
 * Model WorkoutPlan
 * 
 */
export type WorkoutPlan = $Result.DefaultSelection<Prisma.$WorkoutPlanPayload>
/**
 * Model WorkoutResult
 * 
 */
export type WorkoutResult = $Result.DefaultSelection<Prisma.$WorkoutResultPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model Consumed
 * 
 */
export type Consumed = $Result.DefaultSelection<Prisma.$ConsumedPayload>
/**
 * Model Measurement
 * 
 */
export type Measurement = $Result.DefaultSelection<Prisma.$MeasurementPayload>
/**
 * Model Coach
 * 
 */
export type Coach = $Result.DefaultSelection<Prisma.$CoachPayload>
/**
 * Model BurnedCalories
 * 
 */
export type BurnedCalories = $Result.DefaultSelection<Prisma.$BurnedCaloriesPayload>
/**
 * Model Post
 * 
 */
export type Post = $Result.DefaultSelection<Prisma.$PostPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const goals: {
  MINUS_ONE_AND_HALF: 'MINUS_ONE_AND_HALF',
  MINUS_ONE_AND_QUARTER: 'MINUS_ONE_AND_QUARTER',
  MINUS_ONE: 'MINUS_ONE',
  MINUS_THREE_QUARTERS: 'MINUS_THREE_QUARTERS',
  MINUS_HALF: 'MINUS_HALF',
  ZERO: 'ZERO',
  HALF: 'HALF',
  THREE_QUARTERS: 'THREE_QUARTERS',
  ONE: 'ONE',
  ONE_AND_QUARTER: 'ONE_AND_QUARTER',
  ONE_AND_HALF: 'ONE_AND_HALF'
};

export type goals = (typeof goals)[keyof typeof goals]


export const kindOfDiets: {
  REGULAR: 'REGULAR',
  KETOGENIC: 'KETOGENIC'
};

export type kindOfDiets = (typeof kindOfDiets)[keyof typeof kindOfDiets]


export const activityLevels: {
  ZERO: 'ZERO',
  MINIMAL: 'MINIMAL',
  AVERAGE: 'AVERAGE',
  HIGH: 'HIGH',
  EXTREME: 'EXTREME'
};

export type activityLevels = (typeof activityLevels)[keyof typeof activityLevels]

}

export type goals = $Enums.goals

export const goals: typeof $Enums.goals

export type kindOfDiets = $Enums.kindOfDiets

export const kindOfDiets: typeof $Enums.kindOfDiets

export type activityLevels = $Enums.activityLevels

export const activityLevels: typeof $Enums.activityLevels

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.permission`: Exposes CRUD operations for the **Permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permission.findMany()
    * ```
    */
  get permission(): Prisma.PermissionDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs>;

  /**
   * `prisma.exercise`: Exposes CRUD operations for the **Exercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercises
    * const exercises = await prisma.exercise.findMany()
    * ```
    */
  get exercise(): Prisma.ExerciseDelegate<ExtArgs>;

  /**
   * `prisma.workoutPlan`: Exposes CRUD operations for the **WorkoutPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkoutPlans
    * const workoutPlans = await prisma.workoutPlan.findMany()
    * ```
    */
  get workoutPlan(): Prisma.WorkoutPlanDelegate<ExtArgs>;

  /**
   * `prisma.workoutResult`: Exposes CRUD operations for the **WorkoutResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkoutResults
    * const workoutResults = await prisma.workoutResult.findMany()
    * ```
    */
  get workoutResult(): Prisma.WorkoutResultDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs>;

  /**
   * `prisma.consumed`: Exposes CRUD operations for the **Consumed** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Consumeds
    * const consumeds = await prisma.consumed.findMany()
    * ```
    */
  get consumed(): Prisma.ConsumedDelegate<ExtArgs>;

  /**
   * `prisma.measurement`: Exposes CRUD operations for the **Measurement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Measurements
    * const measurements = await prisma.measurement.findMany()
    * ```
    */
  get measurement(): Prisma.MeasurementDelegate<ExtArgs>;

  /**
   * `prisma.coach`: Exposes CRUD operations for the **Coach** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Coaches
    * const coaches = await prisma.coach.findMany()
    * ```
    */
  get coach(): Prisma.CoachDelegate<ExtArgs>;

  /**
   * `prisma.burnedCalories`: Exposes CRUD operations for the **BurnedCalories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BurnedCalories
    * const burnedCalories = await prisma.burnedCalories.findMany()
    * ```
    */
  get burnedCalories(): Prisma.BurnedCaloriesDelegate<ExtArgs>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Account: 'Account',
    Session: 'Session',
    Permission: 'Permission',
    User: 'User',
    VerificationToken: 'VerificationToken',
    Exercise: 'Exercise',
    WorkoutPlan: 'WorkoutPlan',
    WorkoutResult: 'WorkoutResult',
    Product: 'Product',
    Consumed: 'Consumed',
    Measurement: 'Measurement',
    Coach: 'Coach',
    BurnedCalories: 'BurnedCalories',
    Post: 'Post'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'account' | 'session' | 'permission' | 'user' | 'verificationToken' | 'exercise' | 'workoutPlan' | 'workoutResult' | 'product' | 'consumed' | 'measurement' | 'coach' | 'burnedCalories' | 'post'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>,
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>,
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Permission: {
        payload: Prisma.$PermissionPayload<ExtArgs>
        fields: Prisma.PermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findFirst: {
            args: Prisma.PermissionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findMany: {
            args: Prisma.PermissionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          create: {
            args: Prisma.PermissionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          createMany: {
            args: Prisma.PermissionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PermissionCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          delete: {
            args: Prisma.PermissionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          update: {
            args: Prisma.PermissionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          deleteMany: {
            args: Prisma.PermissionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PermissionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          aggregate: {
            args: Prisma.PermissionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePermission>
          }
          groupBy: {
            args: Prisma.PermissionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionCountArgs<ExtArgs>,
            result: $Utils.Optional<PermissionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>,
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      Exercise: {
        payload: Prisma.$ExercisePayload<ExtArgs>
        fields: Prisma.ExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExerciseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExerciseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findFirst: {
            args: Prisma.ExerciseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExerciseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findMany: {
            args: Prisma.ExerciseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          create: {
            args: Prisma.ExerciseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          createMany: {
            args: Prisma.ExerciseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExerciseCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          delete: {
            args: Prisma.ExerciseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          update: {
            args: Prisma.ExerciseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          deleteMany: {
            args: Prisma.ExerciseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExerciseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExerciseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          aggregate: {
            args: Prisma.ExerciseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExercise>
          }
          groupBy: {
            args: Prisma.ExerciseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExerciseCountArgs<ExtArgs>,
            result: $Utils.Optional<ExerciseCountAggregateOutputType> | number
          }
        }
      }
      WorkoutPlan: {
        payload: Prisma.$WorkoutPlanPayload<ExtArgs>
        fields: Prisma.WorkoutPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutPlanFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutPlanFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>
          }
          findFirst: {
            args: Prisma.WorkoutPlanFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutPlanFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>
          }
          findMany: {
            args: Prisma.WorkoutPlanFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>[]
          }
          create: {
            args: Prisma.WorkoutPlanCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>
          }
          createMany: {
            args: Prisma.WorkoutPlanCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutPlanCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>[]
          }
          delete: {
            args: Prisma.WorkoutPlanDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>
          }
          update: {
            args: Prisma.WorkoutPlanUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>
          }
          deleteMany: {
            args: Prisma.WorkoutPlanDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutPlanUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WorkoutPlanUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPlanPayload>
          }
          aggregate: {
            args: Prisma.WorkoutPlanAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWorkoutPlan>
          }
          groupBy: {
            args: Prisma.WorkoutPlanGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WorkoutPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutPlanCountArgs<ExtArgs>,
            result: $Utils.Optional<WorkoutPlanCountAggregateOutputType> | number
          }
        }
      }
      WorkoutResult: {
        payload: Prisma.$WorkoutResultPayload<ExtArgs>
        fields: Prisma.WorkoutResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutResultFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutResultFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutResultPayload>
          }
          findFirst: {
            args: Prisma.WorkoutResultFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutResultFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutResultPayload>
          }
          findMany: {
            args: Prisma.WorkoutResultFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutResultPayload>[]
          }
          create: {
            args: Prisma.WorkoutResultCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutResultPayload>
          }
          createMany: {
            args: Prisma.WorkoutResultCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutResultCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutResultPayload>[]
          }
          delete: {
            args: Prisma.WorkoutResultDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutResultPayload>
          }
          update: {
            args: Prisma.WorkoutResultUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutResultPayload>
          }
          deleteMany: {
            args: Prisma.WorkoutResultDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutResultUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WorkoutResultUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutResultPayload>
          }
          aggregate: {
            args: Prisma.WorkoutResultAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWorkoutResult>
          }
          groupBy: {
            args: Prisma.WorkoutResultGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WorkoutResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutResultCountArgs<ExtArgs>,
            result: $Utils.Optional<WorkoutResultCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      Consumed: {
        payload: Prisma.$ConsumedPayload<ExtArgs>
        fields: Prisma.ConsumedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsumedFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConsumedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsumedFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConsumedPayload>
          }
          findFirst: {
            args: Prisma.ConsumedFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConsumedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsumedFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConsumedPayload>
          }
          findMany: {
            args: Prisma.ConsumedFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConsumedPayload>[]
          }
          create: {
            args: Prisma.ConsumedCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConsumedPayload>
          }
          createMany: {
            args: Prisma.ConsumedCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConsumedCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConsumedPayload>[]
          }
          delete: {
            args: Prisma.ConsumedDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConsumedPayload>
          }
          update: {
            args: Prisma.ConsumedUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConsumedPayload>
          }
          deleteMany: {
            args: Prisma.ConsumedDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ConsumedUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ConsumedUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConsumedPayload>
          }
          aggregate: {
            args: Prisma.ConsumedAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateConsumed>
          }
          groupBy: {
            args: Prisma.ConsumedGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ConsumedGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsumedCountArgs<ExtArgs>,
            result: $Utils.Optional<ConsumedCountAggregateOutputType> | number
          }
        }
      }
      Measurement: {
        payload: Prisma.$MeasurementPayload<ExtArgs>
        fields: Prisma.MeasurementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeasurementFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeasurementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeasurementFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeasurementPayload>
          }
          findFirst: {
            args: Prisma.MeasurementFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeasurementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeasurementFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeasurementPayload>
          }
          findMany: {
            args: Prisma.MeasurementFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeasurementPayload>[]
          }
          create: {
            args: Prisma.MeasurementCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeasurementPayload>
          }
          createMany: {
            args: Prisma.MeasurementCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MeasurementCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeasurementPayload>[]
          }
          delete: {
            args: Prisma.MeasurementDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeasurementPayload>
          }
          update: {
            args: Prisma.MeasurementUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeasurementPayload>
          }
          deleteMany: {
            args: Prisma.MeasurementDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MeasurementUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MeasurementUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeasurementPayload>
          }
          aggregate: {
            args: Prisma.MeasurementAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMeasurement>
          }
          groupBy: {
            args: Prisma.MeasurementGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MeasurementGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeasurementCountArgs<ExtArgs>,
            result: $Utils.Optional<MeasurementCountAggregateOutputType> | number
          }
        }
      }
      Coach: {
        payload: Prisma.$CoachPayload<ExtArgs>
        fields: Prisma.CoachFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoachFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoachFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>
          }
          findFirst: {
            args: Prisma.CoachFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoachFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>
          }
          findMany: {
            args: Prisma.CoachFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>[]
          }
          create: {
            args: Prisma.CoachCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>
          }
          createMany: {
            args: Prisma.CoachCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoachCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>[]
          }
          delete: {
            args: Prisma.CoachDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>
          }
          update: {
            args: Prisma.CoachUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>
          }
          deleteMany: {
            args: Prisma.CoachDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CoachUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CoachUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>
          }
          aggregate: {
            args: Prisma.CoachAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCoach>
          }
          groupBy: {
            args: Prisma.CoachGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CoachGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoachCountArgs<ExtArgs>,
            result: $Utils.Optional<CoachCountAggregateOutputType> | number
          }
        }
      }
      BurnedCalories: {
        payload: Prisma.$BurnedCaloriesPayload<ExtArgs>
        fields: Prisma.BurnedCaloriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BurnedCaloriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BurnedCaloriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BurnedCaloriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BurnedCaloriesPayload>
          }
          findFirst: {
            args: Prisma.BurnedCaloriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BurnedCaloriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BurnedCaloriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BurnedCaloriesPayload>
          }
          findMany: {
            args: Prisma.BurnedCaloriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BurnedCaloriesPayload>[]
          }
          create: {
            args: Prisma.BurnedCaloriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BurnedCaloriesPayload>
          }
          createMany: {
            args: Prisma.BurnedCaloriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BurnedCaloriesCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BurnedCaloriesPayload>[]
          }
          delete: {
            args: Prisma.BurnedCaloriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BurnedCaloriesPayload>
          }
          update: {
            args: Prisma.BurnedCaloriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BurnedCaloriesPayload>
          }
          deleteMany: {
            args: Prisma.BurnedCaloriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BurnedCaloriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BurnedCaloriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BurnedCaloriesPayload>
          }
          aggregate: {
            args: Prisma.BurnedCaloriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBurnedCalories>
          }
          groupBy: {
            args: Prisma.BurnedCaloriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BurnedCaloriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.BurnedCaloriesCountArgs<ExtArgs>,
            result: $Utils.Optional<BurnedCaloriesCountAggregateOutputType> | number
          }
        }
      }
      Post: {
        payload: Prisma.$PostPayload<ExtArgs>
        fields: Prisma.PostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findFirst: {
            args: Prisma.PostFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findMany: {
            args: Prisma.PostFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          create: {
            args: Prisma.PostCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          createMany: {
            args: Prisma.PostCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          delete: {
            args: Prisma.PostDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          update: {
            args: Prisma.PostUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          deleteMany: {
            args: Prisma.PostDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PostUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PostUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          aggregate: {
            args: Prisma.PostAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePost>
          }
          groupBy: {
            args: Prisma.PostGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PostGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostCountArgs<ExtArgs>,
            result: $Utils.Optional<PostCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.DriverAdapter | null
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PermissionCountOutputType
   */

  export type PermissionCountOutputType = {
    users: number
  }

  export type PermissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | PermissionCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCountOutputType
     */
    select?: PermissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    permissions: number
    accounts: number
    sessions: number
    Exercise: number
    WorkoutPlan: number
    WorkoutResult: number
    Product: number
    Consumed: number
    Measurement: number
    Coach: number
    BurnedCalories: number
    Post: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissions?: boolean | UserCountOutputTypeCountPermissionsArgs
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    Exercise?: boolean | UserCountOutputTypeCountExerciseArgs
    WorkoutPlan?: boolean | UserCountOutputTypeCountWorkoutPlanArgs
    WorkoutResult?: boolean | UserCountOutputTypeCountWorkoutResultArgs
    Product?: boolean | UserCountOutputTypeCountProductArgs
    Consumed?: boolean | UserCountOutputTypeCountConsumedArgs
    Measurement?: boolean | UserCountOutputTypeCountMeasurementArgs
    Coach?: boolean | UserCountOutputTypeCountCoachArgs
    BurnedCalories?: boolean | UserCountOutputTypeCountBurnedCaloriesArgs
    Post?: boolean | UserCountOutputTypeCountPostArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountExerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkoutPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutPlanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkoutResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutResultWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountConsumedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsumedWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMeasurementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeasurementWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCoachArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoachWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBurnedCaloriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BurnedCaloriesWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }


  /**
   * Count Type WorkoutPlanCountOutputType
   */

  export type WorkoutPlanCountOutputType = {
    WorkoutResult: number
  }

  export type WorkoutPlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    WorkoutResult?: boolean | WorkoutPlanCountOutputTypeCountWorkoutResultArgs
  }

  // Custom InputTypes
  /**
   * WorkoutPlanCountOutputType without action
   */
  export type WorkoutPlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlanCountOutputType
     */
    select?: WorkoutPlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkoutPlanCountOutputType without action
   */
  export type WorkoutPlanCountOutputTypeCountWorkoutResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutResultWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    Consumed: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Consumed?: boolean | ProductCountOutputTypeCountConsumedArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountConsumedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsumedWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    id: number | null
    userId: number | null
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    userId: number | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    userId: number | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    createdAt: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    id?: true
    userId?: true
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    id?: true
    userId?: true
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: number
    createdAt: Date
    userId: number
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    createdAt?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }


  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      userId: number
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }


  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountCreateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends AccountCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'Int'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly userId: FieldRef<"Account", 'Int'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SessionSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    sessionToken: string | null
    userId: number | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    sessionToken: string | null
    userId: number | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    createdAt: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    createdAt?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    createdAt?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    createdAt?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: number
    createdAt: Date
    sessionToken: string
    userId: number
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    createdAt?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }


  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      sessionToken: string
      userId: number
      expires: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }


  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionCreateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends SessionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'Int'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'Int'>
    readonly expires: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Permission
   */

  export type AggregatePermission = {
    _count: PermissionCountAggregateOutputType | null
    _avg: PermissionAvgAggregateOutputType | null
    _sum: PermissionSumAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  export type PermissionAvgAggregateOutputType = {
    id: number | null
  }

  export type PermissionSumAggregateOutputType = {
    id: number | null
  }

  export type PermissionMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    description: string | null
  }

  export type PermissionMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    description: string | null
  }

  export type PermissionCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    description: number
    _all: number
  }


  export type PermissionAvgAggregateInputType = {
    id?: true
  }

  export type PermissionSumAggregateInputType = {
    id?: true
  }

  export type PermissionMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    description?: true
  }

  export type PermissionMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    description?: true
  }

  export type PermissionCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    description?: true
    _all?: true
  }

  export type PermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permission to aggregate.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Permissions
    **/
    _count?: true | PermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionMaxAggregateInputType
  }

  export type GetPermissionAggregateType<T extends PermissionAggregateArgs> = {
        [P in keyof T & keyof AggregatePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermission[P]>
      : GetScalarType<T[P], AggregatePermission[P]>
  }




  export type PermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithAggregationInput | PermissionOrderByWithAggregationInput[]
    by: PermissionScalarFieldEnum[] | PermissionScalarFieldEnum
    having?: PermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionCountAggregateInputType | true
    _avg?: PermissionAvgAggregateInputType
    _sum?: PermissionSumAggregateInputType
    _min?: PermissionMinAggregateInputType
    _max?: PermissionMaxAggregateInputType
  }

  export type PermissionGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    name: string
    description: string | null
    _count: PermissionCountAggregateOutputType | null
    _avg: PermissionAvgAggregateOutputType | null
    _sum: PermissionSumAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  type GetPermissionGroupByPayload<T extends PermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionGroupByOutputType[P]>
        }
      >
    >


  export type PermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    description?: boolean
    users?: boolean | Permission$usersArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    description?: boolean
  }


  export type PermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Permission$usersArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Permission"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      name: string
      description: string | null
    }, ExtArgs["result"]["permission"]>
    composites: {}
  }


  type PermissionGetPayload<S extends boolean | null | undefined | PermissionDefaultArgs> = $Result.GetResult<Prisma.$PermissionPayload, S>

  type PermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PermissionCountAggregateInputType | true
    }

  export interface PermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Permission'], meta: { name: 'Permission' } }
    /**
     * Find zero or one Permission that matches the filter.
     * @param {PermissionFindUniqueArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PermissionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PermissionFindUniqueArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Permission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PermissionFindUniqueOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PermissionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PermissionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PermissionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PermissionFindFirstArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Permission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PermissionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PermissionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permission.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionWithIdOnly = await prisma.permission.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PermissionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PermissionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Permission.
     * @param {PermissionCreateArgs} args - Arguments to create a Permission.
     * @example
     * // Create one Permission
     * const Permission = await prisma.permission.create({
     *   data: {
     *     // ... data to create a Permission
     *   }
     * })
     * 
    **/
    create<T extends PermissionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PermissionCreateArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Permissions.
     * @param {PermissionCreateManyArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends PermissionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PermissionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Permissions and returns the data saved in the database.
     * @param {PermissionCreateManyAndReturnArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Permissions and only return the `id`
     * const permissionWithIdOnly = await prisma.permission.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends PermissionCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, PermissionCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Permission.
     * @param {PermissionDeleteArgs} args - Arguments to delete one Permission.
     * @example
     * // Delete one Permission
     * const Permission = await prisma.permission.delete({
     *   where: {
     *     // ... filter to delete one Permission
     *   }
     * })
     * 
    **/
    delete<T extends PermissionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PermissionDeleteArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Permission.
     * @param {PermissionUpdateArgs} args - Arguments to update one Permission.
     * @example
     * // Update one Permission
     * const permission = await prisma.permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PermissionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PermissionUpdateArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Permissions.
     * @param {PermissionDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PermissionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PermissionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PermissionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PermissionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Permission.
     * @param {PermissionUpsertArgs} args - Arguments to update or create a Permission.
     * @example
     * // Update or create a Permission
     * const permission = await prisma.permission.upsert({
     *   create: {
     *     // ... data to create a Permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permission we want to update
     *   }
     * })
    **/
    upsert<T extends PermissionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PermissionUpsertArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permission.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends PermissionCountArgs>(
      args?: Subset<T, PermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionAggregateArgs>(args: Subset<T, PermissionAggregateArgs>): Prisma.PrismaPromise<GetPermissionAggregateType<T>>

    /**
     * Group by Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionGroupByArgs['orderBy'] }
        : { orderBy?: PermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Permission model
   */
  readonly fields: PermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends Permission$usersArgs<ExtArgs> = {}>(args?: Subset<T, Permission$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Permission model
   */ 
  interface PermissionFieldRefs {
    readonly id: FieldRef<"Permission", 'Int'>
    readonly createdAt: FieldRef<"Permission", 'DateTime'>
    readonly updatedAt: FieldRef<"Permission", 'DateTime'>
    readonly name: FieldRef<"Permission", 'String'>
    readonly description: FieldRef<"Permission", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Permission findUnique
   */
  export type PermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findUniqueOrThrow
   */
  export type PermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findFirst
   */
  export type PermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findFirstOrThrow
   */
  export type PermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findMany
   */
  export type PermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permissions to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission create
   */
  export type PermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Permission.
     */
    data: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
  }

  /**
   * Permission createMany
   */
  export type PermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission createManyAndReturn
   */
  export type PermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission update
   */
  export type PermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Permission.
     */
    data: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
    /**
     * Choose, which Permission to update.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission updateMany
   */
  export type PermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
  }

  /**
   * Permission upsert
   */
  export type PermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Permission to update in case it exists.
     */
    where: PermissionWhereUniqueInput
    /**
     * In case the Permission found by the `where` argument doesn't exist, create a new Permission with this data.
     */
    create: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
    /**
     * In case the Permission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
  }

  /**
   * Permission delete
   */
  export type PermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter which Permission to delete.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission deleteMany
   */
  export type PermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permissions to delete
     */
    where?: PermissionWhereInput
  }

  /**
   * Permission.users
   */
  export type Permission$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Permission without action
   */
  export type PermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    numberOfMeals: number | null
    proteinsDay0: number | null
    carbsDay0: number | null
    fatsDay0: number | null
    proteinsDay1: number | null
    carbsDay1: number | null
    fatsDay1: number | null
    proteinsDay2: number | null
    carbsDay2: number | null
    fatsDay2: number | null
    proteinsDay3: number | null
    carbsDay3: number | null
    fatsDay3: number | null
    proteinsDay4: number | null
    carbsDay4: number | null
    fatsDay4: number | null
    proteinsDay5: number | null
    carbsDay5: number | null
    fatsDay5: number | null
    proteinsDay6: number | null
    carbsDay6: number | null
    fatsDay6: number | null
    fiber: number | null
    carbsPercentAsSugar: number | null
    height: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    numberOfMeals: number | null
    proteinsDay0: number | null
    carbsDay0: number | null
    fatsDay0: number | null
    proteinsDay1: number | null
    carbsDay1: number | null
    fatsDay1: number | null
    proteinsDay2: number | null
    carbsDay2: number | null
    fatsDay2: number | null
    proteinsDay3: number | null
    carbsDay3: number | null
    fatsDay3: number | null
    proteinsDay4: number | null
    carbsDay4: number | null
    fatsDay4: number | null
    proteinsDay5: number | null
    carbsDay5: number | null
    fatsDay5: number | null
    proteinsDay6: number | null
    carbsDay6: number | null
    fatsDay6: number | null
    fiber: number | null
    carbsPercentAsSugar: number | null
    height: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    username: string | null
    name: string | null
    surname: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    locale: string | null
    numberOfMeals: number | null
    proteinsDay0: number | null
    carbsDay0: number | null
    fatsDay0: number | null
    proteinsDay1: number | null
    carbsDay1: number | null
    fatsDay1: number | null
    proteinsDay2: number | null
    carbsDay2: number | null
    fatsDay2: number | null
    proteinsDay3: number | null
    carbsDay3: number | null
    fatsDay3: number | null
    proteinsDay4: number | null
    carbsDay4: number | null
    fatsDay4: number | null
    proteinsDay5: number | null
    carbsDay5: number | null
    fatsDay5: number | null
    proteinsDay6: number | null
    carbsDay6: number | null
    fatsDay6: number | null
    fiber: number | null
    carbsPercentAsSugar: number | null
    nextCoach: Date | null
    isCoachAnalyze: boolean | null
    height: number | null
    birth: Date | null
    description: string | null
    website: string | null
    facebook: string | null
    instagram: string | null
    twitter: string | null
    goal: $Enums.goals | null
    kindOfDiet: $Enums.kindOfDiets | null
    isSportActive: boolean | null
    activityLevel: $Enums.activityLevels | null
    sex: boolean | null
    isBanned: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    username: string | null
    name: string | null
    surname: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    locale: string | null
    numberOfMeals: number | null
    proteinsDay0: number | null
    carbsDay0: number | null
    fatsDay0: number | null
    proteinsDay1: number | null
    carbsDay1: number | null
    fatsDay1: number | null
    proteinsDay2: number | null
    carbsDay2: number | null
    fatsDay2: number | null
    proteinsDay3: number | null
    carbsDay3: number | null
    fatsDay3: number | null
    proteinsDay4: number | null
    carbsDay4: number | null
    fatsDay4: number | null
    proteinsDay5: number | null
    carbsDay5: number | null
    fatsDay5: number | null
    proteinsDay6: number | null
    carbsDay6: number | null
    fatsDay6: number | null
    fiber: number | null
    carbsPercentAsSugar: number | null
    nextCoach: Date | null
    isCoachAnalyze: boolean | null
    height: number | null
    birth: Date | null
    description: string | null
    website: string | null
    facebook: string | null
    instagram: string | null
    twitter: string | null
    goal: $Enums.goals | null
    kindOfDiet: $Enums.kindOfDiets | null
    isSportActive: boolean | null
    activityLevel: $Enums.activityLevels | null
    sex: boolean | null
    isBanned: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    username: number
    name: number
    surname: number
    email: number
    emailVerified: number
    image: number
    locale: number
    numberOfMeals: number
    proteinsDay0: number
    carbsDay0: number
    fatsDay0: number
    proteinsDay1: number
    carbsDay1: number
    fatsDay1: number
    proteinsDay2: number
    carbsDay2: number
    fatsDay2: number
    proteinsDay3: number
    carbsDay3: number
    fatsDay3: number
    proteinsDay4: number
    carbsDay4: number
    fatsDay4: number
    proteinsDay5: number
    carbsDay5: number
    fatsDay5: number
    proteinsDay6: number
    carbsDay6: number
    fatsDay6: number
    fiber: number
    carbsPercentAsSugar: number
    nextCoach: number
    isCoachAnalyze: number
    height: number
    birth: number
    description: number
    website: number
    facebook: number
    instagram: number
    twitter: number
    goal: number
    kindOfDiet: number
    isSportActive: number
    activityLevel: number
    sex: number
    isBanned: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    numberOfMeals?: true
    proteinsDay0?: true
    carbsDay0?: true
    fatsDay0?: true
    proteinsDay1?: true
    carbsDay1?: true
    fatsDay1?: true
    proteinsDay2?: true
    carbsDay2?: true
    fatsDay2?: true
    proteinsDay3?: true
    carbsDay3?: true
    fatsDay3?: true
    proteinsDay4?: true
    carbsDay4?: true
    fatsDay4?: true
    proteinsDay5?: true
    carbsDay5?: true
    fatsDay5?: true
    proteinsDay6?: true
    carbsDay6?: true
    fatsDay6?: true
    fiber?: true
    carbsPercentAsSugar?: true
    height?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    numberOfMeals?: true
    proteinsDay0?: true
    carbsDay0?: true
    fatsDay0?: true
    proteinsDay1?: true
    carbsDay1?: true
    fatsDay1?: true
    proteinsDay2?: true
    carbsDay2?: true
    fatsDay2?: true
    proteinsDay3?: true
    carbsDay3?: true
    fatsDay3?: true
    proteinsDay4?: true
    carbsDay4?: true
    fatsDay4?: true
    proteinsDay5?: true
    carbsDay5?: true
    fatsDay5?: true
    proteinsDay6?: true
    carbsDay6?: true
    fatsDay6?: true
    fiber?: true
    carbsPercentAsSugar?: true
    height?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    username?: true
    name?: true
    surname?: true
    email?: true
    emailVerified?: true
    image?: true
    locale?: true
    numberOfMeals?: true
    proteinsDay0?: true
    carbsDay0?: true
    fatsDay0?: true
    proteinsDay1?: true
    carbsDay1?: true
    fatsDay1?: true
    proteinsDay2?: true
    carbsDay2?: true
    fatsDay2?: true
    proteinsDay3?: true
    carbsDay3?: true
    fatsDay3?: true
    proteinsDay4?: true
    carbsDay4?: true
    fatsDay4?: true
    proteinsDay5?: true
    carbsDay5?: true
    fatsDay5?: true
    proteinsDay6?: true
    carbsDay6?: true
    fatsDay6?: true
    fiber?: true
    carbsPercentAsSugar?: true
    nextCoach?: true
    isCoachAnalyze?: true
    height?: true
    birth?: true
    description?: true
    website?: true
    facebook?: true
    instagram?: true
    twitter?: true
    goal?: true
    kindOfDiet?: true
    isSportActive?: true
    activityLevel?: true
    sex?: true
    isBanned?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    username?: true
    name?: true
    surname?: true
    email?: true
    emailVerified?: true
    image?: true
    locale?: true
    numberOfMeals?: true
    proteinsDay0?: true
    carbsDay0?: true
    fatsDay0?: true
    proteinsDay1?: true
    carbsDay1?: true
    fatsDay1?: true
    proteinsDay2?: true
    carbsDay2?: true
    fatsDay2?: true
    proteinsDay3?: true
    carbsDay3?: true
    fatsDay3?: true
    proteinsDay4?: true
    carbsDay4?: true
    fatsDay4?: true
    proteinsDay5?: true
    carbsDay5?: true
    fatsDay5?: true
    proteinsDay6?: true
    carbsDay6?: true
    fatsDay6?: true
    fiber?: true
    carbsPercentAsSugar?: true
    nextCoach?: true
    isCoachAnalyze?: true
    height?: true
    birth?: true
    description?: true
    website?: true
    facebook?: true
    instagram?: true
    twitter?: true
    goal?: true
    kindOfDiet?: true
    isSportActive?: true
    activityLevel?: true
    sex?: true
    isBanned?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    username?: true
    name?: true
    surname?: true
    email?: true
    emailVerified?: true
    image?: true
    locale?: true
    numberOfMeals?: true
    proteinsDay0?: true
    carbsDay0?: true
    fatsDay0?: true
    proteinsDay1?: true
    carbsDay1?: true
    fatsDay1?: true
    proteinsDay2?: true
    carbsDay2?: true
    fatsDay2?: true
    proteinsDay3?: true
    carbsDay3?: true
    fatsDay3?: true
    proteinsDay4?: true
    carbsDay4?: true
    fatsDay4?: true
    proteinsDay5?: true
    carbsDay5?: true
    fatsDay5?: true
    proteinsDay6?: true
    carbsDay6?: true
    fatsDay6?: true
    fiber?: true
    carbsPercentAsSugar?: true
    nextCoach?: true
    isCoachAnalyze?: true
    height?: true
    birth?: true
    description?: true
    website?: true
    facebook?: true
    instagram?: true
    twitter?: true
    goal?: true
    kindOfDiet?: true
    isSportActive?: true
    activityLevel?: true
    sex?: true
    isBanned?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    username: string
    name: string | null
    surname: string | null
    email: string
    emailVerified: Date | null
    image: string | null
    locale: string
    numberOfMeals: number
    proteinsDay0: number
    carbsDay0: number
    fatsDay0: number
    proteinsDay1: number
    carbsDay1: number
    fatsDay1: number
    proteinsDay2: number
    carbsDay2: number
    fatsDay2: number
    proteinsDay3: number
    carbsDay3: number
    fatsDay3: number
    proteinsDay4: number
    carbsDay4: number
    fatsDay4: number
    proteinsDay5: number
    carbsDay5: number
    fatsDay5: number
    proteinsDay6: number
    carbsDay6: number
    fatsDay6: number
    fiber: number
    carbsPercentAsSugar: number
    nextCoach: Date
    isCoachAnalyze: boolean
    height: number
    birth: Date
    description: string
    website: string
    facebook: string
    instagram: string
    twitter: string
    goal: $Enums.goals
    kindOfDiet: $Enums.kindOfDiets
    isSportActive: boolean
    activityLevel: $Enums.activityLevels
    sex: boolean
    isBanned: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    username?: boolean
    name?: boolean
    surname?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    locale?: boolean
    numberOfMeals?: boolean
    proteinsDay0?: boolean
    carbsDay0?: boolean
    fatsDay0?: boolean
    proteinsDay1?: boolean
    carbsDay1?: boolean
    fatsDay1?: boolean
    proteinsDay2?: boolean
    carbsDay2?: boolean
    fatsDay2?: boolean
    proteinsDay3?: boolean
    carbsDay3?: boolean
    fatsDay3?: boolean
    proteinsDay4?: boolean
    carbsDay4?: boolean
    fatsDay4?: boolean
    proteinsDay5?: boolean
    carbsDay5?: boolean
    fatsDay5?: boolean
    proteinsDay6?: boolean
    carbsDay6?: boolean
    fatsDay6?: boolean
    fiber?: boolean
    carbsPercentAsSugar?: boolean
    nextCoach?: boolean
    isCoachAnalyze?: boolean
    height?: boolean
    birth?: boolean
    description?: boolean
    website?: boolean
    facebook?: boolean
    instagram?: boolean
    twitter?: boolean
    goal?: boolean
    kindOfDiet?: boolean
    isSportActive?: boolean
    activityLevel?: boolean
    sex?: boolean
    isBanned?: boolean
    permissions?: boolean | User$permissionsArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    Exercise?: boolean | User$ExerciseArgs<ExtArgs>
    WorkoutPlan?: boolean | User$WorkoutPlanArgs<ExtArgs>
    WorkoutResult?: boolean | User$WorkoutResultArgs<ExtArgs>
    Product?: boolean | User$ProductArgs<ExtArgs>
    Consumed?: boolean | User$ConsumedArgs<ExtArgs>
    Measurement?: boolean | User$MeasurementArgs<ExtArgs>
    Coach?: boolean | User$CoachArgs<ExtArgs>
    BurnedCalories?: boolean | User$BurnedCaloriesArgs<ExtArgs>
    Post?: boolean | User$PostArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    username?: boolean
    name?: boolean
    surname?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    locale?: boolean
    numberOfMeals?: boolean
    proteinsDay0?: boolean
    carbsDay0?: boolean
    fatsDay0?: boolean
    proteinsDay1?: boolean
    carbsDay1?: boolean
    fatsDay1?: boolean
    proteinsDay2?: boolean
    carbsDay2?: boolean
    fatsDay2?: boolean
    proteinsDay3?: boolean
    carbsDay3?: boolean
    fatsDay3?: boolean
    proteinsDay4?: boolean
    carbsDay4?: boolean
    fatsDay4?: boolean
    proteinsDay5?: boolean
    carbsDay5?: boolean
    fatsDay5?: boolean
    proteinsDay6?: boolean
    carbsDay6?: boolean
    fatsDay6?: boolean
    fiber?: boolean
    carbsPercentAsSugar?: boolean
    nextCoach?: boolean
    isCoachAnalyze?: boolean
    height?: boolean
    birth?: boolean
    description?: boolean
    website?: boolean
    facebook?: boolean
    instagram?: boolean
    twitter?: boolean
    goal?: boolean
    kindOfDiet?: boolean
    isSportActive?: boolean
    activityLevel?: boolean
    sex?: boolean
    isBanned?: boolean
  }


  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissions?: boolean | User$permissionsArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    Exercise?: boolean | User$ExerciseArgs<ExtArgs>
    WorkoutPlan?: boolean | User$WorkoutPlanArgs<ExtArgs>
    WorkoutResult?: boolean | User$WorkoutResultArgs<ExtArgs>
    Product?: boolean | User$ProductArgs<ExtArgs>
    Consumed?: boolean | User$ConsumedArgs<ExtArgs>
    Measurement?: boolean | User$MeasurementArgs<ExtArgs>
    Coach?: boolean | User$CoachArgs<ExtArgs>
    BurnedCalories?: boolean | User$BurnedCaloriesArgs<ExtArgs>
    Post?: boolean | User$PostArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      permissions: Prisma.$PermissionPayload<ExtArgs>[]
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      Exercise: Prisma.$ExercisePayload<ExtArgs>[]
      WorkoutPlan: Prisma.$WorkoutPlanPayload<ExtArgs>[]
      WorkoutResult: Prisma.$WorkoutResultPayload<ExtArgs>[]
      Product: Prisma.$ProductPayload<ExtArgs>[]
      Consumed: Prisma.$ConsumedPayload<ExtArgs>[]
      Measurement: Prisma.$MeasurementPayload<ExtArgs>[]
      Coach: Prisma.$CoachPayload<ExtArgs>[]
      BurnedCalories: Prisma.$BurnedCaloriesPayload<ExtArgs>[]
      Post: Prisma.$PostPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      username: string
      name: string | null
      surname: string | null
      email: string
      emailVerified: Date | null
      image: string | null
      locale: string
      numberOfMeals: number
      proteinsDay0: number
      carbsDay0: number
      fatsDay0: number
      proteinsDay1: number
      carbsDay1: number
      fatsDay1: number
      proteinsDay2: number
      carbsDay2: number
      fatsDay2: number
      proteinsDay3: number
      carbsDay3: number
      fatsDay3: number
      proteinsDay4: number
      carbsDay4: number
      fatsDay4: number
      proteinsDay5: number
      carbsDay5: number
      fatsDay5: number
      proteinsDay6: number
      carbsDay6: number
      fatsDay6: number
      fiber: number
      carbsPercentAsSugar: number
      nextCoach: Date
      isCoachAnalyze: boolean
      height: number
      birth: Date
      description: string
      website: string
      facebook: string
      instagram: string
      twitter: string
      goal: $Enums.goals
      kindOfDiet: $Enums.kindOfDiets
      isSportActive: boolean
      activityLevel: $Enums.activityLevels
      sex: boolean
      isBanned: boolean
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends UserCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    permissions<T extends User$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, 'findMany'> | Null>;

    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findMany'> | Null>;

    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findMany'> | Null>;

    Exercise<T extends User$ExerciseArgs<ExtArgs> = {}>(args?: Subset<T, User$ExerciseArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findMany'> | Null>;

    WorkoutPlan<T extends User$WorkoutPlanArgs<ExtArgs> = {}>(args?: Subset<T, User$WorkoutPlanArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, 'findMany'> | Null>;

    WorkoutResult<T extends User$WorkoutResultArgs<ExtArgs> = {}>(args?: Subset<T, User$WorkoutResultArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutResultPayload<ExtArgs>, T, 'findMany'> | Null>;

    Product<T extends User$ProductArgs<ExtArgs> = {}>(args?: Subset<T, User$ProductArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findMany'> | Null>;

    Consumed<T extends User$ConsumedArgs<ExtArgs> = {}>(args?: Subset<T, User$ConsumedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumedPayload<ExtArgs>, T, 'findMany'> | Null>;

    Measurement<T extends User$MeasurementArgs<ExtArgs> = {}>(args?: Subset<T, User$MeasurementArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeasurementPayload<ExtArgs>, T, 'findMany'> | Null>;

    Coach<T extends User$CoachArgs<ExtArgs> = {}>(args?: Subset<T, User$CoachArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'findMany'> | Null>;

    BurnedCalories<T extends User$BurnedCaloriesArgs<ExtArgs> = {}>(args?: Subset<T, User$BurnedCaloriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BurnedCaloriesPayload<ExtArgs>, T, 'findMany'> | Null>;

    Post<T extends User$PostArgs<ExtArgs> = {}>(args?: Subset<T, User$PostArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly username: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly surname: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
    readonly locale: FieldRef<"User", 'String'>
    readonly numberOfMeals: FieldRef<"User", 'Int'>
    readonly proteinsDay0: FieldRef<"User", 'Int'>
    readonly carbsDay0: FieldRef<"User", 'Int'>
    readonly fatsDay0: FieldRef<"User", 'Int'>
    readonly proteinsDay1: FieldRef<"User", 'Int'>
    readonly carbsDay1: FieldRef<"User", 'Int'>
    readonly fatsDay1: FieldRef<"User", 'Int'>
    readonly proteinsDay2: FieldRef<"User", 'Int'>
    readonly carbsDay2: FieldRef<"User", 'Int'>
    readonly fatsDay2: FieldRef<"User", 'Int'>
    readonly proteinsDay3: FieldRef<"User", 'Int'>
    readonly carbsDay3: FieldRef<"User", 'Int'>
    readonly fatsDay3: FieldRef<"User", 'Int'>
    readonly proteinsDay4: FieldRef<"User", 'Int'>
    readonly carbsDay4: FieldRef<"User", 'Int'>
    readonly fatsDay4: FieldRef<"User", 'Int'>
    readonly proteinsDay5: FieldRef<"User", 'Int'>
    readonly carbsDay5: FieldRef<"User", 'Int'>
    readonly fatsDay5: FieldRef<"User", 'Int'>
    readonly proteinsDay6: FieldRef<"User", 'Int'>
    readonly carbsDay6: FieldRef<"User", 'Int'>
    readonly fatsDay6: FieldRef<"User", 'Int'>
    readonly fiber: FieldRef<"User", 'Int'>
    readonly carbsPercentAsSugar: FieldRef<"User", 'Int'>
    readonly nextCoach: FieldRef<"User", 'DateTime'>
    readonly isCoachAnalyze: FieldRef<"User", 'Boolean'>
    readonly height: FieldRef<"User", 'Int'>
    readonly birth: FieldRef<"User", 'DateTime'>
    readonly description: FieldRef<"User", 'String'>
    readonly website: FieldRef<"User", 'String'>
    readonly facebook: FieldRef<"User", 'String'>
    readonly instagram: FieldRef<"User", 'String'>
    readonly twitter: FieldRef<"User", 'String'>
    readonly goal: FieldRef<"User", 'goals'>
    readonly kindOfDiet: FieldRef<"User", 'kindOfDiets'>
    readonly isSportActive: FieldRef<"User", 'Boolean'>
    readonly activityLevel: FieldRef<"User", 'activityLevels'>
    readonly sex: FieldRef<"User", 'Boolean'>
    readonly isBanned: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.permissions
   */
  export type User$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    cursor?: PermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.Exercise
   */
  export type User$ExerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    cursor?: ExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * User.WorkoutPlan
   */
  export type User$WorkoutPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    where?: WorkoutPlanWhereInput
    orderBy?: WorkoutPlanOrderByWithRelationInput | WorkoutPlanOrderByWithRelationInput[]
    cursor?: WorkoutPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutPlanScalarFieldEnum | WorkoutPlanScalarFieldEnum[]
  }

  /**
   * User.WorkoutResult
   */
  export type User$WorkoutResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutResult
     */
    select?: WorkoutResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutResultInclude<ExtArgs> | null
    where?: WorkoutResultWhereInput
    orderBy?: WorkoutResultOrderByWithRelationInput | WorkoutResultOrderByWithRelationInput[]
    cursor?: WorkoutResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutResultScalarFieldEnum | WorkoutResultScalarFieldEnum[]
  }

  /**
   * User.Product
   */
  export type User$ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * User.Consumed
   */
  export type User$ConsumedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumed
     */
    select?: ConsumedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedInclude<ExtArgs> | null
    where?: ConsumedWhereInput
    orderBy?: ConsumedOrderByWithRelationInput | ConsumedOrderByWithRelationInput[]
    cursor?: ConsumedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsumedScalarFieldEnum | ConsumedScalarFieldEnum[]
  }

  /**
   * User.Measurement
   */
  export type User$MeasurementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurementInclude<ExtArgs> | null
    where?: MeasurementWhereInput
    orderBy?: MeasurementOrderByWithRelationInput | MeasurementOrderByWithRelationInput[]
    cursor?: MeasurementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeasurementScalarFieldEnum | MeasurementScalarFieldEnum[]
  }

  /**
   * User.Coach
   */
  export type User$CoachArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
    where?: CoachWhereInput
    orderBy?: CoachOrderByWithRelationInput | CoachOrderByWithRelationInput[]
    cursor?: CoachWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoachScalarFieldEnum | CoachScalarFieldEnum[]
  }

  /**
   * User.BurnedCalories
   */
  export type User$BurnedCaloriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurnedCalories
     */
    select?: BurnedCaloriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnedCaloriesInclude<ExtArgs> | null
    where?: BurnedCaloriesWhereInput
    orderBy?: BurnedCaloriesOrderByWithRelationInput | BurnedCaloriesOrderByWithRelationInput[]
    cursor?: BurnedCaloriesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BurnedCaloriesScalarFieldEnum | BurnedCaloriesScalarFieldEnum[]
  }

  /**
   * User.Post
   */
  export type User$PostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }



  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      identifier: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }


  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VerificationTokenFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VerificationTokenFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
    **/
    findMany<T extends VerificationTokenFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
    **/
    create<T extends VerificationTokenCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends VerificationTokenCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.createManyAndReturn({ 
     *   select: { identifier: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
    **/
    delete<T extends VerificationTokenDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VerificationTokenUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VerificationTokenDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VerificationTokenUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
    **/
    upsert<T extends VerificationTokenUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the VerificationToken model
   */ 
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
  }


  /**
   * Model Exercise
   */

  export type AggregateExercise = {
    _count: ExerciseCountAggregateOutputType | null
    _avg: ExerciseAvgAggregateOutputType | null
    _sum: ExerciseSumAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  export type ExerciseAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    nameLength: number | null
  }

  export type ExerciseSumAggregateOutputType = {
    id: number | null
    userId: number | null
    nameLength: number | null
  }

  export type ExerciseMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    name: string | null
    nameLength: number | null
    isDeleted: boolean | null
  }

  export type ExerciseMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    name: string | null
    nameLength: number | null
    isDeleted: boolean | null
  }

  export type ExerciseCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    userId: number
    name: number
    nameLength: number
    isDeleted: number
    _all: number
  }


  export type ExerciseAvgAggregateInputType = {
    id?: true
    userId?: true
    nameLength?: true
  }

  export type ExerciseSumAggregateInputType = {
    id?: true
    userId?: true
    nameLength?: true
  }

  export type ExerciseMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    name?: true
    nameLength?: true
    isDeleted?: true
  }

  export type ExerciseMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    name?: true
    nameLength?: true
    isDeleted?: true
  }

  export type ExerciseCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    name?: true
    nameLength?: true
    isDeleted?: true
    _all?: true
  }

  export type ExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercise to aggregate.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exercises
    **/
    _count?: true | ExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExerciseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExerciseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciseMaxAggregateInputType
  }

  export type GetExerciseAggregateType<T extends ExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExercise[P]>
      : GetScalarType<T[P], AggregateExercise[P]>
  }




  export type ExerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithAggregationInput | ExerciseOrderByWithAggregationInput[]
    by: ExerciseScalarFieldEnum[] | ExerciseScalarFieldEnum
    having?: ExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciseCountAggregateInputType | true
    _avg?: ExerciseAvgAggregateInputType
    _sum?: ExerciseSumAggregateInputType
    _min?: ExerciseMinAggregateInputType
    _max?: ExerciseMaxAggregateInputType
  }

  export type ExerciseGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    userId: number | null
    name: string
    nameLength: number
    isDeleted: boolean
    _count: ExerciseCountAggregateOutputType | null
    _avg: ExerciseAvgAggregateOutputType | null
    _sum: ExerciseSumAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  type GetExerciseGroupByPayload<T extends ExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
        }
      >
    >


  export type ExerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    name?: boolean
    nameLength?: boolean
    isDeleted?: boolean
    user?: boolean | Exercise$userArgs<ExtArgs>
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    name?: boolean
    nameLength?: boolean
    isDeleted?: boolean
  }


  export type ExerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Exercise$userArgs<ExtArgs>
  }


  export type $ExercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Exercise"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      userId: number | null
      name: string
      nameLength: number
      isDeleted: boolean
    }, ExtArgs["result"]["exercise"]>
    composites: {}
  }


  type ExerciseGetPayload<S extends boolean | null | undefined | ExerciseDefaultArgs> = $Result.GetResult<Prisma.$ExercisePayload, S>

  type ExerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExerciseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExerciseCountAggregateInputType | true
    }

  export interface ExerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exercise'], meta: { name: 'Exercise' } }
    /**
     * Find zero or one Exercise that matches the filter.
     * @param {ExerciseFindUniqueArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExerciseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseFindUniqueArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Exercise that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ExerciseFindUniqueOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExerciseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Exercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExerciseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseFindFirstArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Exercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExerciseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Exercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exercises
     * const exercises = await prisma.exercise.findMany()
     * 
     * // Get first 10 Exercises
     * const exercises = await prisma.exercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exerciseWithIdOnly = await prisma.exercise.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExerciseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Exercise.
     * @param {ExerciseCreateArgs} args - Arguments to create a Exercise.
     * @example
     * // Create one Exercise
     * const Exercise = await prisma.exercise.create({
     *   data: {
     *     // ... data to create a Exercise
     *   }
     * })
     * 
    **/
    create<T extends ExerciseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseCreateArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Exercises.
     * @param {ExerciseCreateManyArgs} args - Arguments to create many Exercises.
     * @example
     * // Create many Exercises
     * const exercise = await prisma.exercise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ExerciseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Exercises and returns the data saved in the database.
     * @param {ExerciseCreateManyAndReturnArgs} args - Arguments to create many Exercises.
     * @example
     * // Create many Exercises
     * const exercise = await prisma.exercise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Exercises and only return the `id`
     * const exerciseWithIdOnly = await prisma.exercise.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ExerciseCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Exercise.
     * @param {ExerciseDeleteArgs} args - Arguments to delete one Exercise.
     * @example
     * // Delete one Exercise
     * const Exercise = await prisma.exercise.delete({
     *   where: {
     *     // ... filter to delete one Exercise
     *   }
     * })
     * 
    **/
    delete<T extends ExerciseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseDeleteArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Exercise.
     * @param {ExerciseUpdateArgs} args - Arguments to update one Exercise.
     * @example
     * // Update one Exercise
     * const exercise = await prisma.exercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExerciseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseUpdateArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Exercises.
     * @param {ExerciseDeleteManyArgs} args - Arguments to filter Exercises to delete.
     * @example
     * // Delete a few Exercises
     * const { count } = await prisma.exercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExerciseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exercises
     * const exercise = await prisma.exercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExerciseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exercise.
     * @param {ExerciseUpsertArgs} args - Arguments to update or create a Exercise.
     * @example
     * // Update or create a Exercise
     * const exercise = await prisma.exercise.upsert({
     *   create: {
     *     // ... data to create a Exercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exercise we want to update
     *   }
     * })
    **/
    upsert<T extends ExerciseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseUpsertArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseCountArgs} args - Arguments to filter Exercises to count.
     * @example
     * // Count the number of Exercises
     * const count = await prisma.exercise.count({
     *   where: {
     *     // ... the filter for the Exercises we want to count
     *   }
     * })
    **/
    count<T extends ExerciseCountArgs>(
      args?: Subset<T, ExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciseAggregateArgs>(args: Subset<T, ExerciseAggregateArgs>): Prisma.PrismaPromise<GetExerciseAggregateType<T>>

    /**
     * Group by Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExerciseGroupByArgs['orderBy'] }
        : { orderBy?: ExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exercise model
   */
  readonly fields: ExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends Exercise$userArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Exercise model
   */ 
  interface ExerciseFieldRefs {
    readonly id: FieldRef<"Exercise", 'Int'>
    readonly createdAt: FieldRef<"Exercise", 'DateTime'>
    readonly updatedAt: FieldRef<"Exercise", 'DateTime'>
    readonly userId: FieldRef<"Exercise", 'Int'>
    readonly name: FieldRef<"Exercise", 'String'>
    readonly nameLength: FieldRef<"Exercise", 'Int'>
    readonly isDeleted: FieldRef<"Exercise", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Exercise findUnique
   */
  export type ExerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise findUniqueOrThrow
   */
  export type ExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise findFirst
   */
  export type ExerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Exercise findFirstOrThrow
   */
  export type ExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Exercise findMany
   */
  export type ExerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercises to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Exercise create
   */
  export type ExerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a Exercise.
     */
    data: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
  }

  /**
   * Exercise createMany
   */
  export type ExerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exercises.
     */
    data: ExerciseCreateManyInput | ExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Exercise createManyAndReturn
   */
  export type ExerciseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data used to create many Exercises.
     */
    data: ExerciseCreateManyInput | ExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Exercise update
   */
  export type ExerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a Exercise.
     */
    data: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
    /**
     * Choose, which Exercise to update.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise updateMany
   */
  export type ExerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exercises.
     */
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyInput>
    /**
     * Filter which Exercises to update
     */
    where?: ExerciseWhereInput
  }

  /**
   * Exercise upsert
   */
  export type ExerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the Exercise to update in case it exists.
     */
    where: ExerciseWhereUniqueInput
    /**
     * In case the Exercise found by the `where` argument doesn't exist, create a new Exercise with this data.
     */
    create: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
    /**
     * In case the Exercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
  }

  /**
   * Exercise delete
   */
  export type ExerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter which Exercise to delete.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise deleteMany
   */
  export type ExerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercises to delete
     */
    where?: ExerciseWhereInput
  }

  /**
   * Exercise.user
   */
  export type Exercise$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Exercise without action
   */
  export type ExerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
  }


  /**
   * Model WorkoutPlan
   */

  export type AggregateWorkoutPlan = {
    _count: WorkoutPlanCountAggregateOutputType | null
    _avg: WorkoutPlanAvgAggregateOutputType | null
    _sum: WorkoutPlanSumAggregateOutputType | null
    _min: WorkoutPlanMinAggregateOutputType | null
    _max: WorkoutPlanMaxAggregateOutputType | null
  }

  export type WorkoutPlanAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    burnedCalories: number | null
  }

  export type WorkoutPlanSumAggregateOutputType = {
    id: number | null
    userId: number | null
    burnedCalories: number | null
  }

  export type WorkoutPlanMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    name: string | null
    description: string | null
    burnedCalories: number | null
    isDeleted: boolean | null
  }

  export type WorkoutPlanMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    name: string | null
    description: string | null
    burnedCalories: number | null
    isDeleted: boolean | null
  }

  export type WorkoutPlanCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    userId: number
    name: number
    description: number
    burnedCalories: number
    isDeleted: number
    exercises: number
    _all: number
  }


  export type WorkoutPlanAvgAggregateInputType = {
    id?: true
    userId?: true
    burnedCalories?: true
  }

  export type WorkoutPlanSumAggregateInputType = {
    id?: true
    userId?: true
    burnedCalories?: true
  }

  export type WorkoutPlanMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    name?: true
    description?: true
    burnedCalories?: true
    isDeleted?: true
  }

  export type WorkoutPlanMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    name?: true
    description?: true
    burnedCalories?: true
    isDeleted?: true
  }

  export type WorkoutPlanCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    name?: true
    description?: true
    burnedCalories?: true
    isDeleted?: true
    exercises?: true
    _all?: true
  }

  export type WorkoutPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutPlan to aggregate.
     */
    where?: WorkoutPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutPlans to fetch.
     */
    orderBy?: WorkoutPlanOrderByWithRelationInput | WorkoutPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkoutPlans
    **/
    _count?: true | WorkoutPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkoutPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkoutPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutPlanMaxAggregateInputType
  }

  export type GetWorkoutPlanAggregateType<T extends WorkoutPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkoutPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkoutPlan[P]>
      : GetScalarType<T[P], AggregateWorkoutPlan[P]>
  }




  export type WorkoutPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutPlanWhereInput
    orderBy?: WorkoutPlanOrderByWithAggregationInput | WorkoutPlanOrderByWithAggregationInput[]
    by: WorkoutPlanScalarFieldEnum[] | WorkoutPlanScalarFieldEnum
    having?: WorkoutPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutPlanCountAggregateInputType | true
    _avg?: WorkoutPlanAvgAggregateInputType
    _sum?: WorkoutPlanSumAggregateInputType
    _min?: WorkoutPlanMinAggregateInputType
    _max?: WorkoutPlanMaxAggregateInputType
  }

  export type WorkoutPlanGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    userId: number
    name: string
    description: string | null
    burnedCalories: number
    isDeleted: boolean
    exercises: JsonValue
    _count: WorkoutPlanCountAggregateOutputType | null
    _avg: WorkoutPlanAvgAggregateOutputType | null
    _sum: WorkoutPlanSumAggregateOutputType | null
    _min: WorkoutPlanMinAggregateOutputType | null
    _max: WorkoutPlanMaxAggregateOutputType | null
  }

  type GetWorkoutPlanGroupByPayload<T extends WorkoutPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutPlanGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutPlanGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    burnedCalories?: boolean
    isDeleted?: boolean
    exercises?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    WorkoutResult?: boolean | WorkoutPlan$WorkoutResultArgs<ExtArgs>
    _count?: boolean | WorkoutPlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutPlan"]>

  export type WorkoutPlanSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    burnedCalories?: boolean
    isDeleted?: boolean
    exercises?: boolean
  }


  export type WorkoutPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    WorkoutResult?: boolean | WorkoutPlan$WorkoutResultArgs<ExtArgs>
    _count?: boolean | WorkoutPlanCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $WorkoutPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkoutPlan"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      WorkoutResult: Prisma.$WorkoutResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      userId: number
      name: string
      description: string | null
      burnedCalories: number
      isDeleted: boolean
      exercises: Prisma.JsonValue
    }, ExtArgs["result"]["workoutPlan"]>
    composites: {}
  }


  type WorkoutPlanGetPayload<S extends boolean | null | undefined | WorkoutPlanDefaultArgs> = $Result.GetResult<Prisma.$WorkoutPlanPayload, S>

  type WorkoutPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkoutPlanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkoutPlanCountAggregateInputType | true
    }

  export interface WorkoutPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkoutPlan'], meta: { name: 'WorkoutPlan' } }
    /**
     * Find zero or one WorkoutPlan that matches the filter.
     * @param {WorkoutPlanFindUniqueArgs} args - Arguments to find a WorkoutPlan
     * @example
     * // Get one WorkoutPlan
     * const workoutPlan = await prisma.workoutPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WorkoutPlanFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutPlanFindUniqueArgs<ExtArgs>>
    ): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one WorkoutPlan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkoutPlanFindUniqueOrThrowArgs} args - Arguments to find a WorkoutPlan
     * @example
     * // Get one WorkoutPlan
     * const workoutPlan = await prisma.workoutPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WorkoutPlanFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutPlanFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first WorkoutPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutPlanFindFirstArgs} args - Arguments to find a WorkoutPlan
     * @example
     * // Get one WorkoutPlan
     * const workoutPlan = await prisma.workoutPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WorkoutPlanFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutPlanFindFirstArgs<ExtArgs>>
    ): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first WorkoutPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutPlanFindFirstOrThrowArgs} args - Arguments to find a WorkoutPlan
     * @example
     * // Get one WorkoutPlan
     * const workoutPlan = await prisma.workoutPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WorkoutPlanFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutPlanFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more WorkoutPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkoutPlans
     * const workoutPlans = await prisma.workoutPlan.findMany()
     * 
     * // Get first 10 WorkoutPlans
     * const workoutPlans = await prisma.workoutPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutPlanWithIdOnly = await prisma.workoutPlan.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WorkoutPlanFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutPlanFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a WorkoutPlan.
     * @param {WorkoutPlanCreateArgs} args - Arguments to create a WorkoutPlan.
     * @example
     * // Create one WorkoutPlan
     * const WorkoutPlan = await prisma.workoutPlan.create({
     *   data: {
     *     // ... data to create a WorkoutPlan
     *   }
     * })
     * 
    **/
    create<T extends WorkoutPlanCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutPlanCreateArgs<ExtArgs>>
    ): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many WorkoutPlans.
     * @param {WorkoutPlanCreateManyArgs} args - Arguments to create many WorkoutPlans.
     * @example
     * // Create many WorkoutPlans
     * const workoutPlan = await prisma.workoutPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends WorkoutPlanCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutPlanCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkoutPlans and returns the data saved in the database.
     * @param {WorkoutPlanCreateManyAndReturnArgs} args - Arguments to create many WorkoutPlans.
     * @example
     * // Create many WorkoutPlans
     * const workoutPlan = await prisma.workoutPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkoutPlans and only return the `id`
     * const workoutPlanWithIdOnly = await prisma.workoutPlan.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends WorkoutPlanCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutPlanCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a WorkoutPlan.
     * @param {WorkoutPlanDeleteArgs} args - Arguments to delete one WorkoutPlan.
     * @example
     * // Delete one WorkoutPlan
     * const WorkoutPlan = await prisma.workoutPlan.delete({
     *   where: {
     *     // ... filter to delete one WorkoutPlan
     *   }
     * })
     * 
    **/
    delete<T extends WorkoutPlanDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutPlanDeleteArgs<ExtArgs>>
    ): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one WorkoutPlan.
     * @param {WorkoutPlanUpdateArgs} args - Arguments to update one WorkoutPlan.
     * @example
     * // Update one WorkoutPlan
     * const workoutPlan = await prisma.workoutPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WorkoutPlanUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutPlanUpdateArgs<ExtArgs>>
    ): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more WorkoutPlans.
     * @param {WorkoutPlanDeleteManyArgs} args - Arguments to filter WorkoutPlans to delete.
     * @example
     * // Delete a few WorkoutPlans
     * const { count } = await prisma.workoutPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WorkoutPlanDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutPlanDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkoutPlans
     * const workoutPlan = await prisma.workoutPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WorkoutPlanUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutPlanUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkoutPlan.
     * @param {WorkoutPlanUpsertArgs} args - Arguments to update or create a WorkoutPlan.
     * @example
     * // Update or create a WorkoutPlan
     * const workoutPlan = await prisma.workoutPlan.upsert({
     *   create: {
     *     // ... data to create a WorkoutPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkoutPlan we want to update
     *   }
     * })
    **/
    upsert<T extends WorkoutPlanUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutPlanUpsertArgs<ExtArgs>>
    ): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of WorkoutPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutPlanCountArgs} args - Arguments to filter WorkoutPlans to count.
     * @example
     * // Count the number of WorkoutPlans
     * const count = await prisma.workoutPlan.count({
     *   where: {
     *     // ... the filter for the WorkoutPlans we want to count
     *   }
     * })
    **/
    count<T extends WorkoutPlanCountArgs>(
      args?: Subset<T, WorkoutPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkoutPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutPlanAggregateArgs>(args: Subset<T, WorkoutPlanAggregateArgs>): Prisma.PrismaPromise<GetWorkoutPlanAggregateType<T>>

    /**
     * Group by WorkoutPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutPlanGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkoutPlan model
   */
  readonly fields: WorkoutPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkoutPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    WorkoutResult<T extends WorkoutPlan$WorkoutResultArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutPlan$WorkoutResultArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutResultPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the WorkoutPlan model
   */ 
  interface WorkoutPlanFieldRefs {
    readonly id: FieldRef<"WorkoutPlan", 'Int'>
    readonly createdAt: FieldRef<"WorkoutPlan", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkoutPlan", 'DateTime'>
    readonly userId: FieldRef<"WorkoutPlan", 'Int'>
    readonly name: FieldRef<"WorkoutPlan", 'String'>
    readonly description: FieldRef<"WorkoutPlan", 'String'>
    readonly burnedCalories: FieldRef<"WorkoutPlan", 'Int'>
    readonly isDeleted: FieldRef<"WorkoutPlan", 'Boolean'>
    readonly exercises: FieldRef<"WorkoutPlan", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * WorkoutPlan findUnique
   */
  export type WorkoutPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutPlan to fetch.
     */
    where: WorkoutPlanWhereUniqueInput
  }

  /**
   * WorkoutPlan findUniqueOrThrow
   */
  export type WorkoutPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutPlan to fetch.
     */
    where: WorkoutPlanWhereUniqueInput
  }

  /**
   * WorkoutPlan findFirst
   */
  export type WorkoutPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutPlan to fetch.
     */
    where?: WorkoutPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutPlans to fetch.
     */
    orderBy?: WorkoutPlanOrderByWithRelationInput | WorkoutPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutPlans.
     */
    cursor?: WorkoutPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutPlans.
     */
    distinct?: WorkoutPlanScalarFieldEnum | WorkoutPlanScalarFieldEnum[]
  }

  /**
   * WorkoutPlan findFirstOrThrow
   */
  export type WorkoutPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutPlan to fetch.
     */
    where?: WorkoutPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutPlans to fetch.
     */
    orderBy?: WorkoutPlanOrderByWithRelationInput | WorkoutPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutPlans.
     */
    cursor?: WorkoutPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutPlans.
     */
    distinct?: WorkoutPlanScalarFieldEnum | WorkoutPlanScalarFieldEnum[]
  }

  /**
   * WorkoutPlan findMany
   */
  export type WorkoutPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutPlans to fetch.
     */
    where?: WorkoutPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutPlans to fetch.
     */
    orderBy?: WorkoutPlanOrderByWithRelationInput | WorkoutPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkoutPlans.
     */
    cursor?: WorkoutPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutPlans.
     */
    skip?: number
    distinct?: WorkoutPlanScalarFieldEnum | WorkoutPlanScalarFieldEnum[]
  }

  /**
   * WorkoutPlan create
   */
  export type WorkoutPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkoutPlan.
     */
    data: XOR<WorkoutPlanCreateInput, WorkoutPlanUncheckedCreateInput>
  }

  /**
   * WorkoutPlan createMany
   */
  export type WorkoutPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkoutPlans.
     */
    data: WorkoutPlanCreateManyInput | WorkoutPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkoutPlan createManyAndReturn
   */
  export type WorkoutPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * The data used to create many WorkoutPlans.
     */
    data: WorkoutPlanCreateManyInput | WorkoutPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkoutPlan update
   */
  export type WorkoutPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkoutPlan.
     */
    data: XOR<WorkoutPlanUpdateInput, WorkoutPlanUncheckedUpdateInput>
    /**
     * Choose, which WorkoutPlan to update.
     */
    where: WorkoutPlanWhereUniqueInput
  }

  /**
   * WorkoutPlan updateMany
   */
  export type WorkoutPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkoutPlans.
     */
    data: XOR<WorkoutPlanUpdateManyMutationInput, WorkoutPlanUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutPlans to update
     */
    where?: WorkoutPlanWhereInput
  }

  /**
   * WorkoutPlan upsert
   */
  export type WorkoutPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkoutPlan to update in case it exists.
     */
    where: WorkoutPlanWhereUniqueInput
    /**
     * In case the WorkoutPlan found by the `where` argument doesn't exist, create a new WorkoutPlan with this data.
     */
    create: XOR<WorkoutPlanCreateInput, WorkoutPlanUncheckedCreateInput>
    /**
     * In case the WorkoutPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutPlanUpdateInput, WorkoutPlanUncheckedUpdateInput>
  }

  /**
   * WorkoutPlan delete
   */
  export type WorkoutPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    /**
     * Filter which WorkoutPlan to delete.
     */
    where: WorkoutPlanWhereUniqueInput
  }

  /**
   * WorkoutPlan deleteMany
   */
  export type WorkoutPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutPlans to delete
     */
    where?: WorkoutPlanWhereInput
  }

  /**
   * WorkoutPlan.WorkoutResult
   */
  export type WorkoutPlan$WorkoutResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutResult
     */
    select?: WorkoutResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutResultInclude<ExtArgs> | null
    where?: WorkoutResultWhereInput
    orderBy?: WorkoutResultOrderByWithRelationInput | WorkoutResultOrderByWithRelationInput[]
    cursor?: WorkoutResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutResultScalarFieldEnum | WorkoutResultScalarFieldEnum[]
  }

  /**
   * WorkoutPlan without action
   */
  export type WorkoutPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
  }


  /**
   * Model WorkoutResult
   */

  export type AggregateWorkoutResult = {
    _count: WorkoutResultCountAggregateOutputType | null
    _avg: WorkoutResultAvgAggregateOutputType | null
    _sum: WorkoutResultSumAggregateOutputType | null
    _min: WorkoutResultMinAggregateOutputType | null
    _max: WorkoutResultMaxAggregateOutputType | null
  }

  export type WorkoutResultAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    burnedCalories: number | null
    workoutPlanId: number | null
  }

  export type WorkoutResultSumAggregateOutputType = {
    id: number | null
    userId: number | null
    burnedCalories: number | null
    workoutPlanId: number | null
  }

  export type WorkoutResultMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    name: string | null
    note: string | null
    burnedCalories: number | null
    workoutPlanId: number | null
    whenAdded: Date | null
  }

  export type WorkoutResultMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    name: string | null
    note: string | null
    burnedCalories: number | null
    workoutPlanId: number | null
    whenAdded: Date | null
  }

  export type WorkoutResultCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    userId: number
    name: number
    note: number
    burnedCalories: number
    exercises: number
    workoutPlanId: number
    whenAdded: number
    _all: number
  }


  export type WorkoutResultAvgAggregateInputType = {
    id?: true
    userId?: true
    burnedCalories?: true
    workoutPlanId?: true
  }

  export type WorkoutResultSumAggregateInputType = {
    id?: true
    userId?: true
    burnedCalories?: true
    workoutPlanId?: true
  }

  export type WorkoutResultMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    name?: true
    note?: true
    burnedCalories?: true
    workoutPlanId?: true
    whenAdded?: true
  }

  export type WorkoutResultMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    name?: true
    note?: true
    burnedCalories?: true
    workoutPlanId?: true
    whenAdded?: true
  }

  export type WorkoutResultCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    name?: true
    note?: true
    burnedCalories?: true
    exercises?: true
    workoutPlanId?: true
    whenAdded?: true
    _all?: true
  }

  export type WorkoutResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutResult to aggregate.
     */
    where?: WorkoutResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutResults to fetch.
     */
    orderBy?: WorkoutResultOrderByWithRelationInput | WorkoutResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkoutResults
    **/
    _count?: true | WorkoutResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkoutResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkoutResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutResultMaxAggregateInputType
  }

  export type GetWorkoutResultAggregateType<T extends WorkoutResultAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkoutResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkoutResult[P]>
      : GetScalarType<T[P], AggregateWorkoutResult[P]>
  }




  export type WorkoutResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutResultWhereInput
    orderBy?: WorkoutResultOrderByWithAggregationInput | WorkoutResultOrderByWithAggregationInput[]
    by: WorkoutResultScalarFieldEnum[] | WorkoutResultScalarFieldEnum
    having?: WorkoutResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutResultCountAggregateInputType | true
    _avg?: WorkoutResultAvgAggregateInputType
    _sum?: WorkoutResultSumAggregateInputType
    _min?: WorkoutResultMinAggregateInputType
    _max?: WorkoutResultMaxAggregateInputType
  }

  export type WorkoutResultGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    userId: number
    name: string
    note: string | null
    burnedCalories: number
    exercises: JsonValue
    workoutPlanId: number | null
    whenAdded: Date
    _count: WorkoutResultCountAggregateOutputType | null
    _avg: WorkoutResultAvgAggregateOutputType | null
    _sum: WorkoutResultSumAggregateOutputType | null
    _min: WorkoutResultMinAggregateOutputType | null
    _max: WorkoutResultMaxAggregateOutputType | null
  }

  type GetWorkoutResultGroupByPayload<T extends WorkoutResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutResultGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutResultGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    name?: boolean
    note?: boolean
    burnedCalories?: boolean
    exercises?: boolean
    workoutPlanId?: boolean
    whenAdded?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    workoutPlan?: boolean | WorkoutResult$workoutPlanArgs<ExtArgs>
  }, ExtArgs["result"]["workoutResult"]>

  export type WorkoutResultSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    name?: boolean
    note?: boolean
    burnedCalories?: boolean
    exercises?: boolean
    workoutPlanId?: boolean
    whenAdded?: boolean
  }


  export type WorkoutResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    workoutPlan?: boolean | WorkoutResult$workoutPlanArgs<ExtArgs>
  }


  export type $WorkoutResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkoutResult"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      workoutPlan: Prisma.$WorkoutPlanPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      userId: number
      name: string
      note: string | null
      burnedCalories: number
      exercises: Prisma.JsonValue
      workoutPlanId: number | null
      whenAdded: Date
    }, ExtArgs["result"]["workoutResult"]>
    composites: {}
  }


  type WorkoutResultGetPayload<S extends boolean | null | undefined | WorkoutResultDefaultArgs> = $Result.GetResult<Prisma.$WorkoutResultPayload, S>

  type WorkoutResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkoutResultFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkoutResultCountAggregateInputType | true
    }

  export interface WorkoutResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkoutResult'], meta: { name: 'WorkoutResult' } }
    /**
     * Find zero or one WorkoutResult that matches the filter.
     * @param {WorkoutResultFindUniqueArgs} args - Arguments to find a WorkoutResult
     * @example
     * // Get one WorkoutResult
     * const workoutResult = await prisma.workoutResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WorkoutResultFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutResultFindUniqueArgs<ExtArgs>>
    ): Prisma__WorkoutResultClient<$Result.GetResult<Prisma.$WorkoutResultPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one WorkoutResult that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkoutResultFindUniqueOrThrowArgs} args - Arguments to find a WorkoutResult
     * @example
     * // Get one WorkoutResult
     * const workoutResult = await prisma.workoutResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WorkoutResultFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutResultFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WorkoutResultClient<$Result.GetResult<Prisma.$WorkoutResultPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first WorkoutResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutResultFindFirstArgs} args - Arguments to find a WorkoutResult
     * @example
     * // Get one WorkoutResult
     * const workoutResult = await prisma.workoutResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WorkoutResultFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutResultFindFirstArgs<ExtArgs>>
    ): Prisma__WorkoutResultClient<$Result.GetResult<Prisma.$WorkoutResultPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first WorkoutResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutResultFindFirstOrThrowArgs} args - Arguments to find a WorkoutResult
     * @example
     * // Get one WorkoutResult
     * const workoutResult = await prisma.workoutResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WorkoutResultFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutResultFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WorkoutResultClient<$Result.GetResult<Prisma.$WorkoutResultPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more WorkoutResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkoutResults
     * const workoutResults = await prisma.workoutResult.findMany()
     * 
     * // Get first 10 WorkoutResults
     * const workoutResults = await prisma.workoutResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutResultWithIdOnly = await prisma.workoutResult.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WorkoutResultFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutResultFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutResultPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a WorkoutResult.
     * @param {WorkoutResultCreateArgs} args - Arguments to create a WorkoutResult.
     * @example
     * // Create one WorkoutResult
     * const WorkoutResult = await prisma.workoutResult.create({
     *   data: {
     *     // ... data to create a WorkoutResult
     *   }
     * })
     * 
    **/
    create<T extends WorkoutResultCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutResultCreateArgs<ExtArgs>>
    ): Prisma__WorkoutResultClient<$Result.GetResult<Prisma.$WorkoutResultPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many WorkoutResults.
     * @param {WorkoutResultCreateManyArgs} args - Arguments to create many WorkoutResults.
     * @example
     * // Create many WorkoutResults
     * const workoutResult = await prisma.workoutResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends WorkoutResultCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutResultCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkoutResults and returns the data saved in the database.
     * @param {WorkoutResultCreateManyAndReturnArgs} args - Arguments to create many WorkoutResults.
     * @example
     * // Create many WorkoutResults
     * const workoutResult = await prisma.workoutResult.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkoutResults and only return the `id`
     * const workoutResultWithIdOnly = await prisma.workoutResult.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends WorkoutResultCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutResultCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutResultPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a WorkoutResult.
     * @param {WorkoutResultDeleteArgs} args - Arguments to delete one WorkoutResult.
     * @example
     * // Delete one WorkoutResult
     * const WorkoutResult = await prisma.workoutResult.delete({
     *   where: {
     *     // ... filter to delete one WorkoutResult
     *   }
     * })
     * 
    **/
    delete<T extends WorkoutResultDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutResultDeleteArgs<ExtArgs>>
    ): Prisma__WorkoutResultClient<$Result.GetResult<Prisma.$WorkoutResultPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one WorkoutResult.
     * @param {WorkoutResultUpdateArgs} args - Arguments to update one WorkoutResult.
     * @example
     * // Update one WorkoutResult
     * const workoutResult = await prisma.workoutResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WorkoutResultUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutResultUpdateArgs<ExtArgs>>
    ): Prisma__WorkoutResultClient<$Result.GetResult<Prisma.$WorkoutResultPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more WorkoutResults.
     * @param {WorkoutResultDeleteManyArgs} args - Arguments to filter WorkoutResults to delete.
     * @example
     * // Delete a few WorkoutResults
     * const { count } = await prisma.workoutResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WorkoutResultDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutResultDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkoutResults
     * const workoutResult = await prisma.workoutResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WorkoutResultUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutResultUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkoutResult.
     * @param {WorkoutResultUpsertArgs} args - Arguments to update or create a WorkoutResult.
     * @example
     * // Update or create a WorkoutResult
     * const workoutResult = await prisma.workoutResult.upsert({
     *   create: {
     *     // ... data to create a WorkoutResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkoutResult we want to update
     *   }
     * })
    **/
    upsert<T extends WorkoutResultUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutResultUpsertArgs<ExtArgs>>
    ): Prisma__WorkoutResultClient<$Result.GetResult<Prisma.$WorkoutResultPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of WorkoutResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutResultCountArgs} args - Arguments to filter WorkoutResults to count.
     * @example
     * // Count the number of WorkoutResults
     * const count = await prisma.workoutResult.count({
     *   where: {
     *     // ... the filter for the WorkoutResults we want to count
     *   }
     * })
    **/
    count<T extends WorkoutResultCountArgs>(
      args?: Subset<T, WorkoutResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkoutResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutResultAggregateArgs>(args: Subset<T, WorkoutResultAggregateArgs>): Prisma.PrismaPromise<GetWorkoutResultAggregateType<T>>

    /**
     * Group by WorkoutResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutResultGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkoutResult model
   */
  readonly fields: WorkoutResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkoutResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    workoutPlan<T extends WorkoutResult$workoutPlanArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutResult$workoutPlanArgs<ExtArgs>>): Prisma__WorkoutPlanClient<$Result.GetResult<Prisma.$WorkoutPlanPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the WorkoutResult model
   */ 
  interface WorkoutResultFieldRefs {
    readonly id: FieldRef<"WorkoutResult", 'Int'>
    readonly createdAt: FieldRef<"WorkoutResult", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkoutResult", 'DateTime'>
    readonly userId: FieldRef<"WorkoutResult", 'Int'>
    readonly name: FieldRef<"WorkoutResult", 'String'>
    readonly note: FieldRef<"WorkoutResult", 'String'>
    readonly burnedCalories: FieldRef<"WorkoutResult", 'Int'>
    readonly exercises: FieldRef<"WorkoutResult", 'Json'>
    readonly workoutPlanId: FieldRef<"WorkoutResult", 'Int'>
    readonly whenAdded: FieldRef<"WorkoutResult", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkoutResult findUnique
   */
  export type WorkoutResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutResult
     */
    select?: WorkoutResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutResultInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutResult to fetch.
     */
    where: WorkoutResultWhereUniqueInput
  }

  /**
   * WorkoutResult findUniqueOrThrow
   */
  export type WorkoutResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutResult
     */
    select?: WorkoutResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutResultInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutResult to fetch.
     */
    where: WorkoutResultWhereUniqueInput
  }

  /**
   * WorkoutResult findFirst
   */
  export type WorkoutResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutResult
     */
    select?: WorkoutResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutResultInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutResult to fetch.
     */
    where?: WorkoutResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutResults to fetch.
     */
    orderBy?: WorkoutResultOrderByWithRelationInput | WorkoutResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutResults.
     */
    cursor?: WorkoutResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutResults.
     */
    distinct?: WorkoutResultScalarFieldEnum | WorkoutResultScalarFieldEnum[]
  }

  /**
   * WorkoutResult findFirstOrThrow
   */
  export type WorkoutResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutResult
     */
    select?: WorkoutResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutResultInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutResult to fetch.
     */
    where?: WorkoutResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutResults to fetch.
     */
    orderBy?: WorkoutResultOrderByWithRelationInput | WorkoutResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutResults.
     */
    cursor?: WorkoutResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutResults.
     */
    distinct?: WorkoutResultScalarFieldEnum | WorkoutResultScalarFieldEnum[]
  }

  /**
   * WorkoutResult findMany
   */
  export type WorkoutResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutResult
     */
    select?: WorkoutResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutResultInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutResults to fetch.
     */
    where?: WorkoutResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutResults to fetch.
     */
    orderBy?: WorkoutResultOrderByWithRelationInput | WorkoutResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkoutResults.
     */
    cursor?: WorkoutResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutResults.
     */
    skip?: number
    distinct?: WorkoutResultScalarFieldEnum | WorkoutResultScalarFieldEnum[]
  }

  /**
   * WorkoutResult create
   */
  export type WorkoutResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutResult
     */
    select?: WorkoutResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutResultInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkoutResult.
     */
    data: XOR<WorkoutResultCreateInput, WorkoutResultUncheckedCreateInput>
  }

  /**
   * WorkoutResult createMany
   */
  export type WorkoutResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkoutResults.
     */
    data: WorkoutResultCreateManyInput | WorkoutResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkoutResult createManyAndReturn
   */
  export type WorkoutResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutResult
     */
    select?: WorkoutResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutResultInclude<ExtArgs> | null
    /**
     * The data used to create many WorkoutResults.
     */
    data: WorkoutResultCreateManyInput | WorkoutResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkoutResult update
   */
  export type WorkoutResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutResult
     */
    select?: WorkoutResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutResultInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkoutResult.
     */
    data: XOR<WorkoutResultUpdateInput, WorkoutResultUncheckedUpdateInput>
    /**
     * Choose, which WorkoutResult to update.
     */
    where: WorkoutResultWhereUniqueInput
  }

  /**
   * WorkoutResult updateMany
   */
  export type WorkoutResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkoutResults.
     */
    data: XOR<WorkoutResultUpdateManyMutationInput, WorkoutResultUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutResults to update
     */
    where?: WorkoutResultWhereInput
  }

  /**
   * WorkoutResult upsert
   */
  export type WorkoutResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutResult
     */
    select?: WorkoutResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutResultInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkoutResult to update in case it exists.
     */
    where: WorkoutResultWhereUniqueInput
    /**
     * In case the WorkoutResult found by the `where` argument doesn't exist, create a new WorkoutResult with this data.
     */
    create: XOR<WorkoutResultCreateInput, WorkoutResultUncheckedCreateInput>
    /**
     * In case the WorkoutResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutResultUpdateInput, WorkoutResultUncheckedUpdateInput>
  }

  /**
   * WorkoutResult delete
   */
  export type WorkoutResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutResult
     */
    select?: WorkoutResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutResultInclude<ExtArgs> | null
    /**
     * Filter which WorkoutResult to delete.
     */
    where: WorkoutResultWhereUniqueInput
  }

  /**
   * WorkoutResult deleteMany
   */
  export type WorkoutResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutResults to delete
     */
    where?: WorkoutResultWhereInput
  }

  /**
   * WorkoutResult.workoutPlan
   */
  export type WorkoutResult$workoutPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutPlan
     */
    select?: WorkoutPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutPlanInclude<ExtArgs> | null
    where?: WorkoutPlanWhereInput
  }

  /**
   * WorkoutResult without action
   */
  export type WorkoutResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutResult
     */
    select?: WorkoutResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutResultInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    nameLength: number | null
    proteins: Decimal | null
    carbs: Decimal | null
    sugar: Decimal | null
    fats: Decimal | null
    fiber: Decimal | null
    sodium: Decimal | null
    ethanol: Decimal | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    userId: number | null
    nameLength: number | null
    proteins: Decimal | null
    carbs: Decimal | null
    sugar: Decimal | null
    fats: Decimal | null
    fiber: Decimal | null
    sodium: Decimal | null
    ethanol: Decimal | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    name: string | null
    nameLength: number | null
    proteins: Decimal | null
    carbs: Decimal | null
    sugar: Decimal | null
    fats: Decimal | null
    fiber: Decimal | null
    sodium: Decimal | null
    ethanol: Decimal | null
    barcode: string | null
    isVerified: boolean | null
    isDeleted: boolean | null
    isExpectingCheck: boolean | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    name: string | null
    nameLength: number | null
    proteins: Decimal | null
    carbs: Decimal | null
    sugar: Decimal | null
    fats: Decimal | null
    fiber: Decimal | null
    sodium: Decimal | null
    ethanol: Decimal | null
    barcode: string | null
    isVerified: boolean | null
    isDeleted: boolean | null
    isExpectingCheck: boolean | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    userId: number
    name: number
    nameLength: number
    proteins: number
    carbs: number
    sugar: number
    fats: number
    fiber: number
    sodium: number
    ethanol: number
    barcode: number
    isVerified: number
    isDeleted: number
    isExpectingCheck: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    userId?: true
    nameLength?: true
    proteins?: true
    carbs?: true
    sugar?: true
    fats?: true
    fiber?: true
    sodium?: true
    ethanol?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    userId?: true
    nameLength?: true
    proteins?: true
    carbs?: true
    sugar?: true
    fats?: true
    fiber?: true
    sodium?: true
    ethanol?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    name?: true
    nameLength?: true
    proteins?: true
    carbs?: true
    sugar?: true
    fats?: true
    fiber?: true
    sodium?: true
    ethanol?: true
    barcode?: true
    isVerified?: true
    isDeleted?: true
    isExpectingCheck?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    name?: true
    nameLength?: true
    proteins?: true
    carbs?: true
    sugar?: true
    fats?: true
    fiber?: true
    sodium?: true
    ethanol?: true
    barcode?: true
    isVerified?: true
    isDeleted?: true
    isExpectingCheck?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    name?: true
    nameLength?: true
    proteins?: true
    carbs?: true
    sugar?: true
    fats?: true
    fiber?: true
    sodium?: true
    ethanol?: true
    barcode?: true
    isVerified?: true
    isDeleted?: true
    isExpectingCheck?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    userId: number | null
    name: string
    nameLength: number
    proteins: Decimal
    carbs: Decimal
    sugar: Decimal
    fats: Decimal
    fiber: Decimal
    sodium: Decimal
    ethanol: Decimal
    barcode: string | null
    isVerified: boolean | null
    isDeleted: boolean | null
    isExpectingCheck: boolean | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    name?: boolean
    nameLength?: boolean
    proteins?: boolean
    carbs?: boolean
    sugar?: boolean
    fats?: boolean
    fiber?: boolean
    sodium?: boolean
    ethanol?: boolean
    barcode?: boolean
    isVerified?: boolean
    isDeleted?: boolean
    isExpectingCheck?: boolean
    user?: boolean | Product$userArgs<ExtArgs>
    Consumed?: boolean | Product$ConsumedArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    name?: boolean
    nameLength?: boolean
    proteins?: boolean
    carbs?: boolean
    sugar?: boolean
    fats?: boolean
    fiber?: boolean
    sodium?: boolean
    ethanol?: boolean
    barcode?: boolean
    isVerified?: boolean
    isDeleted?: boolean
    isExpectingCheck?: boolean
  }


  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Product$userArgs<ExtArgs>
    Consumed?: boolean | Product$ConsumedArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      Consumed: Prisma.$ConsumedPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      userId: number | null
      name: string
      nameLength: number
      proteins: Prisma.Decimal
      carbs: Prisma.Decimal
      sugar: Prisma.Decimal
      fats: Prisma.Decimal
      fiber: Prisma.Decimal
      sodium: Prisma.Decimal
      ethanol: Prisma.Decimal
      barcode: string | null
      isVerified: boolean | null
      isDeleted: boolean | null
      isExpectingCheck: boolean | null
    }, ExtArgs["result"]["product"]>
    composites: {}
  }


  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductCreateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ProductCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends Product$userArgs<ExtArgs> = {}>(args?: Subset<T, Product$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Consumed<T extends Product$ConsumedArgs<ExtArgs> = {}>(args?: Subset<T, Product$ConsumedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumedPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'Int'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
    readonly userId: FieldRef<"Product", 'Int'>
    readonly name: FieldRef<"Product", 'String'>
    readonly nameLength: FieldRef<"Product", 'Int'>
    readonly proteins: FieldRef<"Product", 'Decimal'>
    readonly carbs: FieldRef<"Product", 'Decimal'>
    readonly sugar: FieldRef<"Product", 'Decimal'>
    readonly fats: FieldRef<"Product", 'Decimal'>
    readonly fiber: FieldRef<"Product", 'Decimal'>
    readonly sodium: FieldRef<"Product", 'Decimal'>
    readonly ethanol: FieldRef<"Product", 'Decimal'>
    readonly barcode: FieldRef<"Product", 'String'>
    readonly isVerified: FieldRef<"Product", 'Boolean'>
    readonly isDeleted: FieldRef<"Product", 'Boolean'>
    readonly isExpectingCheck: FieldRef<"Product", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }

  /**
   * Product.user
   */
  export type Product$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Product.Consumed
   */
  export type Product$ConsumedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumed
     */
    select?: ConsumedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedInclude<ExtArgs> | null
    where?: ConsumedWhereInput
    orderBy?: ConsumedOrderByWithRelationInput | ConsumedOrderByWithRelationInput[]
    cursor?: ConsumedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsumedScalarFieldEnum | ConsumedScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model Consumed
   */

  export type AggregateConsumed = {
    _count: ConsumedCountAggregateOutputType | null
    _avg: ConsumedAvgAggregateOutputType | null
    _sum: ConsumedSumAggregateOutputType | null
    _min: ConsumedMinAggregateOutputType | null
    _max: ConsumedMaxAggregateOutputType | null
  }

  export type ConsumedAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
    howMany: Decimal | null
    meal: number | null
  }

  export type ConsumedSumAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
    howMany: Decimal | null
    meal: number | null
  }

  export type ConsumedMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    whenAdded: Date | null
    productId: number | null
    howMany: Decimal | null
    meal: number | null
  }

  export type ConsumedMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    whenAdded: Date | null
    productId: number | null
    howMany: Decimal | null
    meal: number | null
  }

  export type ConsumedCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    userId: number
    whenAdded: number
    productId: number
    howMany: number
    meal: number
    _all: number
  }


  export type ConsumedAvgAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    howMany?: true
    meal?: true
  }

  export type ConsumedSumAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    howMany?: true
    meal?: true
  }

  export type ConsumedMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    whenAdded?: true
    productId?: true
    howMany?: true
    meal?: true
  }

  export type ConsumedMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    whenAdded?: true
    productId?: true
    howMany?: true
    meal?: true
  }

  export type ConsumedCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    whenAdded?: true
    productId?: true
    howMany?: true
    meal?: true
    _all?: true
  }

  export type ConsumedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consumed to aggregate.
     */
    where?: ConsumedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consumeds to fetch.
     */
    orderBy?: ConsumedOrderByWithRelationInput | ConsumedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsumedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consumeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consumeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Consumeds
    **/
    _count?: true | ConsumedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConsumedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConsumedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsumedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsumedMaxAggregateInputType
  }

  export type GetConsumedAggregateType<T extends ConsumedAggregateArgs> = {
        [P in keyof T & keyof AggregateConsumed]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsumed[P]>
      : GetScalarType<T[P], AggregateConsumed[P]>
  }




  export type ConsumedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsumedWhereInput
    orderBy?: ConsumedOrderByWithAggregationInput | ConsumedOrderByWithAggregationInput[]
    by: ConsumedScalarFieldEnum[] | ConsumedScalarFieldEnum
    having?: ConsumedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsumedCountAggregateInputType | true
    _avg?: ConsumedAvgAggregateInputType
    _sum?: ConsumedSumAggregateInputType
    _min?: ConsumedMinAggregateInputType
    _max?: ConsumedMaxAggregateInputType
  }

  export type ConsumedGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    userId: number
    whenAdded: Date
    productId: number
    howMany: Decimal
    meal: number
    _count: ConsumedCountAggregateOutputType | null
    _avg: ConsumedAvgAggregateOutputType | null
    _sum: ConsumedSumAggregateOutputType | null
    _min: ConsumedMinAggregateOutputType | null
    _max: ConsumedMaxAggregateOutputType | null
  }

  type GetConsumedGroupByPayload<T extends ConsumedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsumedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsumedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsumedGroupByOutputType[P]>
            : GetScalarType<T[P], ConsumedGroupByOutputType[P]>
        }
      >
    >


  export type ConsumedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    whenAdded?: boolean
    productId?: boolean
    howMany?: boolean
    meal?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consumed"]>

  export type ConsumedSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    whenAdded?: boolean
    productId?: boolean
    howMany?: boolean
    meal?: boolean
  }


  export type ConsumedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }


  export type $ConsumedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Consumed"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      userId: number
      whenAdded: Date
      productId: number
      howMany: Prisma.Decimal
      meal: number
    }, ExtArgs["result"]["consumed"]>
    composites: {}
  }


  type ConsumedGetPayload<S extends boolean | null | undefined | ConsumedDefaultArgs> = $Result.GetResult<Prisma.$ConsumedPayload, S>

  type ConsumedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConsumedFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConsumedCountAggregateInputType | true
    }

  export interface ConsumedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Consumed'], meta: { name: 'Consumed' } }
    /**
     * Find zero or one Consumed that matches the filter.
     * @param {ConsumedFindUniqueArgs} args - Arguments to find a Consumed
     * @example
     * // Get one Consumed
     * const consumed = await prisma.consumed.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ConsumedFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ConsumedFindUniqueArgs<ExtArgs>>
    ): Prisma__ConsumedClient<$Result.GetResult<Prisma.$ConsumedPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Consumed that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConsumedFindUniqueOrThrowArgs} args - Arguments to find a Consumed
     * @example
     * // Get one Consumed
     * const consumed = await prisma.consumed.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ConsumedFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConsumedFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ConsumedClient<$Result.GetResult<Prisma.$ConsumedPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Consumed that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedFindFirstArgs} args - Arguments to find a Consumed
     * @example
     * // Get one Consumed
     * const consumed = await prisma.consumed.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ConsumedFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ConsumedFindFirstArgs<ExtArgs>>
    ): Prisma__ConsumedClient<$Result.GetResult<Prisma.$ConsumedPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Consumed that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedFindFirstOrThrowArgs} args - Arguments to find a Consumed
     * @example
     * // Get one Consumed
     * const consumed = await prisma.consumed.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ConsumedFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConsumedFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ConsumedClient<$Result.GetResult<Prisma.$ConsumedPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Consumeds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Consumeds
     * const consumeds = await prisma.consumed.findMany()
     * 
     * // Get first 10 Consumeds
     * const consumeds = await prisma.consumed.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consumedWithIdOnly = await prisma.consumed.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ConsumedFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConsumedFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumedPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Consumed.
     * @param {ConsumedCreateArgs} args - Arguments to create a Consumed.
     * @example
     * // Create one Consumed
     * const Consumed = await prisma.consumed.create({
     *   data: {
     *     // ... data to create a Consumed
     *   }
     * })
     * 
    **/
    create<T extends ConsumedCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ConsumedCreateArgs<ExtArgs>>
    ): Prisma__ConsumedClient<$Result.GetResult<Prisma.$ConsumedPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Consumeds.
     * @param {ConsumedCreateManyArgs} args - Arguments to create many Consumeds.
     * @example
     * // Create many Consumeds
     * const consumed = await prisma.consumed.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ConsumedCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConsumedCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Consumeds and returns the data saved in the database.
     * @param {ConsumedCreateManyAndReturnArgs} args - Arguments to create many Consumeds.
     * @example
     * // Create many Consumeds
     * const consumed = await prisma.consumed.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Consumeds and only return the `id`
     * const consumedWithIdOnly = await prisma.consumed.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ConsumedCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ConsumedCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumedPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Consumed.
     * @param {ConsumedDeleteArgs} args - Arguments to delete one Consumed.
     * @example
     * // Delete one Consumed
     * const Consumed = await prisma.consumed.delete({
     *   where: {
     *     // ... filter to delete one Consumed
     *   }
     * })
     * 
    **/
    delete<T extends ConsumedDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ConsumedDeleteArgs<ExtArgs>>
    ): Prisma__ConsumedClient<$Result.GetResult<Prisma.$ConsumedPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Consumed.
     * @param {ConsumedUpdateArgs} args - Arguments to update one Consumed.
     * @example
     * // Update one Consumed
     * const consumed = await prisma.consumed.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ConsumedUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ConsumedUpdateArgs<ExtArgs>>
    ): Prisma__ConsumedClient<$Result.GetResult<Prisma.$ConsumedPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Consumeds.
     * @param {ConsumedDeleteManyArgs} args - Arguments to filter Consumeds to delete.
     * @example
     * // Delete a few Consumeds
     * const { count } = await prisma.consumed.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ConsumedDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConsumedDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consumeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Consumeds
     * const consumed = await prisma.consumed.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ConsumedUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ConsumedUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Consumed.
     * @param {ConsumedUpsertArgs} args - Arguments to update or create a Consumed.
     * @example
     * // Update or create a Consumed
     * const consumed = await prisma.consumed.upsert({
     *   create: {
     *     // ... data to create a Consumed
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Consumed we want to update
     *   }
     * })
    **/
    upsert<T extends ConsumedUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ConsumedUpsertArgs<ExtArgs>>
    ): Prisma__ConsumedClient<$Result.GetResult<Prisma.$ConsumedPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Consumeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedCountArgs} args - Arguments to filter Consumeds to count.
     * @example
     * // Count the number of Consumeds
     * const count = await prisma.consumed.count({
     *   where: {
     *     // ... the filter for the Consumeds we want to count
     *   }
     * })
    **/
    count<T extends ConsumedCountArgs>(
      args?: Subset<T, ConsumedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsumedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Consumed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsumedAggregateArgs>(args: Subset<T, ConsumedAggregateArgs>): Prisma.PrismaPromise<GetConsumedAggregateType<T>>

    /**
     * Group by Consumed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsumedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsumedGroupByArgs['orderBy'] }
        : { orderBy?: ConsumedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsumedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsumedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Consumed model
   */
  readonly fields: ConsumedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Consumed.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsumedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Consumed model
   */ 
  interface ConsumedFieldRefs {
    readonly id: FieldRef<"Consumed", 'Int'>
    readonly createdAt: FieldRef<"Consumed", 'DateTime'>
    readonly updatedAt: FieldRef<"Consumed", 'DateTime'>
    readonly userId: FieldRef<"Consumed", 'Int'>
    readonly whenAdded: FieldRef<"Consumed", 'DateTime'>
    readonly productId: FieldRef<"Consumed", 'Int'>
    readonly howMany: FieldRef<"Consumed", 'Decimal'>
    readonly meal: FieldRef<"Consumed", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Consumed findUnique
   */
  export type ConsumedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumed
     */
    select?: ConsumedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedInclude<ExtArgs> | null
    /**
     * Filter, which Consumed to fetch.
     */
    where: ConsumedWhereUniqueInput
  }

  /**
   * Consumed findUniqueOrThrow
   */
  export type ConsumedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumed
     */
    select?: ConsumedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedInclude<ExtArgs> | null
    /**
     * Filter, which Consumed to fetch.
     */
    where: ConsumedWhereUniqueInput
  }

  /**
   * Consumed findFirst
   */
  export type ConsumedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumed
     */
    select?: ConsumedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedInclude<ExtArgs> | null
    /**
     * Filter, which Consumed to fetch.
     */
    where?: ConsumedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consumeds to fetch.
     */
    orderBy?: ConsumedOrderByWithRelationInput | ConsumedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consumeds.
     */
    cursor?: ConsumedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consumeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consumeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consumeds.
     */
    distinct?: ConsumedScalarFieldEnum | ConsumedScalarFieldEnum[]
  }

  /**
   * Consumed findFirstOrThrow
   */
  export type ConsumedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumed
     */
    select?: ConsumedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedInclude<ExtArgs> | null
    /**
     * Filter, which Consumed to fetch.
     */
    where?: ConsumedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consumeds to fetch.
     */
    orderBy?: ConsumedOrderByWithRelationInput | ConsumedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consumeds.
     */
    cursor?: ConsumedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consumeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consumeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consumeds.
     */
    distinct?: ConsumedScalarFieldEnum | ConsumedScalarFieldEnum[]
  }

  /**
   * Consumed findMany
   */
  export type ConsumedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumed
     */
    select?: ConsumedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedInclude<ExtArgs> | null
    /**
     * Filter, which Consumeds to fetch.
     */
    where?: ConsumedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consumeds to fetch.
     */
    orderBy?: ConsumedOrderByWithRelationInput | ConsumedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Consumeds.
     */
    cursor?: ConsumedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consumeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consumeds.
     */
    skip?: number
    distinct?: ConsumedScalarFieldEnum | ConsumedScalarFieldEnum[]
  }

  /**
   * Consumed create
   */
  export type ConsumedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumed
     */
    select?: ConsumedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedInclude<ExtArgs> | null
    /**
     * The data needed to create a Consumed.
     */
    data: XOR<ConsumedCreateInput, ConsumedUncheckedCreateInput>
  }

  /**
   * Consumed createMany
   */
  export type ConsumedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Consumeds.
     */
    data: ConsumedCreateManyInput | ConsumedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Consumed createManyAndReturn
   */
  export type ConsumedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumed
     */
    select?: ConsumedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedInclude<ExtArgs> | null
    /**
     * The data used to create many Consumeds.
     */
    data: ConsumedCreateManyInput | ConsumedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Consumed update
   */
  export type ConsumedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumed
     */
    select?: ConsumedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedInclude<ExtArgs> | null
    /**
     * The data needed to update a Consumed.
     */
    data: XOR<ConsumedUpdateInput, ConsumedUncheckedUpdateInput>
    /**
     * Choose, which Consumed to update.
     */
    where: ConsumedWhereUniqueInput
  }

  /**
   * Consumed updateMany
   */
  export type ConsumedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Consumeds.
     */
    data: XOR<ConsumedUpdateManyMutationInput, ConsumedUncheckedUpdateManyInput>
    /**
     * Filter which Consumeds to update
     */
    where?: ConsumedWhereInput
  }

  /**
   * Consumed upsert
   */
  export type ConsumedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumed
     */
    select?: ConsumedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedInclude<ExtArgs> | null
    /**
     * The filter to search for the Consumed to update in case it exists.
     */
    where: ConsumedWhereUniqueInput
    /**
     * In case the Consumed found by the `where` argument doesn't exist, create a new Consumed with this data.
     */
    create: XOR<ConsumedCreateInput, ConsumedUncheckedCreateInput>
    /**
     * In case the Consumed was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsumedUpdateInput, ConsumedUncheckedUpdateInput>
  }

  /**
   * Consumed delete
   */
  export type ConsumedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumed
     */
    select?: ConsumedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedInclude<ExtArgs> | null
    /**
     * Filter which Consumed to delete.
     */
    where: ConsumedWhereUniqueInput
  }

  /**
   * Consumed deleteMany
   */
  export type ConsumedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consumeds to delete
     */
    where?: ConsumedWhereInput
  }

  /**
   * Consumed without action
   */
  export type ConsumedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumed
     */
    select?: ConsumedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedInclude<ExtArgs> | null
  }


  /**
   * Model Measurement
   */

  export type AggregateMeasurement = {
    _count: MeasurementCountAggregateOutputType | null
    _avg: MeasurementAvgAggregateOutputType | null
    _sum: MeasurementSumAggregateOutputType | null
    _min: MeasurementMinAggregateOutputType | null
    _max: MeasurementMaxAggregateOutputType | null
  }

  export type MeasurementAvgAggregateOutputType = {
    id: number | null
    weight: Decimal | null
    userId: number | null
  }

  export type MeasurementSumAggregateOutputType = {
    id: number | null
    weight: Decimal | null
    userId: number | null
  }

  export type MeasurementMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    whenAdded: Date | null
    weight: Decimal | null
    userId: number | null
  }

  export type MeasurementMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    whenAdded: Date | null
    weight: Decimal | null
    userId: number | null
  }

  export type MeasurementCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    whenAdded: number
    weight: number
    userId: number
    _all: number
  }


  export type MeasurementAvgAggregateInputType = {
    id?: true
    weight?: true
    userId?: true
  }

  export type MeasurementSumAggregateInputType = {
    id?: true
    weight?: true
    userId?: true
  }

  export type MeasurementMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    whenAdded?: true
    weight?: true
    userId?: true
  }

  export type MeasurementMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    whenAdded?: true
    weight?: true
    userId?: true
  }

  export type MeasurementCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    whenAdded?: true
    weight?: true
    userId?: true
    _all?: true
  }

  export type MeasurementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Measurement to aggregate.
     */
    where?: MeasurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Measurements to fetch.
     */
    orderBy?: MeasurementOrderByWithRelationInput | MeasurementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeasurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Measurements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Measurements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Measurements
    **/
    _count?: true | MeasurementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeasurementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeasurementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeasurementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeasurementMaxAggregateInputType
  }

  export type GetMeasurementAggregateType<T extends MeasurementAggregateArgs> = {
        [P in keyof T & keyof AggregateMeasurement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeasurement[P]>
      : GetScalarType<T[P], AggregateMeasurement[P]>
  }




  export type MeasurementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeasurementWhereInput
    orderBy?: MeasurementOrderByWithAggregationInput | MeasurementOrderByWithAggregationInput[]
    by: MeasurementScalarFieldEnum[] | MeasurementScalarFieldEnum
    having?: MeasurementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeasurementCountAggregateInputType | true
    _avg?: MeasurementAvgAggregateInputType
    _sum?: MeasurementSumAggregateInputType
    _min?: MeasurementMinAggregateInputType
    _max?: MeasurementMaxAggregateInputType
  }

  export type MeasurementGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    whenAdded: Date
    weight: Decimal
    userId: number
    _count: MeasurementCountAggregateOutputType | null
    _avg: MeasurementAvgAggregateOutputType | null
    _sum: MeasurementSumAggregateOutputType | null
    _min: MeasurementMinAggregateOutputType | null
    _max: MeasurementMaxAggregateOutputType | null
  }

  type GetMeasurementGroupByPayload<T extends MeasurementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeasurementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeasurementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeasurementGroupByOutputType[P]>
            : GetScalarType<T[P], MeasurementGroupByOutputType[P]>
        }
      >
    >


  export type MeasurementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    whenAdded?: boolean
    weight?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["measurement"]>

  export type MeasurementSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    whenAdded?: boolean
    weight?: boolean
    userId?: boolean
  }


  export type MeasurementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $MeasurementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Measurement"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      whenAdded: Date
      weight: Prisma.Decimal
      userId: number
    }, ExtArgs["result"]["measurement"]>
    composites: {}
  }


  type MeasurementGetPayload<S extends boolean | null | undefined | MeasurementDefaultArgs> = $Result.GetResult<Prisma.$MeasurementPayload, S>

  type MeasurementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MeasurementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MeasurementCountAggregateInputType | true
    }

  export interface MeasurementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Measurement'], meta: { name: 'Measurement' } }
    /**
     * Find zero or one Measurement that matches the filter.
     * @param {MeasurementFindUniqueArgs} args - Arguments to find a Measurement
     * @example
     * // Get one Measurement
     * const measurement = await prisma.measurement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MeasurementFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MeasurementFindUniqueArgs<ExtArgs>>
    ): Prisma__MeasurementClient<$Result.GetResult<Prisma.$MeasurementPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Measurement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MeasurementFindUniqueOrThrowArgs} args - Arguments to find a Measurement
     * @example
     * // Get one Measurement
     * const measurement = await prisma.measurement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MeasurementFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MeasurementFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MeasurementClient<$Result.GetResult<Prisma.$MeasurementPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Measurement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurementFindFirstArgs} args - Arguments to find a Measurement
     * @example
     * // Get one Measurement
     * const measurement = await prisma.measurement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MeasurementFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MeasurementFindFirstArgs<ExtArgs>>
    ): Prisma__MeasurementClient<$Result.GetResult<Prisma.$MeasurementPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Measurement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurementFindFirstOrThrowArgs} args - Arguments to find a Measurement
     * @example
     * // Get one Measurement
     * const measurement = await prisma.measurement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MeasurementFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MeasurementFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MeasurementClient<$Result.GetResult<Prisma.$MeasurementPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Measurements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Measurements
     * const measurements = await prisma.measurement.findMany()
     * 
     * // Get first 10 Measurements
     * const measurements = await prisma.measurement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const measurementWithIdOnly = await prisma.measurement.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MeasurementFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MeasurementFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeasurementPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Measurement.
     * @param {MeasurementCreateArgs} args - Arguments to create a Measurement.
     * @example
     * // Create one Measurement
     * const Measurement = await prisma.measurement.create({
     *   data: {
     *     // ... data to create a Measurement
     *   }
     * })
     * 
    **/
    create<T extends MeasurementCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MeasurementCreateArgs<ExtArgs>>
    ): Prisma__MeasurementClient<$Result.GetResult<Prisma.$MeasurementPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Measurements.
     * @param {MeasurementCreateManyArgs} args - Arguments to create many Measurements.
     * @example
     * // Create many Measurements
     * const measurement = await prisma.measurement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends MeasurementCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MeasurementCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Measurements and returns the data saved in the database.
     * @param {MeasurementCreateManyAndReturnArgs} args - Arguments to create many Measurements.
     * @example
     * // Create many Measurements
     * const measurement = await prisma.measurement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Measurements and only return the `id`
     * const measurementWithIdOnly = await prisma.measurement.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends MeasurementCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, MeasurementCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeasurementPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Measurement.
     * @param {MeasurementDeleteArgs} args - Arguments to delete one Measurement.
     * @example
     * // Delete one Measurement
     * const Measurement = await prisma.measurement.delete({
     *   where: {
     *     // ... filter to delete one Measurement
     *   }
     * })
     * 
    **/
    delete<T extends MeasurementDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MeasurementDeleteArgs<ExtArgs>>
    ): Prisma__MeasurementClient<$Result.GetResult<Prisma.$MeasurementPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Measurement.
     * @param {MeasurementUpdateArgs} args - Arguments to update one Measurement.
     * @example
     * // Update one Measurement
     * const measurement = await prisma.measurement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MeasurementUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MeasurementUpdateArgs<ExtArgs>>
    ): Prisma__MeasurementClient<$Result.GetResult<Prisma.$MeasurementPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Measurements.
     * @param {MeasurementDeleteManyArgs} args - Arguments to filter Measurements to delete.
     * @example
     * // Delete a few Measurements
     * const { count } = await prisma.measurement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MeasurementDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MeasurementDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Measurements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Measurements
     * const measurement = await prisma.measurement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MeasurementUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MeasurementUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Measurement.
     * @param {MeasurementUpsertArgs} args - Arguments to update or create a Measurement.
     * @example
     * // Update or create a Measurement
     * const measurement = await prisma.measurement.upsert({
     *   create: {
     *     // ... data to create a Measurement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Measurement we want to update
     *   }
     * })
    **/
    upsert<T extends MeasurementUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MeasurementUpsertArgs<ExtArgs>>
    ): Prisma__MeasurementClient<$Result.GetResult<Prisma.$MeasurementPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Measurements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurementCountArgs} args - Arguments to filter Measurements to count.
     * @example
     * // Count the number of Measurements
     * const count = await prisma.measurement.count({
     *   where: {
     *     // ... the filter for the Measurements we want to count
     *   }
     * })
    **/
    count<T extends MeasurementCountArgs>(
      args?: Subset<T, MeasurementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeasurementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Measurement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeasurementAggregateArgs>(args: Subset<T, MeasurementAggregateArgs>): Prisma.PrismaPromise<GetMeasurementAggregateType<T>>

    /**
     * Group by Measurement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeasurementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeasurementGroupByArgs['orderBy'] }
        : { orderBy?: MeasurementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeasurementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeasurementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Measurement model
   */
  readonly fields: MeasurementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Measurement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeasurementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Measurement model
   */ 
  interface MeasurementFieldRefs {
    readonly id: FieldRef<"Measurement", 'Int'>
    readonly createdAt: FieldRef<"Measurement", 'DateTime'>
    readonly updatedAt: FieldRef<"Measurement", 'DateTime'>
    readonly whenAdded: FieldRef<"Measurement", 'DateTime'>
    readonly weight: FieldRef<"Measurement", 'Decimal'>
    readonly userId: FieldRef<"Measurement", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Measurement findUnique
   */
  export type MeasurementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurementInclude<ExtArgs> | null
    /**
     * Filter, which Measurement to fetch.
     */
    where: MeasurementWhereUniqueInput
  }

  /**
   * Measurement findUniqueOrThrow
   */
  export type MeasurementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurementInclude<ExtArgs> | null
    /**
     * Filter, which Measurement to fetch.
     */
    where: MeasurementWhereUniqueInput
  }

  /**
   * Measurement findFirst
   */
  export type MeasurementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurementInclude<ExtArgs> | null
    /**
     * Filter, which Measurement to fetch.
     */
    where?: MeasurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Measurements to fetch.
     */
    orderBy?: MeasurementOrderByWithRelationInput | MeasurementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Measurements.
     */
    cursor?: MeasurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Measurements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Measurements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Measurements.
     */
    distinct?: MeasurementScalarFieldEnum | MeasurementScalarFieldEnum[]
  }

  /**
   * Measurement findFirstOrThrow
   */
  export type MeasurementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurementInclude<ExtArgs> | null
    /**
     * Filter, which Measurement to fetch.
     */
    where?: MeasurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Measurements to fetch.
     */
    orderBy?: MeasurementOrderByWithRelationInput | MeasurementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Measurements.
     */
    cursor?: MeasurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Measurements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Measurements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Measurements.
     */
    distinct?: MeasurementScalarFieldEnum | MeasurementScalarFieldEnum[]
  }

  /**
   * Measurement findMany
   */
  export type MeasurementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurementInclude<ExtArgs> | null
    /**
     * Filter, which Measurements to fetch.
     */
    where?: MeasurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Measurements to fetch.
     */
    orderBy?: MeasurementOrderByWithRelationInput | MeasurementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Measurements.
     */
    cursor?: MeasurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Measurements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Measurements.
     */
    skip?: number
    distinct?: MeasurementScalarFieldEnum | MeasurementScalarFieldEnum[]
  }

  /**
   * Measurement create
   */
  export type MeasurementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurementInclude<ExtArgs> | null
    /**
     * The data needed to create a Measurement.
     */
    data: XOR<MeasurementCreateInput, MeasurementUncheckedCreateInput>
  }

  /**
   * Measurement createMany
   */
  export type MeasurementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Measurements.
     */
    data: MeasurementCreateManyInput | MeasurementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Measurement createManyAndReturn
   */
  export type MeasurementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurementInclude<ExtArgs> | null
    /**
     * The data used to create many Measurements.
     */
    data: MeasurementCreateManyInput | MeasurementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Measurement update
   */
  export type MeasurementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurementInclude<ExtArgs> | null
    /**
     * The data needed to update a Measurement.
     */
    data: XOR<MeasurementUpdateInput, MeasurementUncheckedUpdateInput>
    /**
     * Choose, which Measurement to update.
     */
    where: MeasurementWhereUniqueInput
  }

  /**
   * Measurement updateMany
   */
  export type MeasurementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Measurements.
     */
    data: XOR<MeasurementUpdateManyMutationInput, MeasurementUncheckedUpdateManyInput>
    /**
     * Filter which Measurements to update
     */
    where?: MeasurementWhereInput
  }

  /**
   * Measurement upsert
   */
  export type MeasurementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurementInclude<ExtArgs> | null
    /**
     * The filter to search for the Measurement to update in case it exists.
     */
    where: MeasurementWhereUniqueInput
    /**
     * In case the Measurement found by the `where` argument doesn't exist, create a new Measurement with this data.
     */
    create: XOR<MeasurementCreateInput, MeasurementUncheckedCreateInput>
    /**
     * In case the Measurement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeasurementUpdateInput, MeasurementUncheckedUpdateInput>
  }

  /**
   * Measurement delete
   */
  export type MeasurementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurementInclude<ExtArgs> | null
    /**
     * Filter which Measurement to delete.
     */
    where: MeasurementWhereUniqueInput
  }

  /**
   * Measurement deleteMany
   */
  export type MeasurementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Measurements to delete
     */
    where?: MeasurementWhereInput
  }

  /**
   * Measurement without action
   */
  export type MeasurementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurementInclude<ExtArgs> | null
  }


  /**
   * Model Coach
   */

  export type AggregateCoach = {
    _count: CoachCountAggregateOutputType | null
    _avg: CoachAvgAggregateOutputType | null
    _sum: CoachSumAggregateOutputType | null
    _min: CoachMinAggregateOutputType | null
    _max: CoachMaxAggregateOutputType | null
  }

  export type CoachAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    countedProteins: number | null
    countedCarbs: number | null
    countedFats: number | null
    countedCalories: number | null
    currentWeight: Decimal | null
    changeInWeight: Decimal | null
  }

  export type CoachSumAggregateOutputType = {
    id: number | null
    userId: number | null
    countedProteins: number | null
    countedCarbs: number | null
    countedFats: number | null
    countedCalories: number | null
    currentWeight: Decimal | null
    changeInWeight: Decimal | null
  }

  export type CoachMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    goal: $Enums.goals | null
    kindOfDiet: $Enums.kindOfDiets | null
    isSportActive: boolean | null
    activityLevel: $Enums.activityLevels | null
    countedProteins: number | null
    countedCarbs: number | null
    countedFats: number | null
    countedCalories: number | null
    currentWeight: Decimal | null
    changeInWeight: Decimal | null
    isDataInJuicify: boolean | null
  }

  export type CoachMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    goal: $Enums.goals | null
    kindOfDiet: $Enums.kindOfDiets | null
    isSportActive: boolean | null
    activityLevel: $Enums.activityLevels | null
    countedProteins: number | null
    countedCarbs: number | null
    countedFats: number | null
    countedCalories: number | null
    currentWeight: Decimal | null
    changeInWeight: Decimal | null
    isDataInJuicify: boolean | null
  }

  export type CoachCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    userId: number
    goal: number
    kindOfDiet: number
    isSportActive: number
    activityLevel: number
    countedProteins: number
    countedCarbs: number
    countedFats: number
    countedCalories: number
    currentWeight: number
    changeInWeight: number
    isDataInJuicify: number
    data: number
    _all: number
  }


  export type CoachAvgAggregateInputType = {
    id?: true
    userId?: true
    countedProteins?: true
    countedCarbs?: true
    countedFats?: true
    countedCalories?: true
    currentWeight?: true
    changeInWeight?: true
  }

  export type CoachSumAggregateInputType = {
    id?: true
    userId?: true
    countedProteins?: true
    countedCarbs?: true
    countedFats?: true
    countedCalories?: true
    currentWeight?: true
    changeInWeight?: true
  }

  export type CoachMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    goal?: true
    kindOfDiet?: true
    isSportActive?: true
    activityLevel?: true
    countedProteins?: true
    countedCarbs?: true
    countedFats?: true
    countedCalories?: true
    currentWeight?: true
    changeInWeight?: true
    isDataInJuicify?: true
  }

  export type CoachMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    goal?: true
    kindOfDiet?: true
    isSportActive?: true
    activityLevel?: true
    countedProteins?: true
    countedCarbs?: true
    countedFats?: true
    countedCalories?: true
    currentWeight?: true
    changeInWeight?: true
    isDataInJuicify?: true
  }

  export type CoachCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    goal?: true
    kindOfDiet?: true
    isSportActive?: true
    activityLevel?: true
    countedProteins?: true
    countedCarbs?: true
    countedFats?: true
    countedCalories?: true
    currentWeight?: true
    changeInWeight?: true
    isDataInJuicify?: true
    data?: true
    _all?: true
  }

  export type CoachAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Coach to aggregate.
     */
    where?: CoachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coaches to fetch.
     */
    orderBy?: CoachOrderByWithRelationInput | CoachOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coaches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Coaches
    **/
    _count?: true | CoachCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoachAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoachSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoachMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoachMaxAggregateInputType
  }

  export type GetCoachAggregateType<T extends CoachAggregateArgs> = {
        [P in keyof T & keyof AggregateCoach]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoach[P]>
      : GetScalarType<T[P], AggregateCoach[P]>
  }




  export type CoachGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoachWhereInput
    orderBy?: CoachOrderByWithAggregationInput | CoachOrderByWithAggregationInput[]
    by: CoachScalarFieldEnum[] | CoachScalarFieldEnum
    having?: CoachScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoachCountAggregateInputType | true
    _avg?: CoachAvgAggregateInputType
    _sum?: CoachSumAggregateInputType
    _min?: CoachMinAggregateInputType
    _max?: CoachMaxAggregateInputType
  }

  export type CoachGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    userId: number
    goal: $Enums.goals
    kindOfDiet: $Enums.kindOfDiets
    isSportActive: boolean
    activityLevel: $Enums.activityLevels
    countedProteins: number
    countedCarbs: number
    countedFats: number
    countedCalories: number
    currentWeight: Decimal
    changeInWeight: Decimal
    isDataInJuicify: boolean
    data: JsonValue
    _count: CoachCountAggregateOutputType | null
    _avg: CoachAvgAggregateOutputType | null
    _sum: CoachSumAggregateOutputType | null
    _min: CoachMinAggregateOutputType | null
    _max: CoachMaxAggregateOutputType | null
  }

  type GetCoachGroupByPayload<T extends CoachGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoachGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoachGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoachGroupByOutputType[P]>
            : GetScalarType<T[P], CoachGroupByOutputType[P]>
        }
      >
    >


  export type CoachSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    goal?: boolean
    kindOfDiet?: boolean
    isSportActive?: boolean
    activityLevel?: boolean
    countedProteins?: boolean
    countedCarbs?: boolean
    countedFats?: boolean
    countedCalories?: boolean
    currentWeight?: boolean
    changeInWeight?: boolean
    isDataInJuicify?: boolean
    data?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coach"]>

  export type CoachSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    goal?: boolean
    kindOfDiet?: boolean
    isSportActive?: boolean
    activityLevel?: boolean
    countedProteins?: boolean
    countedCarbs?: boolean
    countedFats?: boolean
    countedCalories?: boolean
    currentWeight?: boolean
    changeInWeight?: boolean
    isDataInJuicify?: boolean
    data?: boolean
  }


  export type CoachInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $CoachPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Coach"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      userId: number
      goal: $Enums.goals
      kindOfDiet: $Enums.kindOfDiets
      isSportActive: boolean
      activityLevel: $Enums.activityLevels
      countedProteins: number
      countedCarbs: number
      countedFats: number
      countedCalories: number
      currentWeight: Prisma.Decimal
      changeInWeight: Prisma.Decimal
      isDataInJuicify: boolean
      data: Prisma.JsonValue
    }, ExtArgs["result"]["coach"]>
    composites: {}
  }


  type CoachGetPayload<S extends boolean | null | undefined | CoachDefaultArgs> = $Result.GetResult<Prisma.$CoachPayload, S>

  type CoachCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CoachFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CoachCountAggregateInputType | true
    }

  export interface CoachDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Coach'], meta: { name: 'Coach' } }
    /**
     * Find zero or one Coach that matches the filter.
     * @param {CoachFindUniqueArgs} args - Arguments to find a Coach
     * @example
     * // Get one Coach
     * const coach = await prisma.coach.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CoachFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CoachFindUniqueArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Coach that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CoachFindUniqueOrThrowArgs} args - Arguments to find a Coach
     * @example
     * // Get one Coach
     * const coach = await prisma.coach.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CoachFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CoachFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Coach that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoachFindFirstArgs} args - Arguments to find a Coach
     * @example
     * // Get one Coach
     * const coach = await prisma.coach.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CoachFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CoachFindFirstArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Coach that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoachFindFirstOrThrowArgs} args - Arguments to find a Coach
     * @example
     * // Get one Coach
     * const coach = await prisma.coach.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CoachFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CoachFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Coaches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoachFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Coaches
     * const coaches = await prisma.coach.findMany()
     * 
     * // Get first 10 Coaches
     * const coaches = await prisma.coach.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coachWithIdOnly = await prisma.coach.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CoachFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CoachFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Coach.
     * @param {CoachCreateArgs} args - Arguments to create a Coach.
     * @example
     * // Create one Coach
     * const Coach = await prisma.coach.create({
     *   data: {
     *     // ... data to create a Coach
     *   }
     * })
     * 
    **/
    create<T extends CoachCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CoachCreateArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Coaches.
     * @param {CoachCreateManyArgs} args - Arguments to create many Coaches.
     * @example
     * // Create many Coaches
     * const coach = await prisma.coach.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends CoachCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CoachCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Coaches and returns the data saved in the database.
     * @param {CoachCreateManyAndReturnArgs} args - Arguments to create many Coaches.
     * @example
     * // Create many Coaches
     * const coach = await prisma.coach.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Coaches and only return the `id`
     * const coachWithIdOnly = await prisma.coach.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends CoachCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, CoachCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Coach.
     * @param {CoachDeleteArgs} args - Arguments to delete one Coach.
     * @example
     * // Delete one Coach
     * const Coach = await prisma.coach.delete({
     *   where: {
     *     // ... filter to delete one Coach
     *   }
     * })
     * 
    **/
    delete<T extends CoachDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CoachDeleteArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Coach.
     * @param {CoachUpdateArgs} args - Arguments to update one Coach.
     * @example
     * // Update one Coach
     * const coach = await prisma.coach.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CoachUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CoachUpdateArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Coaches.
     * @param {CoachDeleteManyArgs} args - Arguments to filter Coaches to delete.
     * @example
     * // Delete a few Coaches
     * const { count } = await prisma.coach.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CoachDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CoachDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Coaches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoachUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Coaches
     * const coach = await prisma.coach.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CoachUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CoachUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Coach.
     * @param {CoachUpsertArgs} args - Arguments to update or create a Coach.
     * @example
     * // Update or create a Coach
     * const coach = await prisma.coach.upsert({
     *   create: {
     *     // ... data to create a Coach
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Coach we want to update
     *   }
     * })
    **/
    upsert<T extends CoachUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CoachUpsertArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Coaches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoachCountArgs} args - Arguments to filter Coaches to count.
     * @example
     * // Count the number of Coaches
     * const count = await prisma.coach.count({
     *   where: {
     *     // ... the filter for the Coaches we want to count
     *   }
     * })
    **/
    count<T extends CoachCountArgs>(
      args?: Subset<T, CoachCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoachCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Coach.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoachAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoachAggregateArgs>(args: Subset<T, CoachAggregateArgs>): Prisma.PrismaPromise<GetCoachAggregateType<T>>

    /**
     * Group by Coach.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoachGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoachGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoachGroupByArgs['orderBy'] }
        : { orderBy?: CoachGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoachGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoachGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Coach model
   */
  readonly fields: CoachFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Coach.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoachClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Coach model
   */ 
  interface CoachFieldRefs {
    readonly id: FieldRef<"Coach", 'Int'>
    readonly createdAt: FieldRef<"Coach", 'DateTime'>
    readonly updatedAt: FieldRef<"Coach", 'DateTime'>
    readonly userId: FieldRef<"Coach", 'Int'>
    readonly goal: FieldRef<"Coach", 'goals'>
    readonly kindOfDiet: FieldRef<"Coach", 'kindOfDiets'>
    readonly isSportActive: FieldRef<"Coach", 'Boolean'>
    readonly activityLevel: FieldRef<"Coach", 'activityLevels'>
    readonly countedProteins: FieldRef<"Coach", 'Int'>
    readonly countedCarbs: FieldRef<"Coach", 'Int'>
    readonly countedFats: FieldRef<"Coach", 'Int'>
    readonly countedCalories: FieldRef<"Coach", 'Int'>
    readonly currentWeight: FieldRef<"Coach", 'Decimal'>
    readonly changeInWeight: FieldRef<"Coach", 'Decimal'>
    readonly isDataInJuicify: FieldRef<"Coach", 'Boolean'>
    readonly data: FieldRef<"Coach", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Coach findUnique
   */
  export type CoachFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * Filter, which Coach to fetch.
     */
    where: CoachWhereUniqueInput
  }

  /**
   * Coach findUniqueOrThrow
   */
  export type CoachFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * Filter, which Coach to fetch.
     */
    where: CoachWhereUniqueInput
  }

  /**
   * Coach findFirst
   */
  export type CoachFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * Filter, which Coach to fetch.
     */
    where?: CoachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coaches to fetch.
     */
    orderBy?: CoachOrderByWithRelationInput | CoachOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coaches.
     */
    cursor?: CoachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coaches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coaches.
     */
    distinct?: CoachScalarFieldEnum | CoachScalarFieldEnum[]
  }

  /**
   * Coach findFirstOrThrow
   */
  export type CoachFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * Filter, which Coach to fetch.
     */
    where?: CoachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coaches to fetch.
     */
    orderBy?: CoachOrderByWithRelationInput | CoachOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coaches.
     */
    cursor?: CoachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coaches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coaches.
     */
    distinct?: CoachScalarFieldEnum | CoachScalarFieldEnum[]
  }

  /**
   * Coach findMany
   */
  export type CoachFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * Filter, which Coaches to fetch.
     */
    where?: CoachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coaches to fetch.
     */
    orderBy?: CoachOrderByWithRelationInput | CoachOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Coaches.
     */
    cursor?: CoachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coaches.
     */
    skip?: number
    distinct?: CoachScalarFieldEnum | CoachScalarFieldEnum[]
  }

  /**
   * Coach create
   */
  export type CoachCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * The data needed to create a Coach.
     */
    data: XOR<CoachCreateInput, CoachUncheckedCreateInput>
  }

  /**
   * Coach createMany
   */
  export type CoachCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Coaches.
     */
    data: CoachCreateManyInput | CoachCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Coach createManyAndReturn
   */
  export type CoachCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * The data used to create many Coaches.
     */
    data: CoachCreateManyInput | CoachCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Coach update
   */
  export type CoachUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * The data needed to update a Coach.
     */
    data: XOR<CoachUpdateInput, CoachUncheckedUpdateInput>
    /**
     * Choose, which Coach to update.
     */
    where: CoachWhereUniqueInput
  }

  /**
   * Coach updateMany
   */
  export type CoachUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Coaches.
     */
    data: XOR<CoachUpdateManyMutationInput, CoachUncheckedUpdateManyInput>
    /**
     * Filter which Coaches to update
     */
    where?: CoachWhereInput
  }

  /**
   * Coach upsert
   */
  export type CoachUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * The filter to search for the Coach to update in case it exists.
     */
    where: CoachWhereUniqueInput
    /**
     * In case the Coach found by the `where` argument doesn't exist, create a new Coach with this data.
     */
    create: XOR<CoachCreateInput, CoachUncheckedCreateInput>
    /**
     * In case the Coach was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoachUpdateInput, CoachUncheckedUpdateInput>
  }

  /**
   * Coach delete
   */
  export type CoachDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * Filter which Coach to delete.
     */
    where: CoachWhereUniqueInput
  }

  /**
   * Coach deleteMany
   */
  export type CoachDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Coaches to delete
     */
    where?: CoachWhereInput
  }

  /**
   * Coach without action
   */
  export type CoachDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
  }


  /**
   * Model BurnedCalories
   */

  export type AggregateBurnedCalories = {
    _count: BurnedCaloriesCountAggregateOutputType | null
    _avg: BurnedCaloriesAvgAggregateOutputType | null
    _sum: BurnedCaloriesSumAggregateOutputType | null
    _min: BurnedCaloriesMinAggregateOutputType | null
    _max: BurnedCaloriesMaxAggregateOutputType | null
  }

  export type BurnedCaloriesAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    burnedCalories: number | null
  }

  export type BurnedCaloriesSumAggregateOutputType = {
    id: number | null
    userId: number | null
    burnedCalories: number | null
  }

  export type BurnedCaloriesMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    whenAdded: Date | null
    userId: number | null
    name: string | null
    burnedCalories: number | null
  }

  export type BurnedCaloriesMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    whenAdded: Date | null
    userId: number | null
    name: string | null
    burnedCalories: number | null
  }

  export type BurnedCaloriesCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    whenAdded: number
    userId: number
    name: number
    burnedCalories: number
    _all: number
  }


  export type BurnedCaloriesAvgAggregateInputType = {
    id?: true
    userId?: true
    burnedCalories?: true
  }

  export type BurnedCaloriesSumAggregateInputType = {
    id?: true
    userId?: true
    burnedCalories?: true
  }

  export type BurnedCaloriesMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    whenAdded?: true
    userId?: true
    name?: true
    burnedCalories?: true
  }

  export type BurnedCaloriesMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    whenAdded?: true
    userId?: true
    name?: true
    burnedCalories?: true
  }

  export type BurnedCaloriesCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    whenAdded?: true
    userId?: true
    name?: true
    burnedCalories?: true
    _all?: true
  }

  export type BurnedCaloriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BurnedCalories to aggregate.
     */
    where?: BurnedCaloriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BurnedCalories to fetch.
     */
    orderBy?: BurnedCaloriesOrderByWithRelationInput | BurnedCaloriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BurnedCaloriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BurnedCalories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BurnedCalories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BurnedCalories
    **/
    _count?: true | BurnedCaloriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BurnedCaloriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BurnedCaloriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BurnedCaloriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BurnedCaloriesMaxAggregateInputType
  }

  export type GetBurnedCaloriesAggregateType<T extends BurnedCaloriesAggregateArgs> = {
        [P in keyof T & keyof AggregateBurnedCalories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBurnedCalories[P]>
      : GetScalarType<T[P], AggregateBurnedCalories[P]>
  }




  export type BurnedCaloriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BurnedCaloriesWhereInput
    orderBy?: BurnedCaloriesOrderByWithAggregationInput | BurnedCaloriesOrderByWithAggregationInput[]
    by: BurnedCaloriesScalarFieldEnum[] | BurnedCaloriesScalarFieldEnum
    having?: BurnedCaloriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BurnedCaloriesCountAggregateInputType | true
    _avg?: BurnedCaloriesAvgAggregateInputType
    _sum?: BurnedCaloriesSumAggregateInputType
    _min?: BurnedCaloriesMinAggregateInputType
    _max?: BurnedCaloriesMaxAggregateInputType
  }

  export type BurnedCaloriesGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    whenAdded: Date
    userId: number
    name: string
    burnedCalories: number
    _count: BurnedCaloriesCountAggregateOutputType | null
    _avg: BurnedCaloriesAvgAggregateOutputType | null
    _sum: BurnedCaloriesSumAggregateOutputType | null
    _min: BurnedCaloriesMinAggregateOutputType | null
    _max: BurnedCaloriesMaxAggregateOutputType | null
  }

  type GetBurnedCaloriesGroupByPayload<T extends BurnedCaloriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BurnedCaloriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BurnedCaloriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BurnedCaloriesGroupByOutputType[P]>
            : GetScalarType<T[P], BurnedCaloriesGroupByOutputType[P]>
        }
      >
    >


  export type BurnedCaloriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    whenAdded?: boolean
    userId?: boolean
    name?: boolean
    burnedCalories?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["burnedCalories"]>

  export type BurnedCaloriesSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    whenAdded?: boolean
    userId?: boolean
    name?: boolean
    burnedCalories?: boolean
  }


  export type BurnedCaloriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $BurnedCaloriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BurnedCalories"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      whenAdded: Date
      userId: number
      name: string
      burnedCalories: number
    }, ExtArgs["result"]["burnedCalories"]>
    composites: {}
  }


  type BurnedCaloriesGetPayload<S extends boolean | null | undefined | BurnedCaloriesDefaultArgs> = $Result.GetResult<Prisma.$BurnedCaloriesPayload, S>

  type BurnedCaloriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BurnedCaloriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BurnedCaloriesCountAggregateInputType | true
    }

  export interface BurnedCaloriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BurnedCalories'], meta: { name: 'BurnedCalories' } }
    /**
     * Find zero or one BurnedCalories that matches the filter.
     * @param {BurnedCaloriesFindUniqueArgs} args - Arguments to find a BurnedCalories
     * @example
     * // Get one BurnedCalories
     * const burnedCalories = await prisma.burnedCalories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BurnedCaloriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BurnedCaloriesFindUniqueArgs<ExtArgs>>
    ): Prisma__BurnedCaloriesClient<$Result.GetResult<Prisma.$BurnedCaloriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one BurnedCalories that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BurnedCaloriesFindUniqueOrThrowArgs} args - Arguments to find a BurnedCalories
     * @example
     * // Get one BurnedCalories
     * const burnedCalories = await prisma.burnedCalories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BurnedCaloriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BurnedCaloriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BurnedCaloriesClient<$Result.GetResult<Prisma.$BurnedCaloriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first BurnedCalories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BurnedCaloriesFindFirstArgs} args - Arguments to find a BurnedCalories
     * @example
     * // Get one BurnedCalories
     * const burnedCalories = await prisma.burnedCalories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BurnedCaloriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BurnedCaloriesFindFirstArgs<ExtArgs>>
    ): Prisma__BurnedCaloriesClient<$Result.GetResult<Prisma.$BurnedCaloriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first BurnedCalories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BurnedCaloriesFindFirstOrThrowArgs} args - Arguments to find a BurnedCalories
     * @example
     * // Get one BurnedCalories
     * const burnedCalories = await prisma.burnedCalories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BurnedCaloriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BurnedCaloriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BurnedCaloriesClient<$Result.GetResult<Prisma.$BurnedCaloriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more BurnedCalories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BurnedCaloriesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BurnedCalories
     * const burnedCalories = await prisma.burnedCalories.findMany()
     * 
     * // Get first 10 BurnedCalories
     * const burnedCalories = await prisma.burnedCalories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const burnedCaloriesWithIdOnly = await prisma.burnedCalories.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BurnedCaloriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BurnedCaloriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BurnedCaloriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a BurnedCalories.
     * @param {BurnedCaloriesCreateArgs} args - Arguments to create a BurnedCalories.
     * @example
     * // Create one BurnedCalories
     * const BurnedCalories = await prisma.burnedCalories.create({
     *   data: {
     *     // ... data to create a BurnedCalories
     *   }
     * })
     * 
    **/
    create<T extends BurnedCaloriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BurnedCaloriesCreateArgs<ExtArgs>>
    ): Prisma__BurnedCaloriesClient<$Result.GetResult<Prisma.$BurnedCaloriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many BurnedCalories.
     * @param {BurnedCaloriesCreateManyArgs} args - Arguments to create many BurnedCalories.
     * @example
     * // Create many BurnedCalories
     * const burnedCalories = await prisma.burnedCalories.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends BurnedCaloriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BurnedCaloriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BurnedCalories and returns the data saved in the database.
     * @param {BurnedCaloriesCreateManyAndReturnArgs} args - Arguments to create many BurnedCalories.
     * @example
     * // Create many BurnedCalories
     * const burnedCalories = await prisma.burnedCalories.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BurnedCalories and only return the `id`
     * const burnedCaloriesWithIdOnly = await prisma.burnedCalories.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends BurnedCaloriesCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, BurnedCaloriesCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BurnedCaloriesPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a BurnedCalories.
     * @param {BurnedCaloriesDeleteArgs} args - Arguments to delete one BurnedCalories.
     * @example
     * // Delete one BurnedCalories
     * const BurnedCalories = await prisma.burnedCalories.delete({
     *   where: {
     *     // ... filter to delete one BurnedCalories
     *   }
     * })
     * 
    **/
    delete<T extends BurnedCaloriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BurnedCaloriesDeleteArgs<ExtArgs>>
    ): Prisma__BurnedCaloriesClient<$Result.GetResult<Prisma.$BurnedCaloriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one BurnedCalories.
     * @param {BurnedCaloriesUpdateArgs} args - Arguments to update one BurnedCalories.
     * @example
     * // Update one BurnedCalories
     * const burnedCalories = await prisma.burnedCalories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BurnedCaloriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BurnedCaloriesUpdateArgs<ExtArgs>>
    ): Prisma__BurnedCaloriesClient<$Result.GetResult<Prisma.$BurnedCaloriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more BurnedCalories.
     * @param {BurnedCaloriesDeleteManyArgs} args - Arguments to filter BurnedCalories to delete.
     * @example
     * // Delete a few BurnedCalories
     * const { count } = await prisma.burnedCalories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BurnedCaloriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BurnedCaloriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BurnedCalories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BurnedCaloriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BurnedCalories
     * const burnedCalories = await prisma.burnedCalories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BurnedCaloriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BurnedCaloriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BurnedCalories.
     * @param {BurnedCaloriesUpsertArgs} args - Arguments to update or create a BurnedCalories.
     * @example
     * // Update or create a BurnedCalories
     * const burnedCalories = await prisma.burnedCalories.upsert({
     *   create: {
     *     // ... data to create a BurnedCalories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BurnedCalories we want to update
     *   }
     * })
    **/
    upsert<T extends BurnedCaloriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BurnedCaloriesUpsertArgs<ExtArgs>>
    ): Prisma__BurnedCaloriesClient<$Result.GetResult<Prisma.$BurnedCaloriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of BurnedCalories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BurnedCaloriesCountArgs} args - Arguments to filter BurnedCalories to count.
     * @example
     * // Count the number of BurnedCalories
     * const count = await prisma.burnedCalories.count({
     *   where: {
     *     // ... the filter for the BurnedCalories we want to count
     *   }
     * })
    **/
    count<T extends BurnedCaloriesCountArgs>(
      args?: Subset<T, BurnedCaloriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BurnedCaloriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BurnedCalories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BurnedCaloriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BurnedCaloriesAggregateArgs>(args: Subset<T, BurnedCaloriesAggregateArgs>): Prisma.PrismaPromise<GetBurnedCaloriesAggregateType<T>>

    /**
     * Group by BurnedCalories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BurnedCaloriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BurnedCaloriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BurnedCaloriesGroupByArgs['orderBy'] }
        : { orderBy?: BurnedCaloriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BurnedCaloriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBurnedCaloriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BurnedCalories model
   */
  readonly fields: BurnedCaloriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BurnedCalories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BurnedCaloriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the BurnedCalories model
   */ 
  interface BurnedCaloriesFieldRefs {
    readonly id: FieldRef<"BurnedCalories", 'Int'>
    readonly createdAt: FieldRef<"BurnedCalories", 'DateTime'>
    readonly updatedAt: FieldRef<"BurnedCalories", 'DateTime'>
    readonly whenAdded: FieldRef<"BurnedCalories", 'DateTime'>
    readonly userId: FieldRef<"BurnedCalories", 'Int'>
    readonly name: FieldRef<"BurnedCalories", 'String'>
    readonly burnedCalories: FieldRef<"BurnedCalories", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * BurnedCalories findUnique
   */
  export type BurnedCaloriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurnedCalories
     */
    select?: BurnedCaloriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnedCaloriesInclude<ExtArgs> | null
    /**
     * Filter, which BurnedCalories to fetch.
     */
    where: BurnedCaloriesWhereUniqueInput
  }

  /**
   * BurnedCalories findUniqueOrThrow
   */
  export type BurnedCaloriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurnedCalories
     */
    select?: BurnedCaloriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnedCaloriesInclude<ExtArgs> | null
    /**
     * Filter, which BurnedCalories to fetch.
     */
    where: BurnedCaloriesWhereUniqueInput
  }

  /**
   * BurnedCalories findFirst
   */
  export type BurnedCaloriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurnedCalories
     */
    select?: BurnedCaloriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnedCaloriesInclude<ExtArgs> | null
    /**
     * Filter, which BurnedCalories to fetch.
     */
    where?: BurnedCaloriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BurnedCalories to fetch.
     */
    orderBy?: BurnedCaloriesOrderByWithRelationInput | BurnedCaloriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BurnedCalories.
     */
    cursor?: BurnedCaloriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BurnedCalories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BurnedCalories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BurnedCalories.
     */
    distinct?: BurnedCaloriesScalarFieldEnum | BurnedCaloriesScalarFieldEnum[]
  }

  /**
   * BurnedCalories findFirstOrThrow
   */
  export type BurnedCaloriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurnedCalories
     */
    select?: BurnedCaloriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnedCaloriesInclude<ExtArgs> | null
    /**
     * Filter, which BurnedCalories to fetch.
     */
    where?: BurnedCaloriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BurnedCalories to fetch.
     */
    orderBy?: BurnedCaloriesOrderByWithRelationInput | BurnedCaloriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BurnedCalories.
     */
    cursor?: BurnedCaloriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BurnedCalories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BurnedCalories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BurnedCalories.
     */
    distinct?: BurnedCaloriesScalarFieldEnum | BurnedCaloriesScalarFieldEnum[]
  }

  /**
   * BurnedCalories findMany
   */
  export type BurnedCaloriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurnedCalories
     */
    select?: BurnedCaloriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnedCaloriesInclude<ExtArgs> | null
    /**
     * Filter, which BurnedCalories to fetch.
     */
    where?: BurnedCaloriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BurnedCalories to fetch.
     */
    orderBy?: BurnedCaloriesOrderByWithRelationInput | BurnedCaloriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BurnedCalories.
     */
    cursor?: BurnedCaloriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BurnedCalories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BurnedCalories.
     */
    skip?: number
    distinct?: BurnedCaloriesScalarFieldEnum | BurnedCaloriesScalarFieldEnum[]
  }

  /**
   * BurnedCalories create
   */
  export type BurnedCaloriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurnedCalories
     */
    select?: BurnedCaloriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnedCaloriesInclude<ExtArgs> | null
    /**
     * The data needed to create a BurnedCalories.
     */
    data: XOR<BurnedCaloriesCreateInput, BurnedCaloriesUncheckedCreateInput>
  }

  /**
   * BurnedCalories createMany
   */
  export type BurnedCaloriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BurnedCalories.
     */
    data: BurnedCaloriesCreateManyInput | BurnedCaloriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BurnedCalories createManyAndReturn
   */
  export type BurnedCaloriesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurnedCalories
     */
    select?: BurnedCaloriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnedCaloriesInclude<ExtArgs> | null
    /**
     * The data used to create many BurnedCalories.
     */
    data: BurnedCaloriesCreateManyInput | BurnedCaloriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BurnedCalories update
   */
  export type BurnedCaloriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurnedCalories
     */
    select?: BurnedCaloriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnedCaloriesInclude<ExtArgs> | null
    /**
     * The data needed to update a BurnedCalories.
     */
    data: XOR<BurnedCaloriesUpdateInput, BurnedCaloriesUncheckedUpdateInput>
    /**
     * Choose, which BurnedCalories to update.
     */
    where: BurnedCaloriesWhereUniqueInput
  }

  /**
   * BurnedCalories updateMany
   */
  export type BurnedCaloriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BurnedCalories.
     */
    data: XOR<BurnedCaloriesUpdateManyMutationInput, BurnedCaloriesUncheckedUpdateManyInput>
    /**
     * Filter which BurnedCalories to update
     */
    where?: BurnedCaloriesWhereInput
  }

  /**
   * BurnedCalories upsert
   */
  export type BurnedCaloriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurnedCalories
     */
    select?: BurnedCaloriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnedCaloriesInclude<ExtArgs> | null
    /**
     * The filter to search for the BurnedCalories to update in case it exists.
     */
    where: BurnedCaloriesWhereUniqueInput
    /**
     * In case the BurnedCalories found by the `where` argument doesn't exist, create a new BurnedCalories with this data.
     */
    create: XOR<BurnedCaloriesCreateInput, BurnedCaloriesUncheckedCreateInput>
    /**
     * In case the BurnedCalories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BurnedCaloriesUpdateInput, BurnedCaloriesUncheckedUpdateInput>
  }

  /**
   * BurnedCalories delete
   */
  export type BurnedCaloriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurnedCalories
     */
    select?: BurnedCaloriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnedCaloriesInclude<ExtArgs> | null
    /**
     * Filter which BurnedCalories to delete.
     */
    where: BurnedCaloriesWhereUniqueInput
  }

  /**
   * BurnedCalories deleteMany
   */
  export type BurnedCaloriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BurnedCalories to delete
     */
    where?: BurnedCaloriesWhereInput
  }

  /**
   * BurnedCalories without action
   */
  export type BurnedCaloriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BurnedCalories
     */
    select?: BurnedCaloriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BurnedCaloriesInclude<ExtArgs> | null
  }


  /**
   * Model Post
   */

  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PostSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PostMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    whenAdded: Date | null
    userId: number | null
    title: string | null
    content: string | null
    img_url: string | null
  }

  export type PostMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    whenAdded: Date | null
    userId: number | null
    title: string | null
    content: string | null
    img_url: string | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    whenAdded: number
    userId: number
    title: number
    content: number
    img_url: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PostSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    whenAdded?: true
    userId?: true
    title?: true
    content?: true
    img_url?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    whenAdded?: true
    userId?: true
    title?: true
    content?: true
    img_url?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    whenAdded?: true
    userId?: true
    title?: true
    content?: true
    img_url?: true
    _all?: true
  }

  export type PostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
    orderBy?: PostOrderByWithAggregationInput | PostOrderByWithAggregationInput[]
    by: PostScalarFieldEnum[] | PostScalarFieldEnum
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }

  export type PostGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    whenAdded: Date
    userId: number
    title: string
    content: string
    img_url: string
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    whenAdded?: boolean
    userId?: boolean
    title?: boolean
    content?: boolean
    img_url?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    whenAdded?: boolean
    userId?: boolean
    title?: boolean
    content?: boolean
    img_url?: boolean
  }


  export type PostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $PostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Post"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      whenAdded: Date
      userId: number
      title: string
      content: string
      img_url: string
    }, ExtArgs["result"]["post"]>
    composites: {}
  }


  type PostGetPayload<S extends boolean | null | undefined | PostDefaultArgs> = $Result.GetResult<Prisma.$PostPayload, S>

  type PostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PostFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Post'], meta: { name: 'Post' } }
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PostFindUniqueArgs<ExtArgs>>
    ): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Post that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PostFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PostFindFirstArgs<ExtArgs>>
    ): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PostFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PostFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PostFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
    **/
    create<T extends PostCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PostCreateArgs<ExtArgs>>
    ): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Posts.
     * @param {PostCreateManyArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends PostCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PostCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Posts and returns the data saved in the database.
     * @param {PostCreateManyAndReturnArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends PostCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, PostCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
    **/
    delete<T extends PostDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PostDeleteArgs<ExtArgs>>
    ): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PostUpdateArgs<ExtArgs>>
    ): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PostDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PostUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
    **/
    upsert<T extends PostUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PostUpsertArgs<ExtArgs>>
    ): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Post model
   */
  readonly fields: PostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Post model
   */ 
  interface PostFieldRefs {
    readonly id: FieldRef<"Post", 'Int'>
    readonly createdAt: FieldRef<"Post", 'DateTime'>
    readonly updatedAt: FieldRef<"Post", 'DateTime'>
    readonly whenAdded: FieldRef<"Post", 'DateTime'>
    readonly userId: FieldRef<"Post", 'Int'>
    readonly title: FieldRef<"Post", 'String'>
    readonly content: FieldRef<"Post", 'String'>
    readonly img_url: FieldRef<"Post", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Post findUnique
   */
  export type PostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findFirst
   */
  export type PostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findMany
   */
  export type PostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post create
   */
  export type PostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }

  /**
   * Post createMany
   */
  export type PostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Post createManyAndReturn
   */
  export type PostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Post update
   */
  export type PostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
  }

  /**
   * Post upsert
   */
  export type PostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }

  /**
   * Post delete
   */
  export type PostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
  }

  /**
   * Post without action
   */
  export type PostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AccountScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const PermissionScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    description: 'description'
  };

  export type PermissionScalarFieldEnum = (typeof PermissionScalarFieldEnum)[keyof typeof PermissionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    username: 'username',
    name: 'name',
    surname: 'surname',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    locale: 'locale',
    numberOfMeals: 'numberOfMeals',
    proteinsDay0: 'proteinsDay0',
    carbsDay0: 'carbsDay0',
    fatsDay0: 'fatsDay0',
    proteinsDay1: 'proteinsDay1',
    carbsDay1: 'carbsDay1',
    fatsDay1: 'fatsDay1',
    proteinsDay2: 'proteinsDay2',
    carbsDay2: 'carbsDay2',
    fatsDay2: 'fatsDay2',
    proteinsDay3: 'proteinsDay3',
    carbsDay3: 'carbsDay3',
    fatsDay3: 'fatsDay3',
    proteinsDay4: 'proteinsDay4',
    carbsDay4: 'carbsDay4',
    fatsDay4: 'fatsDay4',
    proteinsDay5: 'proteinsDay5',
    carbsDay5: 'carbsDay5',
    fatsDay5: 'fatsDay5',
    proteinsDay6: 'proteinsDay6',
    carbsDay6: 'carbsDay6',
    fatsDay6: 'fatsDay6',
    fiber: 'fiber',
    carbsPercentAsSugar: 'carbsPercentAsSugar',
    nextCoach: 'nextCoach',
    isCoachAnalyze: 'isCoachAnalyze',
    height: 'height',
    birth: 'birth',
    description: 'description',
    website: 'website',
    facebook: 'facebook',
    instagram: 'instagram',
    twitter: 'twitter',
    goal: 'goal',
    kindOfDiet: 'kindOfDiet',
    isSportActive: 'isSportActive',
    activityLevel: 'activityLevel',
    sex: 'sex',
    isBanned: 'isBanned'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const ExerciseScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    name: 'name',
    nameLength: 'nameLength',
    isDeleted: 'isDeleted'
  };

  export type ExerciseScalarFieldEnum = (typeof ExerciseScalarFieldEnum)[keyof typeof ExerciseScalarFieldEnum]


  export const WorkoutPlanScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    name: 'name',
    description: 'description',
    burnedCalories: 'burnedCalories',
    isDeleted: 'isDeleted',
    exercises: 'exercises'
  };

  export type WorkoutPlanScalarFieldEnum = (typeof WorkoutPlanScalarFieldEnum)[keyof typeof WorkoutPlanScalarFieldEnum]


  export const WorkoutResultScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    name: 'name',
    note: 'note',
    burnedCalories: 'burnedCalories',
    exercises: 'exercises',
    workoutPlanId: 'workoutPlanId',
    whenAdded: 'whenAdded'
  };

  export type WorkoutResultScalarFieldEnum = (typeof WorkoutResultScalarFieldEnum)[keyof typeof WorkoutResultScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    name: 'name',
    nameLength: 'nameLength',
    proteins: 'proteins',
    carbs: 'carbs',
    sugar: 'sugar',
    fats: 'fats',
    fiber: 'fiber',
    sodium: 'sodium',
    ethanol: 'ethanol',
    barcode: 'barcode',
    isVerified: 'isVerified',
    isDeleted: 'isDeleted',
    isExpectingCheck: 'isExpectingCheck'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ConsumedScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    whenAdded: 'whenAdded',
    productId: 'productId',
    howMany: 'howMany',
    meal: 'meal'
  };

  export type ConsumedScalarFieldEnum = (typeof ConsumedScalarFieldEnum)[keyof typeof ConsumedScalarFieldEnum]


  export const MeasurementScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    whenAdded: 'whenAdded',
    weight: 'weight',
    userId: 'userId'
  };

  export type MeasurementScalarFieldEnum = (typeof MeasurementScalarFieldEnum)[keyof typeof MeasurementScalarFieldEnum]


  export const CoachScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    goal: 'goal',
    kindOfDiet: 'kindOfDiet',
    isSportActive: 'isSportActive',
    activityLevel: 'activityLevel',
    countedProteins: 'countedProteins',
    countedCarbs: 'countedCarbs',
    countedFats: 'countedFats',
    countedCalories: 'countedCalories',
    currentWeight: 'currentWeight',
    changeInWeight: 'changeInWeight',
    isDataInJuicify: 'isDataInJuicify',
    data: 'data'
  };

  export type CoachScalarFieldEnum = (typeof CoachScalarFieldEnum)[keyof typeof CoachScalarFieldEnum]


  export const BurnedCaloriesScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    whenAdded: 'whenAdded',
    userId: 'userId',
    name: 'name',
    burnedCalories: 'burnedCalories'
  };

  export type BurnedCaloriesScalarFieldEnum = (typeof BurnedCaloriesScalarFieldEnum)[keyof typeof BurnedCaloriesScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    whenAdded: 'whenAdded',
    userId: 'userId',
    title: 'title',
    content: 'content',
    img_url: 'img_url'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'goals'
   */
  export type EnumgoalsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'goals'>
    


  /**
   * Reference to a field of type 'goals[]'
   */
  export type ListEnumgoalsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'goals[]'>
    


  /**
   * Reference to a field of type 'kindOfDiets'
   */
  export type EnumkindOfDietsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'kindOfDiets'>
    


  /**
   * Reference to a field of type 'kindOfDiets[]'
   */
  export type ListEnumkindOfDietsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'kindOfDiets[]'>
    


  /**
   * Reference to a field of type 'activityLevels'
   */
  export type EnumactivityLevelsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'activityLevels'>
    


  /**
   * Reference to a field of type 'activityLevels[]'
   */
  export type ListEnumactivityLevelsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'activityLevels[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: IntFilter<"Account"> | number
    createdAt?: DateTimeFilter<"Account"> | Date | string
    userId?: IntFilter<"Account"> | number
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    createdAt?: DateTimeFilter<"Account"> | Date | string
    userId?: IntFilter<"Account"> | number
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Account"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    userId?: IntWithAggregatesFilter<"Account"> | number
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: IntFilter<"Session"> | number
    createdAt?: DateTimeFilter<"Session"> | Date | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: IntFilter<"Session"> | number
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    createdAt?: DateTimeFilter<"Session"> | Date | string
    userId?: IntFilter<"Session"> | number
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Session"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: IntWithAggregatesFilter<"Session"> | number
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type PermissionWhereInput = {
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    id?: IntFilter<"Permission"> | number
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    updatedAt?: DateTimeFilter<"Permission"> | Date | string
    name?: StringFilter<"Permission"> | string
    description?: StringNullableFilter<"Permission"> | string | null
    users?: UserListRelationFilter
  }

  export type PermissionOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type PermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    updatedAt?: DateTimeFilter<"Permission"> | Date | string
    name?: StringFilter<"Permission"> | string
    description?: StringNullableFilter<"Permission"> | string | null
    users?: UserListRelationFilter
  }, "id">

  export type PermissionOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: PermissionCountOrderByAggregateInput
    _avg?: PermissionAvgOrderByAggregateInput
    _max?: PermissionMaxOrderByAggregateInput
    _min?: PermissionMinOrderByAggregateInput
    _sum?: PermissionSumOrderByAggregateInput
  }

  export type PermissionScalarWhereWithAggregatesInput = {
    AND?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    OR?: PermissionScalarWhereWithAggregatesInput[]
    NOT?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Permission"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Permission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Permission"> | Date | string
    name?: StringWithAggregatesFilter<"Permission"> | string
    description?: StringNullableWithAggregatesFilter<"Permission"> | string | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    username?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    surname?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    locale?: StringFilter<"User"> | string
    numberOfMeals?: IntFilter<"User"> | number
    proteinsDay0?: IntFilter<"User"> | number
    carbsDay0?: IntFilter<"User"> | number
    fatsDay0?: IntFilter<"User"> | number
    proteinsDay1?: IntFilter<"User"> | number
    carbsDay1?: IntFilter<"User"> | number
    fatsDay1?: IntFilter<"User"> | number
    proteinsDay2?: IntFilter<"User"> | number
    carbsDay2?: IntFilter<"User"> | number
    fatsDay2?: IntFilter<"User"> | number
    proteinsDay3?: IntFilter<"User"> | number
    carbsDay3?: IntFilter<"User"> | number
    fatsDay3?: IntFilter<"User"> | number
    proteinsDay4?: IntFilter<"User"> | number
    carbsDay4?: IntFilter<"User"> | number
    fatsDay4?: IntFilter<"User"> | number
    proteinsDay5?: IntFilter<"User"> | number
    carbsDay5?: IntFilter<"User"> | number
    fatsDay5?: IntFilter<"User"> | number
    proteinsDay6?: IntFilter<"User"> | number
    carbsDay6?: IntFilter<"User"> | number
    fatsDay6?: IntFilter<"User"> | number
    fiber?: IntFilter<"User"> | number
    carbsPercentAsSugar?: IntFilter<"User"> | number
    nextCoach?: DateTimeFilter<"User"> | Date | string
    isCoachAnalyze?: BoolFilter<"User"> | boolean
    height?: IntFilter<"User"> | number
    birth?: DateTimeFilter<"User"> | Date | string
    description?: StringFilter<"User"> | string
    website?: StringFilter<"User"> | string
    facebook?: StringFilter<"User"> | string
    instagram?: StringFilter<"User"> | string
    twitter?: StringFilter<"User"> | string
    goal?: EnumgoalsFilter<"User"> | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFilter<"User"> | $Enums.kindOfDiets
    isSportActive?: BoolFilter<"User"> | boolean
    activityLevel?: EnumactivityLevelsFilter<"User"> | $Enums.activityLevels
    sex?: BoolFilter<"User"> | boolean
    isBanned?: BoolFilter<"User"> | boolean
    permissions?: PermissionListRelationFilter
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    Exercise?: ExerciseListRelationFilter
    WorkoutPlan?: WorkoutPlanListRelationFilter
    WorkoutResult?: WorkoutResultListRelationFilter
    Product?: ProductListRelationFilter
    Consumed?: ConsumedListRelationFilter
    Measurement?: MeasurementListRelationFilter
    Coach?: CoachListRelationFilter
    BurnedCalories?: BurnedCaloriesListRelationFilter
    Post?: PostListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    username?: SortOrder
    name?: SortOrderInput | SortOrder
    surname?: SortOrderInput | SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    locale?: SortOrder
    numberOfMeals?: SortOrder
    proteinsDay0?: SortOrder
    carbsDay0?: SortOrder
    fatsDay0?: SortOrder
    proteinsDay1?: SortOrder
    carbsDay1?: SortOrder
    fatsDay1?: SortOrder
    proteinsDay2?: SortOrder
    carbsDay2?: SortOrder
    fatsDay2?: SortOrder
    proteinsDay3?: SortOrder
    carbsDay3?: SortOrder
    fatsDay3?: SortOrder
    proteinsDay4?: SortOrder
    carbsDay4?: SortOrder
    fatsDay4?: SortOrder
    proteinsDay5?: SortOrder
    carbsDay5?: SortOrder
    fatsDay5?: SortOrder
    proteinsDay6?: SortOrder
    carbsDay6?: SortOrder
    fatsDay6?: SortOrder
    fiber?: SortOrder
    carbsPercentAsSugar?: SortOrder
    nextCoach?: SortOrder
    isCoachAnalyze?: SortOrder
    height?: SortOrder
    birth?: SortOrder
    description?: SortOrder
    website?: SortOrder
    facebook?: SortOrder
    instagram?: SortOrder
    twitter?: SortOrder
    goal?: SortOrder
    kindOfDiet?: SortOrder
    isSportActive?: SortOrder
    activityLevel?: SortOrder
    sex?: SortOrder
    isBanned?: SortOrder
    permissions?: PermissionOrderByRelationAggregateInput
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    Exercise?: ExerciseOrderByRelationAggregateInput
    WorkoutPlan?: WorkoutPlanOrderByRelationAggregateInput
    WorkoutResult?: WorkoutResultOrderByRelationAggregateInput
    Product?: ProductOrderByRelationAggregateInput
    Consumed?: ConsumedOrderByRelationAggregateInput
    Measurement?: MeasurementOrderByRelationAggregateInput
    Coach?: CoachOrderByRelationAggregateInput
    BurnedCalories?: BurnedCaloriesOrderByRelationAggregateInput
    Post?: PostOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    name?: StringNullableFilter<"User"> | string | null
    surname?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    locale?: StringFilter<"User"> | string
    numberOfMeals?: IntFilter<"User"> | number
    proteinsDay0?: IntFilter<"User"> | number
    carbsDay0?: IntFilter<"User"> | number
    fatsDay0?: IntFilter<"User"> | number
    proteinsDay1?: IntFilter<"User"> | number
    carbsDay1?: IntFilter<"User"> | number
    fatsDay1?: IntFilter<"User"> | number
    proteinsDay2?: IntFilter<"User"> | number
    carbsDay2?: IntFilter<"User"> | number
    fatsDay2?: IntFilter<"User"> | number
    proteinsDay3?: IntFilter<"User"> | number
    carbsDay3?: IntFilter<"User"> | number
    fatsDay3?: IntFilter<"User"> | number
    proteinsDay4?: IntFilter<"User"> | number
    carbsDay4?: IntFilter<"User"> | number
    fatsDay4?: IntFilter<"User"> | number
    proteinsDay5?: IntFilter<"User"> | number
    carbsDay5?: IntFilter<"User"> | number
    fatsDay5?: IntFilter<"User"> | number
    proteinsDay6?: IntFilter<"User"> | number
    carbsDay6?: IntFilter<"User"> | number
    fatsDay6?: IntFilter<"User"> | number
    fiber?: IntFilter<"User"> | number
    carbsPercentAsSugar?: IntFilter<"User"> | number
    nextCoach?: DateTimeFilter<"User"> | Date | string
    isCoachAnalyze?: BoolFilter<"User"> | boolean
    height?: IntFilter<"User"> | number
    birth?: DateTimeFilter<"User"> | Date | string
    description?: StringFilter<"User"> | string
    website?: StringFilter<"User"> | string
    facebook?: StringFilter<"User"> | string
    instagram?: StringFilter<"User"> | string
    twitter?: StringFilter<"User"> | string
    goal?: EnumgoalsFilter<"User"> | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFilter<"User"> | $Enums.kindOfDiets
    isSportActive?: BoolFilter<"User"> | boolean
    activityLevel?: EnumactivityLevelsFilter<"User"> | $Enums.activityLevels
    sex?: BoolFilter<"User"> | boolean
    isBanned?: BoolFilter<"User"> | boolean
    permissions?: PermissionListRelationFilter
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    Exercise?: ExerciseListRelationFilter
    WorkoutPlan?: WorkoutPlanListRelationFilter
    WorkoutResult?: WorkoutResultListRelationFilter
    Product?: ProductListRelationFilter
    Consumed?: ConsumedListRelationFilter
    Measurement?: MeasurementListRelationFilter
    Coach?: CoachListRelationFilter
    BurnedCalories?: BurnedCaloriesListRelationFilter
    Post?: PostListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    username?: SortOrder
    name?: SortOrderInput | SortOrder
    surname?: SortOrderInput | SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    locale?: SortOrder
    numberOfMeals?: SortOrder
    proteinsDay0?: SortOrder
    carbsDay0?: SortOrder
    fatsDay0?: SortOrder
    proteinsDay1?: SortOrder
    carbsDay1?: SortOrder
    fatsDay1?: SortOrder
    proteinsDay2?: SortOrder
    carbsDay2?: SortOrder
    fatsDay2?: SortOrder
    proteinsDay3?: SortOrder
    carbsDay3?: SortOrder
    fatsDay3?: SortOrder
    proteinsDay4?: SortOrder
    carbsDay4?: SortOrder
    fatsDay4?: SortOrder
    proteinsDay5?: SortOrder
    carbsDay5?: SortOrder
    fatsDay5?: SortOrder
    proteinsDay6?: SortOrder
    carbsDay6?: SortOrder
    fatsDay6?: SortOrder
    fiber?: SortOrder
    carbsPercentAsSugar?: SortOrder
    nextCoach?: SortOrder
    isCoachAnalyze?: SortOrder
    height?: SortOrder
    birth?: SortOrder
    description?: SortOrder
    website?: SortOrder
    facebook?: SortOrder
    instagram?: SortOrder
    twitter?: SortOrder
    goal?: SortOrder
    kindOfDiet?: SortOrder
    isSportActive?: SortOrder
    activityLevel?: SortOrder
    sex?: SortOrder
    isBanned?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    username?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    surname?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    locale?: StringWithAggregatesFilter<"User"> | string
    numberOfMeals?: IntWithAggregatesFilter<"User"> | number
    proteinsDay0?: IntWithAggregatesFilter<"User"> | number
    carbsDay0?: IntWithAggregatesFilter<"User"> | number
    fatsDay0?: IntWithAggregatesFilter<"User"> | number
    proteinsDay1?: IntWithAggregatesFilter<"User"> | number
    carbsDay1?: IntWithAggregatesFilter<"User"> | number
    fatsDay1?: IntWithAggregatesFilter<"User"> | number
    proteinsDay2?: IntWithAggregatesFilter<"User"> | number
    carbsDay2?: IntWithAggregatesFilter<"User"> | number
    fatsDay2?: IntWithAggregatesFilter<"User"> | number
    proteinsDay3?: IntWithAggregatesFilter<"User"> | number
    carbsDay3?: IntWithAggregatesFilter<"User"> | number
    fatsDay3?: IntWithAggregatesFilter<"User"> | number
    proteinsDay4?: IntWithAggregatesFilter<"User"> | number
    carbsDay4?: IntWithAggregatesFilter<"User"> | number
    fatsDay4?: IntWithAggregatesFilter<"User"> | number
    proteinsDay5?: IntWithAggregatesFilter<"User"> | number
    carbsDay5?: IntWithAggregatesFilter<"User"> | number
    fatsDay5?: IntWithAggregatesFilter<"User"> | number
    proteinsDay6?: IntWithAggregatesFilter<"User"> | number
    carbsDay6?: IntWithAggregatesFilter<"User"> | number
    fatsDay6?: IntWithAggregatesFilter<"User"> | number
    fiber?: IntWithAggregatesFilter<"User"> | number
    carbsPercentAsSugar?: IntWithAggregatesFilter<"User"> | number
    nextCoach?: DateTimeWithAggregatesFilter<"User"> | Date | string
    isCoachAnalyze?: BoolWithAggregatesFilter<"User"> | boolean
    height?: IntWithAggregatesFilter<"User"> | number
    birth?: DateTimeWithAggregatesFilter<"User"> | Date | string
    description?: StringWithAggregatesFilter<"User"> | string
    website?: StringWithAggregatesFilter<"User"> | string
    facebook?: StringWithAggregatesFilter<"User"> | string
    instagram?: StringWithAggregatesFilter<"User"> | string
    twitter?: StringWithAggregatesFilter<"User"> | string
    goal?: EnumgoalsWithAggregatesFilter<"User"> | $Enums.goals
    kindOfDiet?: EnumkindOfDietsWithAggregatesFilter<"User"> | $Enums.kindOfDiets
    isSportActive?: BoolWithAggregatesFilter<"User"> | boolean
    activityLevel?: EnumactivityLevelsWithAggregatesFilter<"User"> | $Enums.activityLevels
    sex?: BoolWithAggregatesFilter<"User"> | boolean
    isBanned?: BoolWithAggregatesFilter<"User"> | boolean
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "token" | "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type ExerciseWhereInput = {
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    id?: IntFilter<"Exercise"> | number
    createdAt?: DateTimeFilter<"Exercise"> | Date | string
    updatedAt?: DateTimeFilter<"Exercise"> | Date | string
    userId?: IntNullableFilter<"Exercise"> | number | null
    name?: StringFilter<"Exercise"> | string
    nameLength?: IntFilter<"Exercise"> | number
    isDeleted?: BoolFilter<"Exercise"> | boolean
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type ExerciseOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    name?: SortOrder
    nameLength?: SortOrder
    isDeleted?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ExerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_name_isDeleted?: ExerciseUserIdNameIsDeletedCompoundUniqueInput
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    createdAt?: DateTimeFilter<"Exercise"> | Date | string
    updatedAt?: DateTimeFilter<"Exercise"> | Date | string
    userId?: IntNullableFilter<"Exercise"> | number | null
    name?: StringFilter<"Exercise"> | string
    nameLength?: IntFilter<"Exercise"> | number
    isDeleted?: BoolFilter<"Exercise"> | boolean
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id" | "userId_name_isDeleted">

  export type ExerciseOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    name?: SortOrder
    nameLength?: SortOrder
    isDeleted?: SortOrder
    _count?: ExerciseCountOrderByAggregateInput
    _avg?: ExerciseAvgOrderByAggregateInput
    _max?: ExerciseMaxOrderByAggregateInput
    _min?: ExerciseMinOrderByAggregateInput
    _sum?: ExerciseSumOrderByAggregateInput
  }

  export type ExerciseScalarWhereWithAggregatesInput = {
    AND?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    OR?: ExerciseScalarWhereWithAggregatesInput[]
    NOT?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Exercise"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Exercise"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Exercise"> | Date | string
    userId?: IntNullableWithAggregatesFilter<"Exercise"> | number | null
    name?: StringWithAggregatesFilter<"Exercise"> | string
    nameLength?: IntWithAggregatesFilter<"Exercise"> | number
    isDeleted?: BoolWithAggregatesFilter<"Exercise"> | boolean
  }

  export type WorkoutPlanWhereInput = {
    AND?: WorkoutPlanWhereInput | WorkoutPlanWhereInput[]
    OR?: WorkoutPlanWhereInput[]
    NOT?: WorkoutPlanWhereInput | WorkoutPlanWhereInput[]
    id?: IntFilter<"WorkoutPlan"> | number
    createdAt?: DateTimeFilter<"WorkoutPlan"> | Date | string
    updatedAt?: DateTimeFilter<"WorkoutPlan"> | Date | string
    userId?: IntFilter<"WorkoutPlan"> | number
    name?: StringFilter<"WorkoutPlan"> | string
    description?: StringNullableFilter<"WorkoutPlan"> | string | null
    burnedCalories?: IntFilter<"WorkoutPlan"> | number
    isDeleted?: BoolFilter<"WorkoutPlan"> | boolean
    exercises?: JsonFilter<"WorkoutPlan">
    user?: XOR<UserRelationFilter, UserWhereInput>
    WorkoutResult?: WorkoutResultListRelationFilter
  }

  export type WorkoutPlanOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    burnedCalories?: SortOrder
    isDeleted?: SortOrder
    exercises?: SortOrder
    user?: UserOrderByWithRelationInput
    WorkoutResult?: WorkoutResultOrderByRelationAggregateInput
  }

  export type WorkoutPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    id_userId?: WorkoutPlanIdUserIdCompoundUniqueInput
    AND?: WorkoutPlanWhereInput | WorkoutPlanWhereInput[]
    OR?: WorkoutPlanWhereInput[]
    NOT?: WorkoutPlanWhereInput | WorkoutPlanWhereInput[]
    createdAt?: DateTimeFilter<"WorkoutPlan"> | Date | string
    updatedAt?: DateTimeFilter<"WorkoutPlan"> | Date | string
    userId?: IntFilter<"WorkoutPlan"> | number
    name?: StringFilter<"WorkoutPlan"> | string
    description?: StringNullableFilter<"WorkoutPlan"> | string | null
    burnedCalories?: IntFilter<"WorkoutPlan"> | number
    isDeleted?: BoolFilter<"WorkoutPlan"> | boolean
    exercises?: JsonFilter<"WorkoutPlan">
    user?: XOR<UserRelationFilter, UserWhereInput>
    WorkoutResult?: WorkoutResultListRelationFilter
  }, "id" | "id_userId">

  export type WorkoutPlanOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    burnedCalories?: SortOrder
    isDeleted?: SortOrder
    exercises?: SortOrder
    _count?: WorkoutPlanCountOrderByAggregateInput
    _avg?: WorkoutPlanAvgOrderByAggregateInput
    _max?: WorkoutPlanMaxOrderByAggregateInput
    _min?: WorkoutPlanMinOrderByAggregateInput
    _sum?: WorkoutPlanSumOrderByAggregateInput
  }

  export type WorkoutPlanScalarWhereWithAggregatesInput = {
    AND?: WorkoutPlanScalarWhereWithAggregatesInput | WorkoutPlanScalarWhereWithAggregatesInput[]
    OR?: WorkoutPlanScalarWhereWithAggregatesInput[]
    NOT?: WorkoutPlanScalarWhereWithAggregatesInput | WorkoutPlanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WorkoutPlan"> | number
    createdAt?: DateTimeWithAggregatesFilter<"WorkoutPlan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkoutPlan"> | Date | string
    userId?: IntWithAggregatesFilter<"WorkoutPlan"> | number
    name?: StringWithAggregatesFilter<"WorkoutPlan"> | string
    description?: StringNullableWithAggregatesFilter<"WorkoutPlan"> | string | null
    burnedCalories?: IntWithAggregatesFilter<"WorkoutPlan"> | number
    isDeleted?: BoolWithAggregatesFilter<"WorkoutPlan"> | boolean
    exercises?: JsonWithAggregatesFilter<"WorkoutPlan">
  }

  export type WorkoutResultWhereInput = {
    AND?: WorkoutResultWhereInput | WorkoutResultWhereInput[]
    OR?: WorkoutResultWhereInput[]
    NOT?: WorkoutResultWhereInput | WorkoutResultWhereInput[]
    id?: IntFilter<"WorkoutResult"> | number
    createdAt?: DateTimeFilter<"WorkoutResult"> | Date | string
    updatedAt?: DateTimeFilter<"WorkoutResult"> | Date | string
    userId?: IntFilter<"WorkoutResult"> | number
    name?: StringFilter<"WorkoutResult"> | string
    note?: StringNullableFilter<"WorkoutResult"> | string | null
    burnedCalories?: IntFilter<"WorkoutResult"> | number
    exercises?: JsonFilter<"WorkoutResult">
    workoutPlanId?: IntNullableFilter<"WorkoutResult"> | number | null
    whenAdded?: DateTimeFilter<"WorkoutResult"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    workoutPlan?: XOR<WorkoutPlanNullableRelationFilter, WorkoutPlanWhereInput> | null
  }

  export type WorkoutResultOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    note?: SortOrderInput | SortOrder
    burnedCalories?: SortOrder
    exercises?: SortOrder
    workoutPlanId?: SortOrderInput | SortOrder
    whenAdded?: SortOrder
    user?: UserOrderByWithRelationInput
    workoutPlan?: WorkoutPlanOrderByWithRelationInput
  }

  export type WorkoutResultWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    id_userId?: WorkoutResultIdUserIdCompoundUniqueInput
    AND?: WorkoutResultWhereInput | WorkoutResultWhereInput[]
    OR?: WorkoutResultWhereInput[]
    NOT?: WorkoutResultWhereInput | WorkoutResultWhereInput[]
    createdAt?: DateTimeFilter<"WorkoutResult"> | Date | string
    updatedAt?: DateTimeFilter<"WorkoutResult"> | Date | string
    userId?: IntFilter<"WorkoutResult"> | number
    name?: StringFilter<"WorkoutResult"> | string
    note?: StringNullableFilter<"WorkoutResult"> | string | null
    burnedCalories?: IntFilter<"WorkoutResult"> | number
    exercises?: JsonFilter<"WorkoutResult">
    workoutPlanId?: IntNullableFilter<"WorkoutResult"> | number | null
    whenAdded?: DateTimeFilter<"WorkoutResult"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    workoutPlan?: XOR<WorkoutPlanNullableRelationFilter, WorkoutPlanWhereInput> | null
  }, "id" | "id_userId">

  export type WorkoutResultOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    note?: SortOrderInput | SortOrder
    burnedCalories?: SortOrder
    exercises?: SortOrder
    workoutPlanId?: SortOrderInput | SortOrder
    whenAdded?: SortOrder
    _count?: WorkoutResultCountOrderByAggregateInput
    _avg?: WorkoutResultAvgOrderByAggregateInput
    _max?: WorkoutResultMaxOrderByAggregateInput
    _min?: WorkoutResultMinOrderByAggregateInput
    _sum?: WorkoutResultSumOrderByAggregateInput
  }

  export type WorkoutResultScalarWhereWithAggregatesInput = {
    AND?: WorkoutResultScalarWhereWithAggregatesInput | WorkoutResultScalarWhereWithAggregatesInput[]
    OR?: WorkoutResultScalarWhereWithAggregatesInput[]
    NOT?: WorkoutResultScalarWhereWithAggregatesInput | WorkoutResultScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WorkoutResult"> | number
    createdAt?: DateTimeWithAggregatesFilter<"WorkoutResult"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkoutResult"> | Date | string
    userId?: IntWithAggregatesFilter<"WorkoutResult"> | number
    name?: StringWithAggregatesFilter<"WorkoutResult"> | string
    note?: StringNullableWithAggregatesFilter<"WorkoutResult"> | string | null
    burnedCalories?: IntWithAggregatesFilter<"WorkoutResult"> | number
    exercises?: JsonWithAggregatesFilter<"WorkoutResult">
    workoutPlanId?: IntNullableWithAggregatesFilter<"WorkoutResult"> | number | null
    whenAdded?: DateTimeWithAggregatesFilter<"WorkoutResult"> | Date | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: IntFilter<"Product"> | number
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    userId?: IntNullableFilter<"Product"> | number | null
    name?: StringFilter<"Product"> | string
    nameLength?: IntFilter<"Product"> | number
    proteins?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    carbs?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    sugar?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    fats?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    fiber?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    sodium?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    ethanol?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    barcode?: StringNullableFilter<"Product"> | string | null
    isVerified?: BoolNullableFilter<"Product"> | boolean | null
    isDeleted?: BoolNullableFilter<"Product"> | boolean | null
    isExpectingCheck?: BoolNullableFilter<"Product"> | boolean | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    Consumed?: ConsumedListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    name?: SortOrder
    nameLength?: SortOrder
    proteins?: SortOrder
    carbs?: SortOrder
    sugar?: SortOrder
    fats?: SortOrder
    fiber?: SortOrder
    sodium?: SortOrder
    ethanol?: SortOrder
    barcode?: SortOrderInput | SortOrder
    isVerified?: SortOrderInput | SortOrder
    isDeleted?: SortOrderInput | SortOrder
    isExpectingCheck?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    Consumed?: ConsumedOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    id_userId?: ProductIdUserIdCompoundUniqueInput
    name_userId?: ProductNameUserIdCompoundUniqueInput
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    userId?: IntNullableFilter<"Product"> | number | null
    name?: StringFilter<"Product"> | string
    nameLength?: IntFilter<"Product"> | number
    proteins?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    carbs?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    sugar?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    fats?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    fiber?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    sodium?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    ethanol?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    barcode?: StringNullableFilter<"Product"> | string | null
    isVerified?: BoolNullableFilter<"Product"> | boolean | null
    isDeleted?: BoolNullableFilter<"Product"> | boolean | null
    isExpectingCheck?: BoolNullableFilter<"Product"> | boolean | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    Consumed?: ConsumedListRelationFilter
  }, "id" | "id_userId" | "name_userId">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    name?: SortOrder
    nameLength?: SortOrder
    proteins?: SortOrder
    carbs?: SortOrder
    sugar?: SortOrder
    fats?: SortOrder
    fiber?: SortOrder
    sodium?: SortOrder
    ethanol?: SortOrder
    barcode?: SortOrderInput | SortOrder
    isVerified?: SortOrderInput | SortOrder
    isDeleted?: SortOrderInput | SortOrder
    isExpectingCheck?: SortOrderInput | SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Product"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    userId?: IntNullableWithAggregatesFilter<"Product"> | number | null
    name?: StringWithAggregatesFilter<"Product"> | string
    nameLength?: IntWithAggregatesFilter<"Product"> | number
    proteins?: DecimalWithAggregatesFilter<"Product"> | Decimal | DecimalJsLike | number | string
    carbs?: DecimalWithAggregatesFilter<"Product"> | Decimal | DecimalJsLike | number | string
    sugar?: DecimalWithAggregatesFilter<"Product"> | Decimal | DecimalJsLike | number | string
    fats?: DecimalWithAggregatesFilter<"Product"> | Decimal | DecimalJsLike | number | string
    fiber?: DecimalWithAggregatesFilter<"Product"> | Decimal | DecimalJsLike | number | string
    sodium?: DecimalWithAggregatesFilter<"Product"> | Decimal | DecimalJsLike | number | string
    ethanol?: DecimalWithAggregatesFilter<"Product"> | Decimal | DecimalJsLike | number | string
    barcode?: StringNullableWithAggregatesFilter<"Product"> | string | null
    isVerified?: BoolNullableWithAggregatesFilter<"Product"> | boolean | null
    isDeleted?: BoolNullableWithAggregatesFilter<"Product"> | boolean | null
    isExpectingCheck?: BoolNullableWithAggregatesFilter<"Product"> | boolean | null
  }

  export type ConsumedWhereInput = {
    AND?: ConsumedWhereInput | ConsumedWhereInput[]
    OR?: ConsumedWhereInput[]
    NOT?: ConsumedWhereInput | ConsumedWhereInput[]
    id?: IntFilter<"Consumed"> | number
    createdAt?: DateTimeFilter<"Consumed"> | Date | string
    updatedAt?: DateTimeFilter<"Consumed"> | Date | string
    userId?: IntFilter<"Consumed"> | number
    whenAdded?: DateTimeFilter<"Consumed"> | Date | string
    productId?: IntFilter<"Consumed"> | number
    howMany?: DecimalFilter<"Consumed"> | Decimal | DecimalJsLike | number | string
    meal?: IntFilter<"Consumed"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type ConsumedOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    whenAdded?: SortOrder
    productId?: SortOrder
    howMany?: SortOrder
    meal?: SortOrder
    user?: UserOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type ConsumedWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    id_userId?: ConsumedIdUserIdCompoundUniqueInput
    AND?: ConsumedWhereInput | ConsumedWhereInput[]
    OR?: ConsumedWhereInput[]
    NOT?: ConsumedWhereInput | ConsumedWhereInput[]
    createdAt?: DateTimeFilter<"Consumed"> | Date | string
    updatedAt?: DateTimeFilter<"Consumed"> | Date | string
    userId?: IntFilter<"Consumed"> | number
    whenAdded?: DateTimeFilter<"Consumed"> | Date | string
    productId?: IntFilter<"Consumed"> | number
    howMany?: DecimalFilter<"Consumed"> | Decimal | DecimalJsLike | number | string
    meal?: IntFilter<"Consumed"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }, "id" | "id_userId">

  export type ConsumedOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    whenAdded?: SortOrder
    productId?: SortOrder
    howMany?: SortOrder
    meal?: SortOrder
    _count?: ConsumedCountOrderByAggregateInput
    _avg?: ConsumedAvgOrderByAggregateInput
    _max?: ConsumedMaxOrderByAggregateInput
    _min?: ConsumedMinOrderByAggregateInput
    _sum?: ConsumedSumOrderByAggregateInput
  }

  export type ConsumedScalarWhereWithAggregatesInput = {
    AND?: ConsumedScalarWhereWithAggregatesInput | ConsumedScalarWhereWithAggregatesInput[]
    OR?: ConsumedScalarWhereWithAggregatesInput[]
    NOT?: ConsumedScalarWhereWithAggregatesInput | ConsumedScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Consumed"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Consumed"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Consumed"> | Date | string
    userId?: IntWithAggregatesFilter<"Consumed"> | number
    whenAdded?: DateTimeWithAggregatesFilter<"Consumed"> | Date | string
    productId?: IntWithAggregatesFilter<"Consumed"> | number
    howMany?: DecimalWithAggregatesFilter<"Consumed"> | Decimal | DecimalJsLike | number | string
    meal?: IntWithAggregatesFilter<"Consumed"> | number
  }

  export type MeasurementWhereInput = {
    AND?: MeasurementWhereInput | MeasurementWhereInput[]
    OR?: MeasurementWhereInput[]
    NOT?: MeasurementWhereInput | MeasurementWhereInput[]
    id?: IntFilter<"Measurement"> | number
    createdAt?: DateTimeFilter<"Measurement"> | Date | string
    updatedAt?: DateTimeFilter<"Measurement"> | Date | string
    whenAdded?: DateTimeFilter<"Measurement"> | Date | string
    weight?: DecimalFilter<"Measurement"> | Decimal | DecimalJsLike | number | string
    userId?: IntFilter<"Measurement"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type MeasurementOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    whenAdded?: SortOrder
    weight?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type MeasurementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    id_userId?: MeasurementIdUserIdCompoundUniqueInput
    AND?: MeasurementWhereInput | MeasurementWhereInput[]
    OR?: MeasurementWhereInput[]
    NOT?: MeasurementWhereInput | MeasurementWhereInput[]
    createdAt?: DateTimeFilter<"Measurement"> | Date | string
    updatedAt?: DateTimeFilter<"Measurement"> | Date | string
    whenAdded?: DateTimeFilter<"Measurement"> | Date | string
    weight?: DecimalFilter<"Measurement"> | Decimal | DecimalJsLike | number | string
    userId?: IntFilter<"Measurement"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "id_userId">

  export type MeasurementOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    whenAdded?: SortOrder
    weight?: SortOrder
    userId?: SortOrder
    _count?: MeasurementCountOrderByAggregateInput
    _avg?: MeasurementAvgOrderByAggregateInput
    _max?: MeasurementMaxOrderByAggregateInput
    _min?: MeasurementMinOrderByAggregateInput
    _sum?: MeasurementSumOrderByAggregateInput
  }

  export type MeasurementScalarWhereWithAggregatesInput = {
    AND?: MeasurementScalarWhereWithAggregatesInput | MeasurementScalarWhereWithAggregatesInput[]
    OR?: MeasurementScalarWhereWithAggregatesInput[]
    NOT?: MeasurementScalarWhereWithAggregatesInput | MeasurementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Measurement"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Measurement"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Measurement"> | Date | string
    whenAdded?: DateTimeWithAggregatesFilter<"Measurement"> | Date | string
    weight?: DecimalWithAggregatesFilter<"Measurement"> | Decimal | DecimalJsLike | number | string
    userId?: IntWithAggregatesFilter<"Measurement"> | number
  }

  export type CoachWhereInput = {
    AND?: CoachWhereInput | CoachWhereInput[]
    OR?: CoachWhereInput[]
    NOT?: CoachWhereInput | CoachWhereInput[]
    id?: IntFilter<"Coach"> | number
    createdAt?: DateTimeFilter<"Coach"> | Date | string
    updatedAt?: DateTimeFilter<"Coach"> | Date | string
    userId?: IntFilter<"Coach"> | number
    goal?: EnumgoalsFilter<"Coach"> | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFilter<"Coach"> | $Enums.kindOfDiets
    isSportActive?: BoolFilter<"Coach"> | boolean
    activityLevel?: EnumactivityLevelsFilter<"Coach"> | $Enums.activityLevels
    countedProteins?: IntFilter<"Coach"> | number
    countedCarbs?: IntFilter<"Coach"> | number
    countedFats?: IntFilter<"Coach"> | number
    countedCalories?: IntFilter<"Coach"> | number
    currentWeight?: DecimalFilter<"Coach"> | Decimal | DecimalJsLike | number | string
    changeInWeight?: DecimalFilter<"Coach"> | Decimal | DecimalJsLike | number | string
    isDataInJuicify?: BoolFilter<"Coach"> | boolean
    data?: JsonFilter<"Coach">
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CoachOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    goal?: SortOrder
    kindOfDiet?: SortOrder
    isSportActive?: SortOrder
    activityLevel?: SortOrder
    countedProteins?: SortOrder
    countedCarbs?: SortOrder
    countedFats?: SortOrder
    countedCalories?: SortOrder
    currentWeight?: SortOrder
    changeInWeight?: SortOrder
    isDataInJuicify?: SortOrder
    data?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type CoachWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CoachWhereInput | CoachWhereInput[]
    OR?: CoachWhereInput[]
    NOT?: CoachWhereInput | CoachWhereInput[]
    createdAt?: DateTimeFilter<"Coach"> | Date | string
    updatedAt?: DateTimeFilter<"Coach"> | Date | string
    userId?: IntFilter<"Coach"> | number
    goal?: EnumgoalsFilter<"Coach"> | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFilter<"Coach"> | $Enums.kindOfDiets
    isSportActive?: BoolFilter<"Coach"> | boolean
    activityLevel?: EnumactivityLevelsFilter<"Coach"> | $Enums.activityLevels
    countedProteins?: IntFilter<"Coach"> | number
    countedCarbs?: IntFilter<"Coach"> | number
    countedFats?: IntFilter<"Coach"> | number
    countedCalories?: IntFilter<"Coach"> | number
    currentWeight?: DecimalFilter<"Coach"> | Decimal | DecimalJsLike | number | string
    changeInWeight?: DecimalFilter<"Coach"> | Decimal | DecimalJsLike | number | string
    isDataInJuicify?: BoolFilter<"Coach"> | boolean
    data?: JsonFilter<"Coach">
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type CoachOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    goal?: SortOrder
    kindOfDiet?: SortOrder
    isSportActive?: SortOrder
    activityLevel?: SortOrder
    countedProteins?: SortOrder
    countedCarbs?: SortOrder
    countedFats?: SortOrder
    countedCalories?: SortOrder
    currentWeight?: SortOrder
    changeInWeight?: SortOrder
    isDataInJuicify?: SortOrder
    data?: SortOrder
    _count?: CoachCountOrderByAggregateInput
    _avg?: CoachAvgOrderByAggregateInput
    _max?: CoachMaxOrderByAggregateInput
    _min?: CoachMinOrderByAggregateInput
    _sum?: CoachSumOrderByAggregateInput
  }

  export type CoachScalarWhereWithAggregatesInput = {
    AND?: CoachScalarWhereWithAggregatesInput | CoachScalarWhereWithAggregatesInput[]
    OR?: CoachScalarWhereWithAggregatesInput[]
    NOT?: CoachScalarWhereWithAggregatesInput | CoachScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Coach"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Coach"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Coach"> | Date | string
    userId?: IntWithAggregatesFilter<"Coach"> | number
    goal?: EnumgoalsWithAggregatesFilter<"Coach"> | $Enums.goals
    kindOfDiet?: EnumkindOfDietsWithAggregatesFilter<"Coach"> | $Enums.kindOfDiets
    isSportActive?: BoolWithAggregatesFilter<"Coach"> | boolean
    activityLevel?: EnumactivityLevelsWithAggregatesFilter<"Coach"> | $Enums.activityLevels
    countedProteins?: IntWithAggregatesFilter<"Coach"> | number
    countedCarbs?: IntWithAggregatesFilter<"Coach"> | number
    countedFats?: IntWithAggregatesFilter<"Coach"> | number
    countedCalories?: IntWithAggregatesFilter<"Coach"> | number
    currentWeight?: DecimalWithAggregatesFilter<"Coach"> | Decimal | DecimalJsLike | number | string
    changeInWeight?: DecimalWithAggregatesFilter<"Coach"> | Decimal | DecimalJsLike | number | string
    isDataInJuicify?: BoolWithAggregatesFilter<"Coach"> | boolean
    data?: JsonWithAggregatesFilter<"Coach">
  }

  export type BurnedCaloriesWhereInput = {
    AND?: BurnedCaloriesWhereInput | BurnedCaloriesWhereInput[]
    OR?: BurnedCaloriesWhereInput[]
    NOT?: BurnedCaloriesWhereInput | BurnedCaloriesWhereInput[]
    id?: IntFilter<"BurnedCalories"> | number
    createdAt?: DateTimeFilter<"BurnedCalories"> | Date | string
    updatedAt?: DateTimeFilter<"BurnedCalories"> | Date | string
    whenAdded?: DateTimeFilter<"BurnedCalories"> | Date | string
    userId?: IntFilter<"BurnedCalories"> | number
    name?: StringFilter<"BurnedCalories"> | string
    burnedCalories?: IntFilter<"BurnedCalories"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type BurnedCaloriesOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    whenAdded?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    burnedCalories?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type BurnedCaloriesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    id_userId?: BurnedCaloriesIdUserIdCompoundUniqueInput
    AND?: BurnedCaloriesWhereInput | BurnedCaloriesWhereInput[]
    OR?: BurnedCaloriesWhereInput[]
    NOT?: BurnedCaloriesWhereInput | BurnedCaloriesWhereInput[]
    createdAt?: DateTimeFilter<"BurnedCalories"> | Date | string
    updatedAt?: DateTimeFilter<"BurnedCalories"> | Date | string
    whenAdded?: DateTimeFilter<"BurnedCalories"> | Date | string
    userId?: IntFilter<"BurnedCalories"> | number
    name?: StringFilter<"BurnedCalories"> | string
    burnedCalories?: IntFilter<"BurnedCalories"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "id_userId">

  export type BurnedCaloriesOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    whenAdded?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    burnedCalories?: SortOrder
    _count?: BurnedCaloriesCountOrderByAggregateInput
    _avg?: BurnedCaloriesAvgOrderByAggregateInput
    _max?: BurnedCaloriesMaxOrderByAggregateInput
    _min?: BurnedCaloriesMinOrderByAggregateInput
    _sum?: BurnedCaloriesSumOrderByAggregateInput
  }

  export type BurnedCaloriesScalarWhereWithAggregatesInput = {
    AND?: BurnedCaloriesScalarWhereWithAggregatesInput | BurnedCaloriesScalarWhereWithAggregatesInput[]
    OR?: BurnedCaloriesScalarWhereWithAggregatesInput[]
    NOT?: BurnedCaloriesScalarWhereWithAggregatesInput | BurnedCaloriesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BurnedCalories"> | number
    createdAt?: DateTimeWithAggregatesFilter<"BurnedCalories"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BurnedCalories"> | Date | string
    whenAdded?: DateTimeWithAggregatesFilter<"BurnedCalories"> | Date | string
    userId?: IntWithAggregatesFilter<"BurnedCalories"> | number
    name?: StringWithAggregatesFilter<"BurnedCalories"> | string
    burnedCalories?: IntWithAggregatesFilter<"BurnedCalories"> | number
  }

  export type PostWhereInput = {
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    id?: IntFilter<"Post"> | number
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    whenAdded?: DateTimeFilter<"Post"> | Date | string
    userId?: IntFilter<"Post"> | number
    title?: StringFilter<"Post"> | string
    content?: StringFilter<"Post"> | string
    img_url?: StringFilter<"Post"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    whenAdded?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    img_url?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PostWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    id_userId?: PostIdUserIdCompoundUniqueInput
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    whenAdded?: DateTimeFilter<"Post"> | Date | string
    userId?: IntFilter<"Post"> | number
    title?: StringFilter<"Post"> | string
    content?: StringFilter<"Post"> | string
    img_url?: StringFilter<"Post"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "id_userId">

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    whenAdded?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    img_url?: SortOrder
    _count?: PostCountOrderByAggregateInput
    _avg?: PostAvgOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
    _sum?: PostSumOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    OR?: PostScalarWhereWithAggregatesInput[]
    NOT?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Post"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    whenAdded?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    userId?: IntWithAggregatesFilter<"Post"> | number
    title?: StringWithAggregatesFilter<"Post"> | string
    content?: StringWithAggregatesFilter<"Post"> | string
    img_url?: StringWithAggregatesFilter<"Post"> | string
  }

  export type AccountCreateInput = {
    createdAt?: Date | string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    userId: number
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: number
    createdAt?: Date | string
    userId: number
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    createdAt?: Date | string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    sessionToken: string
    userId: number
    expires: Date | string
  }

  export type SessionUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: number
    createdAt?: Date | string
    sessionToken: string
    userId: number
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    description?: string | null
    users?: UserCreateNestedManyWithoutPermissionsInput
  }

  export type PermissionUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    description?: string | null
    users?: UserUncheckedCreateNestedManyWithoutPermissionsInput
  }

  export type PermissionUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutPermissionsNestedInput
  }

  export type PermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutPermissionsNestedInput
  }

  export type PermissionCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    description?: string | null
  }

  export type PermissionUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionCreateNestedManyWithoutUsersInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Exercise?: ExerciseCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultCreateNestedManyWithoutUserInput
    Product?: ProductCreateNestedManyWithoutUserInput
    Consumed?: ConsumedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementCreateNestedManyWithoutUserInput
    Coach?: CoachCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionUncheckedCreateNestedManyWithoutUsersInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Exercise?: ExerciseUncheckedCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanUncheckedCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultUncheckedCreateNestedManyWithoutUserInput
    Product?: ProductUncheckedCreateNestedManyWithoutUserInput
    Consumed?: ConsumedUncheckedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementUncheckedCreateNestedManyWithoutUserInput
    Coach?: CoachUncheckedCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUpdateManyWithoutUsersNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUpdateManyWithoutUserNestedInput
    Product?: ProductUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUpdateManyWithoutUserNestedInput
    Coach?: CoachUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUpdateManyWithoutUserNestedInput
    Post?: PostUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUncheckedUpdateManyWithoutUsersNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUncheckedUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUncheckedUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUncheckedUpdateManyWithoutUserNestedInput
    Product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUncheckedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUncheckedUpdateManyWithoutUserNestedInput
    Coach?: CoachUncheckedUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUncheckedUpdateManyWithoutUserNestedInput
    Post?: PostUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
  }

  export type UserUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExerciseCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    nameLength: number
    isDeleted?: boolean
    user?: UserCreateNestedOneWithoutExerciseInput
  }

  export type ExerciseUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: number | null
    name: string
    nameLength: number
    isDeleted?: boolean
  }

  export type ExerciseUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    nameLength?: IntFieldUpdateOperationsInput | number
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    nameLength?: IntFieldUpdateOperationsInput | number
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ExerciseCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: number | null
    name: string
    nameLength: number
    isDeleted?: boolean
  }

  export type ExerciseUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    nameLength?: IntFieldUpdateOperationsInput | number
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ExerciseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    nameLength?: IntFieldUpdateOperationsInput | number
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WorkoutPlanCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    description?: string | null
    burnedCalories?: number
    isDeleted?: boolean
    exercises: JsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutWorkoutPlanInput
    WorkoutResult?: WorkoutResultCreateNestedManyWithoutWorkoutPlanInput
  }

  export type WorkoutPlanUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    name: string
    description?: string | null
    burnedCalories?: number
    isDeleted?: boolean
    exercises: JsonNullValueInput | InputJsonValue
    WorkoutResult?: WorkoutResultUncheckedCreateNestedManyWithoutWorkoutPlanInput
  }

  export type WorkoutPlanUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    burnedCalories?: IntFieldUpdateOperationsInput | number
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    exercises?: JsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutWorkoutPlanNestedInput
    WorkoutResult?: WorkoutResultUpdateManyWithoutWorkoutPlanNestedInput
  }

  export type WorkoutPlanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    burnedCalories?: IntFieldUpdateOperationsInput | number
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    exercises?: JsonNullValueInput | InputJsonValue
    WorkoutResult?: WorkoutResultUncheckedUpdateManyWithoutWorkoutPlanNestedInput
  }

  export type WorkoutPlanCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    name: string
    description?: string | null
    burnedCalories?: number
    isDeleted?: boolean
    exercises: JsonNullValueInput | InputJsonValue
  }

  export type WorkoutPlanUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    burnedCalories?: IntFieldUpdateOperationsInput | number
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    exercises?: JsonNullValueInput | InputJsonValue
  }

  export type WorkoutPlanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    burnedCalories?: IntFieldUpdateOperationsInput | number
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    exercises?: JsonNullValueInput | InputJsonValue
  }

  export type WorkoutResultCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    note?: string | null
    burnedCalories?: number
    exercises: JsonNullValueInput | InputJsonValue
    whenAdded?: Date | string
    user: UserCreateNestedOneWithoutWorkoutResultInput
    workoutPlan?: WorkoutPlanCreateNestedOneWithoutWorkoutResultInput
  }

  export type WorkoutResultUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    name: string
    note?: string | null
    burnedCalories?: number
    exercises: JsonNullValueInput | InputJsonValue
    workoutPlanId?: number | null
    whenAdded?: Date | string
  }

  export type WorkoutResultUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    burnedCalories?: IntFieldUpdateOperationsInput | number
    exercises?: JsonNullValueInput | InputJsonValue
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWorkoutResultNestedInput
    workoutPlan?: WorkoutPlanUpdateOneWithoutWorkoutResultNestedInput
  }

  export type WorkoutResultUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    burnedCalories?: IntFieldUpdateOperationsInput | number
    exercises?: JsonNullValueInput | InputJsonValue
    workoutPlanId?: NullableIntFieldUpdateOperationsInput | number | null
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutResultCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    name: string
    note?: string | null
    burnedCalories?: number
    exercises: JsonNullValueInput | InputJsonValue
    workoutPlanId?: number | null
    whenAdded?: Date | string
  }

  export type WorkoutResultUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    burnedCalories?: IntFieldUpdateOperationsInput | number
    exercises?: JsonNullValueInput | InputJsonValue
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutResultUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    burnedCalories?: IntFieldUpdateOperationsInput | number
    exercises?: JsonNullValueInput | InputJsonValue
    workoutPlanId?: NullableIntFieldUpdateOperationsInput | number | null
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    nameLength: number
    proteins?: Decimal | DecimalJsLike | number | string
    carbs?: Decimal | DecimalJsLike | number | string
    sugar?: Decimal | DecimalJsLike | number | string
    fats?: Decimal | DecimalJsLike | number | string
    fiber?: Decimal | DecimalJsLike | number | string
    sodium?: Decimal | DecimalJsLike | number | string
    ethanol?: Decimal | DecimalJsLike | number | string
    barcode?: string | null
    isVerified?: boolean | null
    isDeleted?: boolean | null
    isExpectingCheck?: boolean | null
    user?: UserCreateNestedOneWithoutProductInput
    Consumed?: ConsumedCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: number | null
    name: string
    nameLength: number
    proteins?: Decimal | DecimalJsLike | number | string
    carbs?: Decimal | DecimalJsLike | number | string
    sugar?: Decimal | DecimalJsLike | number | string
    fats?: Decimal | DecimalJsLike | number | string
    fiber?: Decimal | DecimalJsLike | number | string
    sodium?: Decimal | DecimalJsLike | number | string
    ethanol?: Decimal | DecimalJsLike | number | string
    barcode?: string | null
    isVerified?: boolean | null
    isDeleted?: boolean | null
    isExpectingCheck?: boolean | null
    Consumed?: ConsumedUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    nameLength?: IntFieldUpdateOperationsInput | number
    proteins?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    carbs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sugar?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fats?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fiber?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sodium?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ethanol?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isExpectingCheck?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user?: UserUpdateOneWithoutProductNestedInput
    Consumed?: ConsumedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    nameLength?: IntFieldUpdateOperationsInput | number
    proteins?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    carbs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sugar?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fats?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fiber?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sodium?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ethanol?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isExpectingCheck?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Consumed?: ConsumedUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: number | null
    name: string
    nameLength: number
    proteins?: Decimal | DecimalJsLike | number | string
    carbs?: Decimal | DecimalJsLike | number | string
    sugar?: Decimal | DecimalJsLike | number | string
    fats?: Decimal | DecimalJsLike | number | string
    fiber?: Decimal | DecimalJsLike | number | string
    sodium?: Decimal | DecimalJsLike | number | string
    ethanol?: Decimal | DecimalJsLike | number | string
    barcode?: string | null
    isVerified?: boolean | null
    isDeleted?: boolean | null
    isExpectingCheck?: boolean | null
  }

  export type ProductUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    nameLength?: IntFieldUpdateOperationsInput | number
    proteins?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    carbs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sugar?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fats?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fiber?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sodium?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ethanol?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isExpectingCheck?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    nameLength?: IntFieldUpdateOperationsInput | number
    proteins?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    carbs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sugar?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fats?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fiber?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sodium?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ethanol?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isExpectingCheck?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ConsumedCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    howMany?: Decimal | DecimalJsLike | number | string
    meal?: number
    user: UserCreateNestedOneWithoutConsumedInput
    product: ProductCreateNestedOneWithoutConsumedInput
  }

  export type ConsumedUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    whenAdded?: Date | string
    productId: number
    howMany?: Decimal | DecimalJsLike | number | string
    meal?: number
  }

  export type ConsumedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    howMany?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    meal?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutConsumedNestedInput
    product?: ProductUpdateOneRequiredWithoutConsumedNestedInput
  }

  export type ConsumedUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: IntFieldUpdateOperationsInput | number
    howMany?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    meal?: IntFieldUpdateOperationsInput | number
  }

  export type ConsumedCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    whenAdded?: Date | string
    productId: number
    howMany?: Decimal | DecimalJsLike | number | string
    meal?: number
  }

  export type ConsumedUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    howMany?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    meal?: IntFieldUpdateOperationsInput | number
  }

  export type ConsumedUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: IntFieldUpdateOperationsInput | number
    howMany?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    meal?: IntFieldUpdateOperationsInput | number
  }

  export type MeasurementCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    weight?: Decimal | DecimalJsLike | number | string
    user: UserCreateNestedOneWithoutMeasurementInput
  }

  export type MeasurementUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    weight?: Decimal | DecimalJsLike | number | string
    userId: number
  }

  export type MeasurementUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    user?: UserUpdateOneRequiredWithoutMeasurementNestedInput
  }

  export type MeasurementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type MeasurementCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    weight?: Decimal | DecimalJsLike | number | string
    userId: number
  }

  export type MeasurementUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type MeasurementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CoachCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    countedProteins?: number
    countedCarbs?: number
    countedFats?: number
    countedCalories?: number
    currentWeight: Decimal | DecimalJsLike | number | string
    changeInWeight: Decimal | DecimalJsLike | number | string
    isDataInJuicify?: boolean
    data: JsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutCoachInput
  }

  export type CoachUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    countedProteins?: number
    countedCarbs?: number
    countedFats?: number
    countedCalories?: number
    currentWeight: Decimal | DecimalJsLike | number | string
    changeInWeight: Decimal | DecimalJsLike | number | string
    isDataInJuicify?: boolean
    data: JsonNullValueInput | InputJsonValue
  }

  export type CoachUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    countedProteins?: IntFieldUpdateOperationsInput | number
    countedCarbs?: IntFieldUpdateOperationsInput | number
    countedFats?: IntFieldUpdateOperationsInput | number
    countedCalories?: IntFieldUpdateOperationsInput | number
    currentWeight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    changeInWeight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isDataInJuicify?: BoolFieldUpdateOperationsInput | boolean
    data?: JsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutCoachNestedInput
  }

  export type CoachUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    countedProteins?: IntFieldUpdateOperationsInput | number
    countedCarbs?: IntFieldUpdateOperationsInput | number
    countedFats?: IntFieldUpdateOperationsInput | number
    countedCalories?: IntFieldUpdateOperationsInput | number
    currentWeight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    changeInWeight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isDataInJuicify?: BoolFieldUpdateOperationsInput | boolean
    data?: JsonNullValueInput | InputJsonValue
  }

  export type CoachCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    countedProteins?: number
    countedCarbs?: number
    countedFats?: number
    countedCalories?: number
    currentWeight: Decimal | DecimalJsLike | number | string
    changeInWeight: Decimal | DecimalJsLike | number | string
    isDataInJuicify?: boolean
    data: JsonNullValueInput | InputJsonValue
  }

  export type CoachUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    countedProteins?: IntFieldUpdateOperationsInput | number
    countedCarbs?: IntFieldUpdateOperationsInput | number
    countedFats?: IntFieldUpdateOperationsInput | number
    countedCalories?: IntFieldUpdateOperationsInput | number
    currentWeight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    changeInWeight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isDataInJuicify?: BoolFieldUpdateOperationsInput | boolean
    data?: JsonNullValueInput | InputJsonValue
  }

  export type CoachUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    countedProteins?: IntFieldUpdateOperationsInput | number
    countedCarbs?: IntFieldUpdateOperationsInput | number
    countedFats?: IntFieldUpdateOperationsInput | number
    countedCalories?: IntFieldUpdateOperationsInput | number
    currentWeight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    changeInWeight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isDataInJuicify?: BoolFieldUpdateOperationsInput | boolean
    data?: JsonNullValueInput | InputJsonValue
  }

  export type BurnedCaloriesCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    name: string
    burnedCalories: number
    user: UserCreateNestedOneWithoutBurnedCaloriesInput
  }

  export type BurnedCaloriesUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    userId: number
    name: string
    burnedCalories: number
  }

  export type BurnedCaloriesUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    burnedCalories?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutBurnedCaloriesNestedInput
  }

  export type BurnedCaloriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    burnedCalories?: IntFieldUpdateOperationsInput | number
  }

  export type BurnedCaloriesCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    userId: number
    name: string
    burnedCalories: number
  }

  export type BurnedCaloriesUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    burnedCalories?: IntFieldUpdateOperationsInput | number
  }

  export type BurnedCaloriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    burnedCalories?: IntFieldUpdateOperationsInput | number
  }

  export type PostCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    title: string
    content: string
    img_url: string
    user: UserCreateNestedOneWithoutPostInput
  }

  export type PostUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    userId: number
    title: string
    content: string
    img_url: string
  }

  export type PostUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    img_url?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPostNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    img_url?: StringFieldUpdateOperationsInput | string
  }

  export type PostCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    userId: number
    title: string
    content: string
    img_url: string
  }

  export type PostUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    img_url?: StringFieldUpdateOperationsInput | string
  }

  export type PostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    img_url?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    expires_at?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PermissionCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type PermissionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type PermissionMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type PermissionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumgoalsFilter<$PrismaModel = never> = {
    equals?: $Enums.goals | EnumgoalsFieldRefInput<$PrismaModel>
    in?: $Enums.goals[] | ListEnumgoalsFieldRefInput<$PrismaModel>
    notIn?: $Enums.goals[] | ListEnumgoalsFieldRefInput<$PrismaModel>
    not?: NestedEnumgoalsFilter<$PrismaModel> | $Enums.goals
  }

  export type EnumkindOfDietsFilter<$PrismaModel = never> = {
    equals?: $Enums.kindOfDiets | EnumkindOfDietsFieldRefInput<$PrismaModel>
    in?: $Enums.kindOfDiets[] | ListEnumkindOfDietsFieldRefInput<$PrismaModel>
    notIn?: $Enums.kindOfDiets[] | ListEnumkindOfDietsFieldRefInput<$PrismaModel>
    not?: NestedEnumkindOfDietsFilter<$PrismaModel> | $Enums.kindOfDiets
  }

  export type EnumactivityLevelsFilter<$PrismaModel = never> = {
    equals?: $Enums.activityLevels | EnumactivityLevelsFieldRefInput<$PrismaModel>
    in?: $Enums.activityLevels[] | ListEnumactivityLevelsFieldRefInput<$PrismaModel>
    notIn?: $Enums.activityLevels[] | ListEnumactivityLevelsFieldRefInput<$PrismaModel>
    not?: NestedEnumactivityLevelsFilter<$PrismaModel> | $Enums.activityLevels
  }

  export type PermissionListRelationFilter = {
    every?: PermissionWhereInput
    some?: PermissionWhereInput
    none?: PermissionWhereInput
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type ExerciseListRelationFilter = {
    every?: ExerciseWhereInput
    some?: ExerciseWhereInput
    none?: ExerciseWhereInput
  }

  export type WorkoutPlanListRelationFilter = {
    every?: WorkoutPlanWhereInput
    some?: WorkoutPlanWhereInput
    none?: WorkoutPlanWhereInput
  }

  export type WorkoutResultListRelationFilter = {
    every?: WorkoutResultWhereInput
    some?: WorkoutResultWhereInput
    none?: WorkoutResultWhereInput
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type ConsumedListRelationFilter = {
    every?: ConsumedWhereInput
    some?: ConsumedWhereInput
    none?: ConsumedWhereInput
  }

  export type MeasurementListRelationFilter = {
    every?: MeasurementWhereInput
    some?: MeasurementWhereInput
    none?: MeasurementWhereInput
  }

  export type CoachListRelationFilter = {
    every?: CoachWhereInput
    some?: CoachWhereInput
    none?: CoachWhereInput
  }

  export type BurnedCaloriesListRelationFilter = {
    every?: BurnedCaloriesWhereInput
    some?: BurnedCaloriesWhereInput
    none?: BurnedCaloriesWhereInput
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type PermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExerciseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkoutPlanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkoutResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConsumedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MeasurementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CoachOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BurnedCaloriesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    username?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    locale?: SortOrder
    numberOfMeals?: SortOrder
    proteinsDay0?: SortOrder
    carbsDay0?: SortOrder
    fatsDay0?: SortOrder
    proteinsDay1?: SortOrder
    carbsDay1?: SortOrder
    fatsDay1?: SortOrder
    proteinsDay2?: SortOrder
    carbsDay2?: SortOrder
    fatsDay2?: SortOrder
    proteinsDay3?: SortOrder
    carbsDay3?: SortOrder
    fatsDay3?: SortOrder
    proteinsDay4?: SortOrder
    carbsDay4?: SortOrder
    fatsDay4?: SortOrder
    proteinsDay5?: SortOrder
    carbsDay5?: SortOrder
    fatsDay5?: SortOrder
    proteinsDay6?: SortOrder
    carbsDay6?: SortOrder
    fatsDay6?: SortOrder
    fiber?: SortOrder
    carbsPercentAsSugar?: SortOrder
    nextCoach?: SortOrder
    isCoachAnalyze?: SortOrder
    height?: SortOrder
    birth?: SortOrder
    description?: SortOrder
    website?: SortOrder
    facebook?: SortOrder
    instagram?: SortOrder
    twitter?: SortOrder
    goal?: SortOrder
    kindOfDiet?: SortOrder
    isSportActive?: SortOrder
    activityLevel?: SortOrder
    sex?: SortOrder
    isBanned?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    numberOfMeals?: SortOrder
    proteinsDay0?: SortOrder
    carbsDay0?: SortOrder
    fatsDay0?: SortOrder
    proteinsDay1?: SortOrder
    carbsDay1?: SortOrder
    fatsDay1?: SortOrder
    proteinsDay2?: SortOrder
    carbsDay2?: SortOrder
    fatsDay2?: SortOrder
    proteinsDay3?: SortOrder
    carbsDay3?: SortOrder
    fatsDay3?: SortOrder
    proteinsDay4?: SortOrder
    carbsDay4?: SortOrder
    fatsDay4?: SortOrder
    proteinsDay5?: SortOrder
    carbsDay5?: SortOrder
    fatsDay5?: SortOrder
    proteinsDay6?: SortOrder
    carbsDay6?: SortOrder
    fatsDay6?: SortOrder
    fiber?: SortOrder
    carbsPercentAsSugar?: SortOrder
    height?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    username?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    locale?: SortOrder
    numberOfMeals?: SortOrder
    proteinsDay0?: SortOrder
    carbsDay0?: SortOrder
    fatsDay0?: SortOrder
    proteinsDay1?: SortOrder
    carbsDay1?: SortOrder
    fatsDay1?: SortOrder
    proteinsDay2?: SortOrder
    carbsDay2?: SortOrder
    fatsDay2?: SortOrder
    proteinsDay3?: SortOrder
    carbsDay3?: SortOrder
    fatsDay3?: SortOrder
    proteinsDay4?: SortOrder
    carbsDay4?: SortOrder
    fatsDay4?: SortOrder
    proteinsDay5?: SortOrder
    carbsDay5?: SortOrder
    fatsDay5?: SortOrder
    proteinsDay6?: SortOrder
    carbsDay6?: SortOrder
    fatsDay6?: SortOrder
    fiber?: SortOrder
    carbsPercentAsSugar?: SortOrder
    nextCoach?: SortOrder
    isCoachAnalyze?: SortOrder
    height?: SortOrder
    birth?: SortOrder
    description?: SortOrder
    website?: SortOrder
    facebook?: SortOrder
    instagram?: SortOrder
    twitter?: SortOrder
    goal?: SortOrder
    kindOfDiet?: SortOrder
    isSportActive?: SortOrder
    activityLevel?: SortOrder
    sex?: SortOrder
    isBanned?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    username?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    locale?: SortOrder
    numberOfMeals?: SortOrder
    proteinsDay0?: SortOrder
    carbsDay0?: SortOrder
    fatsDay0?: SortOrder
    proteinsDay1?: SortOrder
    carbsDay1?: SortOrder
    fatsDay1?: SortOrder
    proteinsDay2?: SortOrder
    carbsDay2?: SortOrder
    fatsDay2?: SortOrder
    proteinsDay3?: SortOrder
    carbsDay3?: SortOrder
    fatsDay3?: SortOrder
    proteinsDay4?: SortOrder
    carbsDay4?: SortOrder
    fatsDay4?: SortOrder
    proteinsDay5?: SortOrder
    carbsDay5?: SortOrder
    fatsDay5?: SortOrder
    proteinsDay6?: SortOrder
    carbsDay6?: SortOrder
    fatsDay6?: SortOrder
    fiber?: SortOrder
    carbsPercentAsSugar?: SortOrder
    nextCoach?: SortOrder
    isCoachAnalyze?: SortOrder
    height?: SortOrder
    birth?: SortOrder
    description?: SortOrder
    website?: SortOrder
    facebook?: SortOrder
    instagram?: SortOrder
    twitter?: SortOrder
    goal?: SortOrder
    kindOfDiet?: SortOrder
    isSportActive?: SortOrder
    activityLevel?: SortOrder
    sex?: SortOrder
    isBanned?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    numberOfMeals?: SortOrder
    proteinsDay0?: SortOrder
    carbsDay0?: SortOrder
    fatsDay0?: SortOrder
    proteinsDay1?: SortOrder
    carbsDay1?: SortOrder
    fatsDay1?: SortOrder
    proteinsDay2?: SortOrder
    carbsDay2?: SortOrder
    fatsDay2?: SortOrder
    proteinsDay3?: SortOrder
    carbsDay3?: SortOrder
    fatsDay3?: SortOrder
    proteinsDay4?: SortOrder
    carbsDay4?: SortOrder
    fatsDay4?: SortOrder
    proteinsDay5?: SortOrder
    carbsDay5?: SortOrder
    fatsDay5?: SortOrder
    proteinsDay6?: SortOrder
    carbsDay6?: SortOrder
    fatsDay6?: SortOrder
    fiber?: SortOrder
    carbsPercentAsSugar?: SortOrder
    height?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumgoalsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.goals | EnumgoalsFieldRefInput<$PrismaModel>
    in?: $Enums.goals[] | ListEnumgoalsFieldRefInput<$PrismaModel>
    notIn?: $Enums.goals[] | ListEnumgoalsFieldRefInput<$PrismaModel>
    not?: NestedEnumgoalsWithAggregatesFilter<$PrismaModel> | $Enums.goals
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumgoalsFilter<$PrismaModel>
    _max?: NestedEnumgoalsFilter<$PrismaModel>
  }

  export type EnumkindOfDietsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.kindOfDiets | EnumkindOfDietsFieldRefInput<$PrismaModel>
    in?: $Enums.kindOfDiets[] | ListEnumkindOfDietsFieldRefInput<$PrismaModel>
    notIn?: $Enums.kindOfDiets[] | ListEnumkindOfDietsFieldRefInput<$PrismaModel>
    not?: NestedEnumkindOfDietsWithAggregatesFilter<$PrismaModel> | $Enums.kindOfDiets
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumkindOfDietsFilter<$PrismaModel>
    _max?: NestedEnumkindOfDietsFilter<$PrismaModel>
  }

  export type EnumactivityLevelsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.activityLevels | EnumactivityLevelsFieldRefInput<$PrismaModel>
    in?: $Enums.activityLevels[] | ListEnumactivityLevelsFieldRefInput<$PrismaModel>
    notIn?: $Enums.activityLevels[] | ListEnumactivityLevelsFieldRefInput<$PrismaModel>
    not?: NestedEnumactivityLevelsWithAggregatesFilter<$PrismaModel> | $Enums.activityLevels
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumactivityLevelsFilter<$PrismaModel>
    _max?: NestedEnumactivityLevelsFilter<$PrismaModel>
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ExerciseUserIdNameIsDeletedCompoundUniqueInput = {
    userId: number
    name: string
    isDeleted: boolean
  }

  export type ExerciseCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    nameLength?: SortOrder
    isDeleted?: SortOrder
  }

  export type ExerciseAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nameLength?: SortOrder
  }

  export type ExerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    nameLength?: SortOrder
    isDeleted?: SortOrder
  }

  export type ExerciseMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    nameLength?: SortOrder
    isDeleted?: SortOrder
  }

  export type ExerciseSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nameLength?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type WorkoutPlanIdUserIdCompoundUniqueInput = {
    id: number
    userId: number
  }

  export type WorkoutPlanCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    burnedCalories?: SortOrder
    isDeleted?: SortOrder
    exercises?: SortOrder
  }

  export type WorkoutPlanAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    burnedCalories?: SortOrder
  }

  export type WorkoutPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    burnedCalories?: SortOrder
    isDeleted?: SortOrder
  }

  export type WorkoutPlanMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    burnedCalories?: SortOrder
    isDeleted?: SortOrder
  }

  export type WorkoutPlanSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    burnedCalories?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type WorkoutPlanNullableRelationFilter = {
    is?: WorkoutPlanWhereInput | null
    isNot?: WorkoutPlanWhereInput | null
  }

  export type WorkoutResultIdUserIdCompoundUniqueInput = {
    id: number
    userId: number
  }

  export type WorkoutResultCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    note?: SortOrder
    burnedCalories?: SortOrder
    exercises?: SortOrder
    workoutPlanId?: SortOrder
    whenAdded?: SortOrder
  }

  export type WorkoutResultAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    burnedCalories?: SortOrder
    workoutPlanId?: SortOrder
  }

  export type WorkoutResultMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    note?: SortOrder
    burnedCalories?: SortOrder
    workoutPlanId?: SortOrder
    whenAdded?: SortOrder
  }

  export type WorkoutResultMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    note?: SortOrder
    burnedCalories?: SortOrder
    workoutPlanId?: SortOrder
    whenAdded?: SortOrder
  }

  export type WorkoutResultSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    burnedCalories?: SortOrder
    workoutPlanId?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type ProductIdUserIdCompoundUniqueInput = {
    id: number
    userId: number
  }

  export type ProductNameUserIdCompoundUniqueInput = {
    name: string
    userId: number
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    nameLength?: SortOrder
    proteins?: SortOrder
    carbs?: SortOrder
    sugar?: SortOrder
    fats?: SortOrder
    fiber?: SortOrder
    sodium?: SortOrder
    ethanol?: SortOrder
    barcode?: SortOrder
    isVerified?: SortOrder
    isDeleted?: SortOrder
    isExpectingCheck?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nameLength?: SortOrder
    proteins?: SortOrder
    carbs?: SortOrder
    sugar?: SortOrder
    fats?: SortOrder
    fiber?: SortOrder
    sodium?: SortOrder
    ethanol?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    nameLength?: SortOrder
    proteins?: SortOrder
    carbs?: SortOrder
    sugar?: SortOrder
    fats?: SortOrder
    fiber?: SortOrder
    sodium?: SortOrder
    ethanol?: SortOrder
    barcode?: SortOrder
    isVerified?: SortOrder
    isDeleted?: SortOrder
    isExpectingCheck?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    nameLength?: SortOrder
    proteins?: SortOrder
    carbs?: SortOrder
    sugar?: SortOrder
    fats?: SortOrder
    fiber?: SortOrder
    sodium?: SortOrder
    ethanol?: SortOrder
    barcode?: SortOrder
    isVerified?: SortOrder
    isDeleted?: SortOrder
    isExpectingCheck?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nameLength?: SortOrder
    proteins?: SortOrder
    carbs?: SortOrder
    sugar?: SortOrder
    fats?: SortOrder
    fiber?: SortOrder
    sodium?: SortOrder
    ethanol?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type ConsumedIdUserIdCompoundUniqueInput = {
    id: number
    userId: number
  }

  export type ConsumedCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    whenAdded?: SortOrder
    productId?: SortOrder
    howMany?: SortOrder
    meal?: SortOrder
  }

  export type ConsumedAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    howMany?: SortOrder
    meal?: SortOrder
  }

  export type ConsumedMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    whenAdded?: SortOrder
    productId?: SortOrder
    howMany?: SortOrder
    meal?: SortOrder
  }

  export type ConsumedMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    whenAdded?: SortOrder
    productId?: SortOrder
    howMany?: SortOrder
    meal?: SortOrder
  }

  export type ConsumedSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    howMany?: SortOrder
    meal?: SortOrder
  }

  export type MeasurementIdUserIdCompoundUniqueInput = {
    id: number
    userId: number
  }

  export type MeasurementCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    whenAdded?: SortOrder
    weight?: SortOrder
    userId?: SortOrder
  }

  export type MeasurementAvgOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    userId?: SortOrder
  }

  export type MeasurementMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    whenAdded?: SortOrder
    weight?: SortOrder
    userId?: SortOrder
  }

  export type MeasurementMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    whenAdded?: SortOrder
    weight?: SortOrder
    userId?: SortOrder
  }

  export type MeasurementSumOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    userId?: SortOrder
  }

  export type CoachCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    goal?: SortOrder
    kindOfDiet?: SortOrder
    isSportActive?: SortOrder
    activityLevel?: SortOrder
    countedProteins?: SortOrder
    countedCarbs?: SortOrder
    countedFats?: SortOrder
    countedCalories?: SortOrder
    currentWeight?: SortOrder
    changeInWeight?: SortOrder
    isDataInJuicify?: SortOrder
    data?: SortOrder
  }

  export type CoachAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    countedProteins?: SortOrder
    countedCarbs?: SortOrder
    countedFats?: SortOrder
    countedCalories?: SortOrder
    currentWeight?: SortOrder
    changeInWeight?: SortOrder
  }

  export type CoachMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    goal?: SortOrder
    kindOfDiet?: SortOrder
    isSportActive?: SortOrder
    activityLevel?: SortOrder
    countedProteins?: SortOrder
    countedCarbs?: SortOrder
    countedFats?: SortOrder
    countedCalories?: SortOrder
    currentWeight?: SortOrder
    changeInWeight?: SortOrder
    isDataInJuicify?: SortOrder
  }

  export type CoachMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    goal?: SortOrder
    kindOfDiet?: SortOrder
    isSportActive?: SortOrder
    activityLevel?: SortOrder
    countedProteins?: SortOrder
    countedCarbs?: SortOrder
    countedFats?: SortOrder
    countedCalories?: SortOrder
    currentWeight?: SortOrder
    changeInWeight?: SortOrder
    isDataInJuicify?: SortOrder
  }

  export type CoachSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    countedProteins?: SortOrder
    countedCarbs?: SortOrder
    countedFats?: SortOrder
    countedCalories?: SortOrder
    currentWeight?: SortOrder
    changeInWeight?: SortOrder
  }

  export type BurnedCaloriesIdUserIdCompoundUniqueInput = {
    id: number
    userId: number
  }

  export type BurnedCaloriesCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    whenAdded?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    burnedCalories?: SortOrder
  }

  export type BurnedCaloriesAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    burnedCalories?: SortOrder
  }

  export type BurnedCaloriesMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    whenAdded?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    burnedCalories?: SortOrder
  }

  export type BurnedCaloriesMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    whenAdded?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    burnedCalories?: SortOrder
  }

  export type BurnedCaloriesSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    burnedCalories?: SortOrder
  }

  export type PostIdUserIdCompoundUniqueInput = {
    id: number
    userId: number
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    whenAdded?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    img_url?: SortOrder
  }

  export type PostAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    whenAdded?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    img_url?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    whenAdded?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    img_url?: SortOrder
  }

  export type PostSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedManyWithoutPermissionsInput = {
    create?: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput> | UserCreateWithoutPermissionsInput[] | UserUncheckedCreateWithoutPermissionsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPermissionsInput | UserCreateOrConnectWithoutPermissionsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutPermissionsInput = {
    create?: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput> | UserCreateWithoutPermissionsInput[] | UserUncheckedCreateWithoutPermissionsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPermissionsInput | UserCreateOrConnectWithoutPermissionsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutPermissionsNestedInput = {
    create?: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput> | UserCreateWithoutPermissionsInput[] | UserUncheckedCreateWithoutPermissionsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPermissionsInput | UserCreateOrConnectWithoutPermissionsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutPermissionsInput | UserUpsertWithWhereUniqueWithoutPermissionsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutPermissionsInput | UserUpdateWithWhereUniqueWithoutPermissionsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutPermissionsInput | UserUpdateManyWithWhereWithoutPermissionsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutPermissionsNestedInput = {
    create?: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput> | UserCreateWithoutPermissionsInput[] | UserUncheckedCreateWithoutPermissionsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPermissionsInput | UserCreateOrConnectWithoutPermissionsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutPermissionsInput | UserUpsertWithWhereUniqueWithoutPermissionsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutPermissionsInput | UserUpdateWithWhereUniqueWithoutPermissionsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutPermissionsInput | UserUpdateManyWithWhereWithoutPermissionsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type PermissionCreateNestedManyWithoutUsersInput = {
    create?: XOR<PermissionCreateWithoutUsersInput, PermissionUncheckedCreateWithoutUsersInput> | PermissionCreateWithoutUsersInput[] | PermissionUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutUsersInput | PermissionCreateOrConnectWithoutUsersInput[]
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type ExerciseCreateNestedManyWithoutUserInput = {
    create?: XOR<ExerciseCreateWithoutUserInput, ExerciseUncheckedCreateWithoutUserInput> | ExerciseCreateWithoutUserInput[] | ExerciseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutUserInput | ExerciseCreateOrConnectWithoutUserInput[]
    createMany?: ExerciseCreateManyUserInputEnvelope
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type WorkoutPlanCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkoutPlanCreateWithoutUserInput, WorkoutPlanUncheckedCreateWithoutUserInput> | WorkoutPlanCreateWithoutUserInput[] | WorkoutPlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutUserInput | WorkoutPlanCreateOrConnectWithoutUserInput[]
    createMany?: WorkoutPlanCreateManyUserInputEnvelope
    connect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
  }

  export type WorkoutResultCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkoutResultCreateWithoutUserInput, WorkoutResultUncheckedCreateWithoutUserInput> | WorkoutResultCreateWithoutUserInput[] | WorkoutResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutResultCreateOrConnectWithoutUserInput | WorkoutResultCreateOrConnectWithoutUserInput[]
    createMany?: WorkoutResultCreateManyUserInputEnvelope
    connect?: WorkoutResultWhereUniqueInput | WorkoutResultWhereUniqueInput[]
  }

  export type ProductCreateNestedManyWithoutUserInput = {
    create?: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput> | ProductCreateWithoutUserInput[] | ProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUserInput | ProductCreateOrConnectWithoutUserInput[]
    createMany?: ProductCreateManyUserInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ConsumedCreateNestedManyWithoutUserInput = {
    create?: XOR<ConsumedCreateWithoutUserInput, ConsumedUncheckedCreateWithoutUserInput> | ConsumedCreateWithoutUserInput[] | ConsumedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConsumedCreateOrConnectWithoutUserInput | ConsumedCreateOrConnectWithoutUserInput[]
    createMany?: ConsumedCreateManyUserInputEnvelope
    connect?: ConsumedWhereUniqueInput | ConsumedWhereUniqueInput[]
  }

  export type MeasurementCreateNestedManyWithoutUserInput = {
    create?: XOR<MeasurementCreateWithoutUserInput, MeasurementUncheckedCreateWithoutUserInput> | MeasurementCreateWithoutUserInput[] | MeasurementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MeasurementCreateOrConnectWithoutUserInput | MeasurementCreateOrConnectWithoutUserInput[]
    createMany?: MeasurementCreateManyUserInputEnvelope
    connect?: MeasurementWhereUniqueInput | MeasurementWhereUniqueInput[]
  }

  export type CoachCreateNestedManyWithoutUserInput = {
    create?: XOR<CoachCreateWithoutUserInput, CoachUncheckedCreateWithoutUserInput> | CoachCreateWithoutUserInput[] | CoachUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CoachCreateOrConnectWithoutUserInput | CoachCreateOrConnectWithoutUserInput[]
    createMany?: CoachCreateManyUserInputEnvelope
    connect?: CoachWhereUniqueInput | CoachWhereUniqueInput[]
  }

  export type BurnedCaloriesCreateNestedManyWithoutUserInput = {
    create?: XOR<BurnedCaloriesCreateWithoutUserInput, BurnedCaloriesUncheckedCreateWithoutUserInput> | BurnedCaloriesCreateWithoutUserInput[] | BurnedCaloriesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BurnedCaloriesCreateOrConnectWithoutUserInput | BurnedCaloriesCreateOrConnectWithoutUserInput[]
    createMany?: BurnedCaloriesCreateManyUserInputEnvelope
    connect?: BurnedCaloriesWhereUniqueInput | BurnedCaloriesWhereUniqueInput[]
  }

  export type PostCreateNestedManyWithoutUserInput = {
    create?: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput> | PostCreateWithoutUserInput[] | PostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostCreateOrConnectWithoutUserInput | PostCreateOrConnectWithoutUserInput[]
    createMany?: PostCreateManyUserInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type PermissionUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<PermissionCreateWithoutUsersInput, PermissionUncheckedCreateWithoutUsersInput> | PermissionCreateWithoutUsersInput[] | PermissionUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutUsersInput | PermissionCreateOrConnectWithoutUsersInput[]
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type ExerciseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ExerciseCreateWithoutUserInput, ExerciseUncheckedCreateWithoutUserInput> | ExerciseCreateWithoutUserInput[] | ExerciseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutUserInput | ExerciseCreateOrConnectWithoutUserInput[]
    createMany?: ExerciseCreateManyUserInputEnvelope
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type WorkoutPlanUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkoutPlanCreateWithoutUserInput, WorkoutPlanUncheckedCreateWithoutUserInput> | WorkoutPlanCreateWithoutUserInput[] | WorkoutPlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutUserInput | WorkoutPlanCreateOrConnectWithoutUserInput[]
    createMany?: WorkoutPlanCreateManyUserInputEnvelope
    connect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
  }

  export type WorkoutResultUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkoutResultCreateWithoutUserInput, WorkoutResultUncheckedCreateWithoutUserInput> | WorkoutResultCreateWithoutUserInput[] | WorkoutResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutResultCreateOrConnectWithoutUserInput | WorkoutResultCreateOrConnectWithoutUserInput[]
    createMany?: WorkoutResultCreateManyUserInputEnvelope
    connect?: WorkoutResultWhereUniqueInput | WorkoutResultWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput> | ProductCreateWithoutUserInput[] | ProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUserInput | ProductCreateOrConnectWithoutUserInput[]
    createMany?: ProductCreateManyUserInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ConsumedUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ConsumedCreateWithoutUserInput, ConsumedUncheckedCreateWithoutUserInput> | ConsumedCreateWithoutUserInput[] | ConsumedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConsumedCreateOrConnectWithoutUserInput | ConsumedCreateOrConnectWithoutUserInput[]
    createMany?: ConsumedCreateManyUserInputEnvelope
    connect?: ConsumedWhereUniqueInput | ConsumedWhereUniqueInput[]
  }

  export type MeasurementUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MeasurementCreateWithoutUserInput, MeasurementUncheckedCreateWithoutUserInput> | MeasurementCreateWithoutUserInput[] | MeasurementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MeasurementCreateOrConnectWithoutUserInput | MeasurementCreateOrConnectWithoutUserInput[]
    createMany?: MeasurementCreateManyUserInputEnvelope
    connect?: MeasurementWhereUniqueInput | MeasurementWhereUniqueInput[]
  }

  export type CoachUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CoachCreateWithoutUserInput, CoachUncheckedCreateWithoutUserInput> | CoachCreateWithoutUserInput[] | CoachUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CoachCreateOrConnectWithoutUserInput | CoachCreateOrConnectWithoutUserInput[]
    createMany?: CoachCreateManyUserInputEnvelope
    connect?: CoachWhereUniqueInput | CoachWhereUniqueInput[]
  }

  export type BurnedCaloriesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BurnedCaloriesCreateWithoutUserInput, BurnedCaloriesUncheckedCreateWithoutUserInput> | BurnedCaloriesCreateWithoutUserInput[] | BurnedCaloriesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BurnedCaloriesCreateOrConnectWithoutUserInput | BurnedCaloriesCreateOrConnectWithoutUserInput[]
    createMany?: BurnedCaloriesCreateManyUserInputEnvelope
    connect?: BurnedCaloriesWhereUniqueInput | BurnedCaloriesWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput> | PostCreateWithoutUserInput[] | PostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostCreateOrConnectWithoutUserInput | PostCreateOrConnectWithoutUserInput[]
    createMany?: PostCreateManyUserInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumgoalsFieldUpdateOperationsInput = {
    set?: $Enums.goals
  }

  export type EnumkindOfDietsFieldUpdateOperationsInput = {
    set?: $Enums.kindOfDiets
  }

  export type EnumactivityLevelsFieldUpdateOperationsInput = {
    set?: $Enums.activityLevels
  }

  export type PermissionUpdateManyWithoutUsersNestedInput = {
    create?: XOR<PermissionCreateWithoutUsersInput, PermissionUncheckedCreateWithoutUsersInput> | PermissionCreateWithoutUsersInput[] | PermissionUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutUsersInput | PermissionCreateOrConnectWithoutUsersInput[]
    upsert?: PermissionUpsertWithWhereUniqueWithoutUsersInput | PermissionUpsertWithWhereUniqueWithoutUsersInput[]
    set?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    disconnect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    delete?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    update?: PermissionUpdateWithWhereUniqueWithoutUsersInput | PermissionUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: PermissionUpdateManyWithWhereWithoutUsersInput | PermissionUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type ExerciseUpdateManyWithoutUserNestedInput = {
    create?: XOR<ExerciseCreateWithoutUserInput, ExerciseUncheckedCreateWithoutUserInput> | ExerciseCreateWithoutUserInput[] | ExerciseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutUserInput | ExerciseCreateOrConnectWithoutUserInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutUserInput | ExerciseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ExerciseCreateManyUserInputEnvelope
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutUserInput | ExerciseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutUserInput | ExerciseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type WorkoutPlanUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkoutPlanCreateWithoutUserInput, WorkoutPlanUncheckedCreateWithoutUserInput> | WorkoutPlanCreateWithoutUserInput[] | WorkoutPlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutUserInput | WorkoutPlanCreateOrConnectWithoutUserInput[]
    upsert?: WorkoutPlanUpsertWithWhereUniqueWithoutUserInput | WorkoutPlanUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkoutPlanCreateManyUserInputEnvelope
    set?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    disconnect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    delete?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    connect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    update?: WorkoutPlanUpdateWithWhereUniqueWithoutUserInput | WorkoutPlanUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkoutPlanUpdateManyWithWhereWithoutUserInput | WorkoutPlanUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkoutPlanScalarWhereInput | WorkoutPlanScalarWhereInput[]
  }

  export type WorkoutResultUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkoutResultCreateWithoutUserInput, WorkoutResultUncheckedCreateWithoutUserInput> | WorkoutResultCreateWithoutUserInput[] | WorkoutResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutResultCreateOrConnectWithoutUserInput | WorkoutResultCreateOrConnectWithoutUserInput[]
    upsert?: WorkoutResultUpsertWithWhereUniqueWithoutUserInput | WorkoutResultUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkoutResultCreateManyUserInputEnvelope
    set?: WorkoutResultWhereUniqueInput | WorkoutResultWhereUniqueInput[]
    disconnect?: WorkoutResultWhereUniqueInput | WorkoutResultWhereUniqueInput[]
    delete?: WorkoutResultWhereUniqueInput | WorkoutResultWhereUniqueInput[]
    connect?: WorkoutResultWhereUniqueInput | WorkoutResultWhereUniqueInput[]
    update?: WorkoutResultUpdateWithWhereUniqueWithoutUserInput | WorkoutResultUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkoutResultUpdateManyWithWhereWithoutUserInput | WorkoutResultUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkoutResultScalarWhereInput | WorkoutResultScalarWhereInput[]
  }

  export type ProductUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput> | ProductCreateWithoutUserInput[] | ProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUserInput | ProductCreateOrConnectWithoutUserInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutUserInput | ProductUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProductCreateManyUserInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutUserInput | ProductUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutUserInput | ProductUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ConsumedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ConsumedCreateWithoutUserInput, ConsumedUncheckedCreateWithoutUserInput> | ConsumedCreateWithoutUserInput[] | ConsumedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConsumedCreateOrConnectWithoutUserInput | ConsumedCreateOrConnectWithoutUserInput[]
    upsert?: ConsumedUpsertWithWhereUniqueWithoutUserInput | ConsumedUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ConsumedCreateManyUserInputEnvelope
    set?: ConsumedWhereUniqueInput | ConsumedWhereUniqueInput[]
    disconnect?: ConsumedWhereUniqueInput | ConsumedWhereUniqueInput[]
    delete?: ConsumedWhereUniqueInput | ConsumedWhereUniqueInput[]
    connect?: ConsumedWhereUniqueInput | ConsumedWhereUniqueInput[]
    update?: ConsumedUpdateWithWhereUniqueWithoutUserInput | ConsumedUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ConsumedUpdateManyWithWhereWithoutUserInput | ConsumedUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ConsumedScalarWhereInput | ConsumedScalarWhereInput[]
  }

  export type MeasurementUpdateManyWithoutUserNestedInput = {
    create?: XOR<MeasurementCreateWithoutUserInput, MeasurementUncheckedCreateWithoutUserInput> | MeasurementCreateWithoutUserInput[] | MeasurementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MeasurementCreateOrConnectWithoutUserInput | MeasurementCreateOrConnectWithoutUserInput[]
    upsert?: MeasurementUpsertWithWhereUniqueWithoutUserInput | MeasurementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MeasurementCreateManyUserInputEnvelope
    set?: MeasurementWhereUniqueInput | MeasurementWhereUniqueInput[]
    disconnect?: MeasurementWhereUniqueInput | MeasurementWhereUniqueInput[]
    delete?: MeasurementWhereUniqueInput | MeasurementWhereUniqueInput[]
    connect?: MeasurementWhereUniqueInput | MeasurementWhereUniqueInput[]
    update?: MeasurementUpdateWithWhereUniqueWithoutUserInput | MeasurementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MeasurementUpdateManyWithWhereWithoutUserInput | MeasurementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MeasurementScalarWhereInput | MeasurementScalarWhereInput[]
  }

  export type CoachUpdateManyWithoutUserNestedInput = {
    create?: XOR<CoachCreateWithoutUserInput, CoachUncheckedCreateWithoutUserInput> | CoachCreateWithoutUserInput[] | CoachUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CoachCreateOrConnectWithoutUserInput | CoachCreateOrConnectWithoutUserInput[]
    upsert?: CoachUpsertWithWhereUniqueWithoutUserInput | CoachUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CoachCreateManyUserInputEnvelope
    set?: CoachWhereUniqueInput | CoachWhereUniqueInput[]
    disconnect?: CoachWhereUniqueInput | CoachWhereUniqueInput[]
    delete?: CoachWhereUniqueInput | CoachWhereUniqueInput[]
    connect?: CoachWhereUniqueInput | CoachWhereUniqueInput[]
    update?: CoachUpdateWithWhereUniqueWithoutUserInput | CoachUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CoachUpdateManyWithWhereWithoutUserInput | CoachUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CoachScalarWhereInput | CoachScalarWhereInput[]
  }

  export type BurnedCaloriesUpdateManyWithoutUserNestedInput = {
    create?: XOR<BurnedCaloriesCreateWithoutUserInput, BurnedCaloriesUncheckedCreateWithoutUserInput> | BurnedCaloriesCreateWithoutUserInput[] | BurnedCaloriesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BurnedCaloriesCreateOrConnectWithoutUserInput | BurnedCaloriesCreateOrConnectWithoutUserInput[]
    upsert?: BurnedCaloriesUpsertWithWhereUniqueWithoutUserInput | BurnedCaloriesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BurnedCaloriesCreateManyUserInputEnvelope
    set?: BurnedCaloriesWhereUniqueInput | BurnedCaloriesWhereUniqueInput[]
    disconnect?: BurnedCaloriesWhereUniqueInput | BurnedCaloriesWhereUniqueInput[]
    delete?: BurnedCaloriesWhereUniqueInput | BurnedCaloriesWhereUniqueInput[]
    connect?: BurnedCaloriesWhereUniqueInput | BurnedCaloriesWhereUniqueInput[]
    update?: BurnedCaloriesUpdateWithWhereUniqueWithoutUserInput | BurnedCaloriesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BurnedCaloriesUpdateManyWithWhereWithoutUserInput | BurnedCaloriesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BurnedCaloriesScalarWhereInput | BurnedCaloriesScalarWhereInput[]
  }

  export type PostUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput> | PostCreateWithoutUserInput[] | PostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostCreateOrConnectWithoutUserInput | PostCreateOrConnectWithoutUserInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutUserInput | PostUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PostCreateManyUserInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutUserInput | PostUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostUpdateManyWithWhereWithoutUserInput | PostUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type PermissionUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<PermissionCreateWithoutUsersInput, PermissionUncheckedCreateWithoutUsersInput> | PermissionCreateWithoutUsersInput[] | PermissionUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutUsersInput | PermissionCreateOrConnectWithoutUsersInput[]
    upsert?: PermissionUpsertWithWhereUniqueWithoutUsersInput | PermissionUpsertWithWhereUniqueWithoutUsersInput[]
    set?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    disconnect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    delete?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    update?: PermissionUpdateWithWhereUniqueWithoutUsersInput | PermissionUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: PermissionUpdateManyWithWhereWithoutUsersInput | PermissionUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type ExerciseUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ExerciseCreateWithoutUserInput, ExerciseUncheckedCreateWithoutUserInput> | ExerciseCreateWithoutUserInput[] | ExerciseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutUserInput | ExerciseCreateOrConnectWithoutUserInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutUserInput | ExerciseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ExerciseCreateManyUserInputEnvelope
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutUserInput | ExerciseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutUserInput | ExerciseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type WorkoutPlanUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkoutPlanCreateWithoutUserInput, WorkoutPlanUncheckedCreateWithoutUserInput> | WorkoutPlanCreateWithoutUserInput[] | WorkoutPlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutUserInput | WorkoutPlanCreateOrConnectWithoutUserInput[]
    upsert?: WorkoutPlanUpsertWithWhereUniqueWithoutUserInput | WorkoutPlanUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkoutPlanCreateManyUserInputEnvelope
    set?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    disconnect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    delete?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    connect?: WorkoutPlanWhereUniqueInput | WorkoutPlanWhereUniqueInput[]
    update?: WorkoutPlanUpdateWithWhereUniqueWithoutUserInput | WorkoutPlanUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkoutPlanUpdateManyWithWhereWithoutUserInput | WorkoutPlanUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkoutPlanScalarWhereInput | WorkoutPlanScalarWhereInput[]
  }

  export type WorkoutResultUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkoutResultCreateWithoutUserInput, WorkoutResultUncheckedCreateWithoutUserInput> | WorkoutResultCreateWithoutUserInput[] | WorkoutResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutResultCreateOrConnectWithoutUserInput | WorkoutResultCreateOrConnectWithoutUserInput[]
    upsert?: WorkoutResultUpsertWithWhereUniqueWithoutUserInput | WorkoutResultUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkoutResultCreateManyUserInputEnvelope
    set?: WorkoutResultWhereUniqueInput | WorkoutResultWhereUniqueInput[]
    disconnect?: WorkoutResultWhereUniqueInput | WorkoutResultWhereUniqueInput[]
    delete?: WorkoutResultWhereUniqueInput | WorkoutResultWhereUniqueInput[]
    connect?: WorkoutResultWhereUniqueInput | WorkoutResultWhereUniqueInput[]
    update?: WorkoutResultUpdateWithWhereUniqueWithoutUserInput | WorkoutResultUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkoutResultUpdateManyWithWhereWithoutUserInput | WorkoutResultUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkoutResultScalarWhereInput | WorkoutResultScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput> | ProductCreateWithoutUserInput[] | ProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUserInput | ProductCreateOrConnectWithoutUserInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutUserInput | ProductUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProductCreateManyUserInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutUserInput | ProductUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutUserInput | ProductUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ConsumedUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ConsumedCreateWithoutUserInput, ConsumedUncheckedCreateWithoutUserInput> | ConsumedCreateWithoutUserInput[] | ConsumedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConsumedCreateOrConnectWithoutUserInput | ConsumedCreateOrConnectWithoutUserInput[]
    upsert?: ConsumedUpsertWithWhereUniqueWithoutUserInput | ConsumedUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ConsumedCreateManyUserInputEnvelope
    set?: ConsumedWhereUniqueInput | ConsumedWhereUniqueInput[]
    disconnect?: ConsumedWhereUniqueInput | ConsumedWhereUniqueInput[]
    delete?: ConsumedWhereUniqueInput | ConsumedWhereUniqueInput[]
    connect?: ConsumedWhereUniqueInput | ConsumedWhereUniqueInput[]
    update?: ConsumedUpdateWithWhereUniqueWithoutUserInput | ConsumedUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ConsumedUpdateManyWithWhereWithoutUserInput | ConsumedUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ConsumedScalarWhereInput | ConsumedScalarWhereInput[]
  }

  export type MeasurementUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MeasurementCreateWithoutUserInput, MeasurementUncheckedCreateWithoutUserInput> | MeasurementCreateWithoutUserInput[] | MeasurementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MeasurementCreateOrConnectWithoutUserInput | MeasurementCreateOrConnectWithoutUserInput[]
    upsert?: MeasurementUpsertWithWhereUniqueWithoutUserInput | MeasurementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MeasurementCreateManyUserInputEnvelope
    set?: MeasurementWhereUniqueInput | MeasurementWhereUniqueInput[]
    disconnect?: MeasurementWhereUniqueInput | MeasurementWhereUniqueInput[]
    delete?: MeasurementWhereUniqueInput | MeasurementWhereUniqueInput[]
    connect?: MeasurementWhereUniqueInput | MeasurementWhereUniqueInput[]
    update?: MeasurementUpdateWithWhereUniqueWithoutUserInput | MeasurementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MeasurementUpdateManyWithWhereWithoutUserInput | MeasurementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MeasurementScalarWhereInput | MeasurementScalarWhereInput[]
  }

  export type CoachUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CoachCreateWithoutUserInput, CoachUncheckedCreateWithoutUserInput> | CoachCreateWithoutUserInput[] | CoachUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CoachCreateOrConnectWithoutUserInput | CoachCreateOrConnectWithoutUserInput[]
    upsert?: CoachUpsertWithWhereUniqueWithoutUserInput | CoachUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CoachCreateManyUserInputEnvelope
    set?: CoachWhereUniqueInput | CoachWhereUniqueInput[]
    disconnect?: CoachWhereUniqueInput | CoachWhereUniqueInput[]
    delete?: CoachWhereUniqueInput | CoachWhereUniqueInput[]
    connect?: CoachWhereUniqueInput | CoachWhereUniqueInput[]
    update?: CoachUpdateWithWhereUniqueWithoutUserInput | CoachUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CoachUpdateManyWithWhereWithoutUserInput | CoachUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CoachScalarWhereInput | CoachScalarWhereInput[]
  }

  export type BurnedCaloriesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BurnedCaloriesCreateWithoutUserInput, BurnedCaloriesUncheckedCreateWithoutUserInput> | BurnedCaloriesCreateWithoutUserInput[] | BurnedCaloriesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BurnedCaloriesCreateOrConnectWithoutUserInput | BurnedCaloriesCreateOrConnectWithoutUserInput[]
    upsert?: BurnedCaloriesUpsertWithWhereUniqueWithoutUserInput | BurnedCaloriesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BurnedCaloriesCreateManyUserInputEnvelope
    set?: BurnedCaloriesWhereUniqueInput | BurnedCaloriesWhereUniqueInput[]
    disconnect?: BurnedCaloriesWhereUniqueInput | BurnedCaloriesWhereUniqueInput[]
    delete?: BurnedCaloriesWhereUniqueInput | BurnedCaloriesWhereUniqueInput[]
    connect?: BurnedCaloriesWhereUniqueInput | BurnedCaloriesWhereUniqueInput[]
    update?: BurnedCaloriesUpdateWithWhereUniqueWithoutUserInput | BurnedCaloriesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BurnedCaloriesUpdateManyWithWhereWithoutUserInput | BurnedCaloriesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BurnedCaloriesScalarWhereInput | BurnedCaloriesScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput> | PostCreateWithoutUserInput[] | PostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostCreateOrConnectWithoutUserInput | PostCreateOrConnectWithoutUserInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutUserInput | PostUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PostCreateManyUserInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutUserInput | PostUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostUpdateManyWithWhereWithoutUserInput | PostUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutExerciseInput = {
    create?: XOR<UserCreateWithoutExerciseInput, UserUncheckedCreateWithoutExerciseInput>
    connectOrCreate?: UserCreateOrConnectWithoutExerciseInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutExerciseNestedInput = {
    create?: XOR<UserCreateWithoutExerciseInput, UserUncheckedCreateWithoutExerciseInput>
    connectOrCreate?: UserCreateOrConnectWithoutExerciseInput
    upsert?: UserUpsertWithoutExerciseInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutExerciseInput, UserUpdateWithoutExerciseInput>, UserUncheckedUpdateWithoutExerciseInput>
  }

  export type UserCreateNestedOneWithoutWorkoutPlanInput = {
    create?: XOR<UserCreateWithoutWorkoutPlanInput, UserUncheckedCreateWithoutWorkoutPlanInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkoutPlanInput
    connect?: UserWhereUniqueInput
  }

  export type WorkoutResultCreateNestedManyWithoutWorkoutPlanInput = {
    create?: XOR<WorkoutResultCreateWithoutWorkoutPlanInput, WorkoutResultUncheckedCreateWithoutWorkoutPlanInput> | WorkoutResultCreateWithoutWorkoutPlanInput[] | WorkoutResultUncheckedCreateWithoutWorkoutPlanInput[]
    connectOrCreate?: WorkoutResultCreateOrConnectWithoutWorkoutPlanInput | WorkoutResultCreateOrConnectWithoutWorkoutPlanInput[]
    createMany?: WorkoutResultCreateManyWorkoutPlanInputEnvelope
    connect?: WorkoutResultWhereUniqueInput | WorkoutResultWhereUniqueInput[]
  }

  export type WorkoutResultUncheckedCreateNestedManyWithoutWorkoutPlanInput = {
    create?: XOR<WorkoutResultCreateWithoutWorkoutPlanInput, WorkoutResultUncheckedCreateWithoutWorkoutPlanInput> | WorkoutResultCreateWithoutWorkoutPlanInput[] | WorkoutResultUncheckedCreateWithoutWorkoutPlanInput[]
    connectOrCreate?: WorkoutResultCreateOrConnectWithoutWorkoutPlanInput | WorkoutResultCreateOrConnectWithoutWorkoutPlanInput[]
    createMany?: WorkoutResultCreateManyWorkoutPlanInputEnvelope
    connect?: WorkoutResultWhereUniqueInput | WorkoutResultWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutWorkoutPlanNestedInput = {
    create?: XOR<UserCreateWithoutWorkoutPlanInput, UserUncheckedCreateWithoutWorkoutPlanInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkoutPlanInput
    upsert?: UserUpsertWithoutWorkoutPlanInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkoutPlanInput, UserUpdateWithoutWorkoutPlanInput>, UserUncheckedUpdateWithoutWorkoutPlanInput>
  }

  export type WorkoutResultUpdateManyWithoutWorkoutPlanNestedInput = {
    create?: XOR<WorkoutResultCreateWithoutWorkoutPlanInput, WorkoutResultUncheckedCreateWithoutWorkoutPlanInput> | WorkoutResultCreateWithoutWorkoutPlanInput[] | WorkoutResultUncheckedCreateWithoutWorkoutPlanInput[]
    connectOrCreate?: WorkoutResultCreateOrConnectWithoutWorkoutPlanInput | WorkoutResultCreateOrConnectWithoutWorkoutPlanInput[]
    upsert?: WorkoutResultUpsertWithWhereUniqueWithoutWorkoutPlanInput | WorkoutResultUpsertWithWhereUniqueWithoutWorkoutPlanInput[]
    createMany?: WorkoutResultCreateManyWorkoutPlanInputEnvelope
    set?: WorkoutResultWhereUniqueInput | WorkoutResultWhereUniqueInput[]
    disconnect?: WorkoutResultWhereUniqueInput | WorkoutResultWhereUniqueInput[]
    delete?: WorkoutResultWhereUniqueInput | WorkoutResultWhereUniqueInput[]
    connect?: WorkoutResultWhereUniqueInput | WorkoutResultWhereUniqueInput[]
    update?: WorkoutResultUpdateWithWhereUniqueWithoutWorkoutPlanInput | WorkoutResultUpdateWithWhereUniqueWithoutWorkoutPlanInput[]
    updateMany?: WorkoutResultUpdateManyWithWhereWithoutWorkoutPlanInput | WorkoutResultUpdateManyWithWhereWithoutWorkoutPlanInput[]
    deleteMany?: WorkoutResultScalarWhereInput | WorkoutResultScalarWhereInput[]
  }

  export type WorkoutResultUncheckedUpdateManyWithoutWorkoutPlanNestedInput = {
    create?: XOR<WorkoutResultCreateWithoutWorkoutPlanInput, WorkoutResultUncheckedCreateWithoutWorkoutPlanInput> | WorkoutResultCreateWithoutWorkoutPlanInput[] | WorkoutResultUncheckedCreateWithoutWorkoutPlanInput[]
    connectOrCreate?: WorkoutResultCreateOrConnectWithoutWorkoutPlanInput | WorkoutResultCreateOrConnectWithoutWorkoutPlanInput[]
    upsert?: WorkoutResultUpsertWithWhereUniqueWithoutWorkoutPlanInput | WorkoutResultUpsertWithWhereUniqueWithoutWorkoutPlanInput[]
    createMany?: WorkoutResultCreateManyWorkoutPlanInputEnvelope
    set?: WorkoutResultWhereUniqueInput | WorkoutResultWhereUniqueInput[]
    disconnect?: WorkoutResultWhereUniqueInput | WorkoutResultWhereUniqueInput[]
    delete?: WorkoutResultWhereUniqueInput | WorkoutResultWhereUniqueInput[]
    connect?: WorkoutResultWhereUniqueInput | WorkoutResultWhereUniqueInput[]
    update?: WorkoutResultUpdateWithWhereUniqueWithoutWorkoutPlanInput | WorkoutResultUpdateWithWhereUniqueWithoutWorkoutPlanInput[]
    updateMany?: WorkoutResultUpdateManyWithWhereWithoutWorkoutPlanInput | WorkoutResultUpdateManyWithWhereWithoutWorkoutPlanInput[]
    deleteMany?: WorkoutResultScalarWhereInput | WorkoutResultScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutWorkoutResultInput = {
    create?: XOR<UserCreateWithoutWorkoutResultInput, UserUncheckedCreateWithoutWorkoutResultInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkoutResultInput
    connect?: UserWhereUniqueInput
  }

  export type WorkoutPlanCreateNestedOneWithoutWorkoutResultInput = {
    create?: XOR<WorkoutPlanCreateWithoutWorkoutResultInput, WorkoutPlanUncheckedCreateWithoutWorkoutResultInput>
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutWorkoutResultInput
    connect?: WorkoutPlanWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutWorkoutResultNestedInput = {
    create?: XOR<UserCreateWithoutWorkoutResultInput, UserUncheckedCreateWithoutWorkoutResultInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkoutResultInput
    upsert?: UserUpsertWithoutWorkoutResultInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkoutResultInput, UserUpdateWithoutWorkoutResultInput>, UserUncheckedUpdateWithoutWorkoutResultInput>
  }

  export type WorkoutPlanUpdateOneWithoutWorkoutResultNestedInput = {
    create?: XOR<WorkoutPlanCreateWithoutWorkoutResultInput, WorkoutPlanUncheckedCreateWithoutWorkoutResultInput>
    connectOrCreate?: WorkoutPlanCreateOrConnectWithoutWorkoutResultInput
    upsert?: WorkoutPlanUpsertWithoutWorkoutResultInput
    disconnect?: WorkoutPlanWhereInput | boolean
    delete?: WorkoutPlanWhereInput | boolean
    connect?: WorkoutPlanWhereUniqueInput
    update?: XOR<XOR<WorkoutPlanUpdateToOneWithWhereWithoutWorkoutResultInput, WorkoutPlanUpdateWithoutWorkoutResultInput>, WorkoutPlanUncheckedUpdateWithoutWorkoutResultInput>
  }

  export type UserCreateNestedOneWithoutProductInput = {
    create?: XOR<UserCreateWithoutProductInput, UserUncheckedCreateWithoutProductInput>
    connectOrCreate?: UserCreateOrConnectWithoutProductInput
    connect?: UserWhereUniqueInput
  }

  export type ConsumedCreateNestedManyWithoutProductInput = {
    create?: XOR<ConsumedCreateWithoutProductInput, ConsumedUncheckedCreateWithoutProductInput> | ConsumedCreateWithoutProductInput[] | ConsumedUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ConsumedCreateOrConnectWithoutProductInput | ConsumedCreateOrConnectWithoutProductInput[]
    createMany?: ConsumedCreateManyProductInputEnvelope
    connect?: ConsumedWhereUniqueInput | ConsumedWhereUniqueInput[]
  }

  export type ConsumedUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ConsumedCreateWithoutProductInput, ConsumedUncheckedCreateWithoutProductInput> | ConsumedCreateWithoutProductInput[] | ConsumedUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ConsumedCreateOrConnectWithoutProductInput | ConsumedCreateOrConnectWithoutProductInput[]
    createMany?: ConsumedCreateManyProductInputEnvelope
    connect?: ConsumedWhereUniqueInput | ConsumedWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type UserUpdateOneWithoutProductNestedInput = {
    create?: XOR<UserCreateWithoutProductInput, UserUncheckedCreateWithoutProductInput>
    connectOrCreate?: UserCreateOrConnectWithoutProductInput
    upsert?: UserUpsertWithoutProductInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProductInput, UserUpdateWithoutProductInput>, UserUncheckedUpdateWithoutProductInput>
  }

  export type ConsumedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ConsumedCreateWithoutProductInput, ConsumedUncheckedCreateWithoutProductInput> | ConsumedCreateWithoutProductInput[] | ConsumedUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ConsumedCreateOrConnectWithoutProductInput | ConsumedCreateOrConnectWithoutProductInput[]
    upsert?: ConsumedUpsertWithWhereUniqueWithoutProductInput | ConsumedUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ConsumedCreateManyProductInputEnvelope
    set?: ConsumedWhereUniqueInput | ConsumedWhereUniqueInput[]
    disconnect?: ConsumedWhereUniqueInput | ConsumedWhereUniqueInput[]
    delete?: ConsumedWhereUniqueInput | ConsumedWhereUniqueInput[]
    connect?: ConsumedWhereUniqueInput | ConsumedWhereUniqueInput[]
    update?: ConsumedUpdateWithWhereUniqueWithoutProductInput | ConsumedUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ConsumedUpdateManyWithWhereWithoutProductInput | ConsumedUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ConsumedScalarWhereInput | ConsumedScalarWhereInput[]
  }

  export type ConsumedUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ConsumedCreateWithoutProductInput, ConsumedUncheckedCreateWithoutProductInput> | ConsumedCreateWithoutProductInput[] | ConsumedUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ConsumedCreateOrConnectWithoutProductInput | ConsumedCreateOrConnectWithoutProductInput[]
    upsert?: ConsumedUpsertWithWhereUniqueWithoutProductInput | ConsumedUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ConsumedCreateManyProductInputEnvelope
    set?: ConsumedWhereUniqueInput | ConsumedWhereUniqueInput[]
    disconnect?: ConsumedWhereUniqueInput | ConsumedWhereUniqueInput[]
    delete?: ConsumedWhereUniqueInput | ConsumedWhereUniqueInput[]
    connect?: ConsumedWhereUniqueInput | ConsumedWhereUniqueInput[]
    update?: ConsumedUpdateWithWhereUniqueWithoutProductInput | ConsumedUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ConsumedUpdateManyWithWhereWithoutProductInput | ConsumedUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ConsumedScalarWhereInput | ConsumedScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutConsumedInput = {
    create?: XOR<UserCreateWithoutConsumedInput, UserUncheckedCreateWithoutConsumedInput>
    connectOrCreate?: UserCreateOrConnectWithoutConsumedInput
    connect?: UserWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutConsumedInput = {
    create?: XOR<ProductCreateWithoutConsumedInput, ProductUncheckedCreateWithoutConsumedInput>
    connectOrCreate?: ProductCreateOrConnectWithoutConsumedInput
    connect?: ProductWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutConsumedNestedInput = {
    create?: XOR<UserCreateWithoutConsumedInput, UserUncheckedCreateWithoutConsumedInput>
    connectOrCreate?: UserCreateOrConnectWithoutConsumedInput
    upsert?: UserUpsertWithoutConsumedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutConsumedInput, UserUpdateWithoutConsumedInput>, UserUncheckedUpdateWithoutConsumedInput>
  }

  export type ProductUpdateOneRequiredWithoutConsumedNestedInput = {
    create?: XOR<ProductCreateWithoutConsumedInput, ProductUncheckedCreateWithoutConsumedInput>
    connectOrCreate?: ProductCreateOrConnectWithoutConsumedInput
    upsert?: ProductUpsertWithoutConsumedInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutConsumedInput, ProductUpdateWithoutConsumedInput>, ProductUncheckedUpdateWithoutConsumedInput>
  }

  export type UserCreateNestedOneWithoutMeasurementInput = {
    create?: XOR<UserCreateWithoutMeasurementInput, UserUncheckedCreateWithoutMeasurementInput>
    connectOrCreate?: UserCreateOrConnectWithoutMeasurementInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMeasurementNestedInput = {
    create?: XOR<UserCreateWithoutMeasurementInput, UserUncheckedCreateWithoutMeasurementInput>
    connectOrCreate?: UserCreateOrConnectWithoutMeasurementInput
    upsert?: UserUpsertWithoutMeasurementInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMeasurementInput, UserUpdateWithoutMeasurementInput>, UserUncheckedUpdateWithoutMeasurementInput>
  }

  export type UserCreateNestedOneWithoutCoachInput = {
    create?: XOR<UserCreateWithoutCoachInput, UserUncheckedCreateWithoutCoachInput>
    connectOrCreate?: UserCreateOrConnectWithoutCoachInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCoachNestedInput = {
    create?: XOR<UserCreateWithoutCoachInput, UserUncheckedCreateWithoutCoachInput>
    connectOrCreate?: UserCreateOrConnectWithoutCoachInput
    upsert?: UserUpsertWithoutCoachInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCoachInput, UserUpdateWithoutCoachInput>, UserUncheckedUpdateWithoutCoachInput>
  }

  export type UserCreateNestedOneWithoutBurnedCaloriesInput = {
    create?: XOR<UserCreateWithoutBurnedCaloriesInput, UserUncheckedCreateWithoutBurnedCaloriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBurnedCaloriesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBurnedCaloriesNestedInput = {
    create?: XOR<UserCreateWithoutBurnedCaloriesInput, UserUncheckedCreateWithoutBurnedCaloriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBurnedCaloriesInput
    upsert?: UserUpsertWithoutBurnedCaloriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBurnedCaloriesInput, UserUpdateWithoutBurnedCaloriesInput>, UserUncheckedUpdateWithoutBurnedCaloriesInput>
  }

  export type UserCreateNestedOneWithoutPostInput = {
    create?: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPostNestedInput = {
    create?: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostInput
    upsert?: UserUpsertWithoutPostInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPostInput, UserUpdateWithoutPostInput>, UserUncheckedUpdateWithoutPostInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumgoalsFilter<$PrismaModel = never> = {
    equals?: $Enums.goals | EnumgoalsFieldRefInput<$PrismaModel>
    in?: $Enums.goals[] | ListEnumgoalsFieldRefInput<$PrismaModel>
    notIn?: $Enums.goals[] | ListEnumgoalsFieldRefInput<$PrismaModel>
    not?: NestedEnumgoalsFilter<$PrismaModel> | $Enums.goals
  }

  export type NestedEnumkindOfDietsFilter<$PrismaModel = never> = {
    equals?: $Enums.kindOfDiets | EnumkindOfDietsFieldRefInput<$PrismaModel>
    in?: $Enums.kindOfDiets[] | ListEnumkindOfDietsFieldRefInput<$PrismaModel>
    notIn?: $Enums.kindOfDiets[] | ListEnumkindOfDietsFieldRefInput<$PrismaModel>
    not?: NestedEnumkindOfDietsFilter<$PrismaModel> | $Enums.kindOfDiets
  }

  export type NestedEnumactivityLevelsFilter<$PrismaModel = never> = {
    equals?: $Enums.activityLevels | EnumactivityLevelsFieldRefInput<$PrismaModel>
    in?: $Enums.activityLevels[] | ListEnumactivityLevelsFieldRefInput<$PrismaModel>
    notIn?: $Enums.activityLevels[] | ListEnumactivityLevelsFieldRefInput<$PrismaModel>
    not?: NestedEnumactivityLevelsFilter<$PrismaModel> | $Enums.activityLevels
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumgoalsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.goals | EnumgoalsFieldRefInput<$PrismaModel>
    in?: $Enums.goals[] | ListEnumgoalsFieldRefInput<$PrismaModel>
    notIn?: $Enums.goals[] | ListEnumgoalsFieldRefInput<$PrismaModel>
    not?: NestedEnumgoalsWithAggregatesFilter<$PrismaModel> | $Enums.goals
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumgoalsFilter<$PrismaModel>
    _max?: NestedEnumgoalsFilter<$PrismaModel>
  }

  export type NestedEnumkindOfDietsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.kindOfDiets | EnumkindOfDietsFieldRefInput<$PrismaModel>
    in?: $Enums.kindOfDiets[] | ListEnumkindOfDietsFieldRefInput<$PrismaModel>
    notIn?: $Enums.kindOfDiets[] | ListEnumkindOfDietsFieldRefInput<$PrismaModel>
    not?: NestedEnumkindOfDietsWithAggregatesFilter<$PrismaModel> | $Enums.kindOfDiets
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumkindOfDietsFilter<$PrismaModel>
    _max?: NestedEnumkindOfDietsFilter<$PrismaModel>
  }

  export type NestedEnumactivityLevelsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.activityLevels | EnumactivityLevelsFieldRefInput<$PrismaModel>
    in?: $Enums.activityLevels[] | ListEnumactivityLevelsFieldRefInput<$PrismaModel>
    notIn?: $Enums.activityLevels[] | ListEnumactivityLevelsFieldRefInput<$PrismaModel>
    not?: NestedEnumactivityLevelsWithAggregatesFilter<$PrismaModel> | $Enums.activityLevels
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumactivityLevelsFilter<$PrismaModel>
    _max?: NestedEnumactivityLevelsFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type UserCreateWithoutAccountsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionCreateNestedManyWithoutUsersInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Exercise?: ExerciseCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultCreateNestedManyWithoutUserInput
    Product?: ProductCreateNestedManyWithoutUserInput
    Consumed?: ConsumedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementCreateNestedManyWithoutUserInput
    Coach?: CoachCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionUncheckedCreateNestedManyWithoutUsersInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Exercise?: ExerciseUncheckedCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanUncheckedCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultUncheckedCreateNestedManyWithoutUserInput
    Product?: ProductUncheckedCreateNestedManyWithoutUserInput
    Consumed?: ConsumedUncheckedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementUncheckedCreateNestedManyWithoutUserInput
    Coach?: CoachUncheckedCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUpdateManyWithoutUsersNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUpdateManyWithoutUserNestedInput
    Product?: ProductUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUpdateManyWithoutUserNestedInput
    Coach?: CoachUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUpdateManyWithoutUserNestedInput
    Post?: PostUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUncheckedUpdateManyWithoutUsersNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUncheckedUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUncheckedUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUncheckedUpdateManyWithoutUserNestedInput
    Product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUncheckedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUncheckedUpdateManyWithoutUserNestedInput
    Coach?: CoachUncheckedUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUncheckedUpdateManyWithoutUserNestedInput
    Post?: PostUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionCreateNestedManyWithoutUsersInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    Exercise?: ExerciseCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultCreateNestedManyWithoutUserInput
    Product?: ProductCreateNestedManyWithoutUserInput
    Consumed?: ConsumedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementCreateNestedManyWithoutUserInput
    Coach?: CoachCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionUncheckedCreateNestedManyWithoutUsersInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    Exercise?: ExerciseUncheckedCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanUncheckedCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultUncheckedCreateNestedManyWithoutUserInput
    Product?: ProductUncheckedCreateNestedManyWithoutUserInput
    Consumed?: ConsumedUncheckedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementUncheckedCreateNestedManyWithoutUserInput
    Coach?: CoachUncheckedCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUpdateManyWithoutUsersNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUpdateManyWithoutUserNestedInput
    Product?: ProductUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUpdateManyWithoutUserNestedInput
    Coach?: CoachUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUpdateManyWithoutUserNestedInput
    Post?: PostUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUncheckedUpdateManyWithoutUsersNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUncheckedUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUncheckedUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUncheckedUpdateManyWithoutUserNestedInput
    Product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUncheckedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUncheckedUpdateManyWithoutUserNestedInput
    Coach?: CoachUncheckedUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUncheckedUpdateManyWithoutUserNestedInput
    Post?: PostUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPermissionsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Exercise?: ExerciseCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultCreateNestedManyWithoutUserInput
    Product?: ProductCreateNestedManyWithoutUserInput
    Consumed?: ConsumedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementCreateNestedManyWithoutUserInput
    Coach?: CoachCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPermissionsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Exercise?: ExerciseUncheckedCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanUncheckedCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultUncheckedCreateNestedManyWithoutUserInput
    Product?: ProductUncheckedCreateNestedManyWithoutUserInput
    Consumed?: ConsumedUncheckedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementUncheckedCreateNestedManyWithoutUserInput
    Coach?: CoachUncheckedCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPermissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
  }

  export type UserUpsertWithWhereUniqueWithoutPermissionsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutPermissionsInput, UserUncheckedUpdateWithoutPermissionsInput>
    create: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutPermissionsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutPermissionsInput, UserUncheckedUpdateWithoutPermissionsInput>
  }

  export type UserUpdateManyWithWhereWithoutPermissionsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutPermissionsInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    username?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    surname?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    locale?: StringFilter<"User"> | string
    numberOfMeals?: IntFilter<"User"> | number
    proteinsDay0?: IntFilter<"User"> | number
    carbsDay0?: IntFilter<"User"> | number
    fatsDay0?: IntFilter<"User"> | number
    proteinsDay1?: IntFilter<"User"> | number
    carbsDay1?: IntFilter<"User"> | number
    fatsDay1?: IntFilter<"User"> | number
    proteinsDay2?: IntFilter<"User"> | number
    carbsDay2?: IntFilter<"User"> | number
    fatsDay2?: IntFilter<"User"> | number
    proteinsDay3?: IntFilter<"User"> | number
    carbsDay3?: IntFilter<"User"> | number
    fatsDay3?: IntFilter<"User"> | number
    proteinsDay4?: IntFilter<"User"> | number
    carbsDay4?: IntFilter<"User"> | number
    fatsDay4?: IntFilter<"User"> | number
    proteinsDay5?: IntFilter<"User"> | number
    carbsDay5?: IntFilter<"User"> | number
    fatsDay5?: IntFilter<"User"> | number
    proteinsDay6?: IntFilter<"User"> | number
    carbsDay6?: IntFilter<"User"> | number
    fatsDay6?: IntFilter<"User"> | number
    fiber?: IntFilter<"User"> | number
    carbsPercentAsSugar?: IntFilter<"User"> | number
    nextCoach?: DateTimeFilter<"User"> | Date | string
    isCoachAnalyze?: BoolFilter<"User"> | boolean
    height?: IntFilter<"User"> | number
    birth?: DateTimeFilter<"User"> | Date | string
    description?: StringFilter<"User"> | string
    website?: StringFilter<"User"> | string
    facebook?: StringFilter<"User"> | string
    instagram?: StringFilter<"User"> | string
    twitter?: StringFilter<"User"> | string
    goal?: EnumgoalsFilter<"User"> | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFilter<"User"> | $Enums.kindOfDiets
    isSportActive?: BoolFilter<"User"> | boolean
    activityLevel?: EnumactivityLevelsFilter<"User"> | $Enums.activityLevels
    sex?: BoolFilter<"User"> | boolean
    isBanned?: BoolFilter<"User"> | boolean
  }

  export type PermissionCreateWithoutUsersInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    description?: string | null
  }

  export type PermissionUncheckedCreateWithoutUsersInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    description?: string | null
  }

  export type PermissionCreateOrConnectWithoutUsersInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutUsersInput, PermissionUncheckedCreateWithoutUsersInput>
  }

  export type AccountCreateWithoutUserInput = {
    createdAt?: Date | string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    createdAt?: Date | string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ExerciseCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    nameLength: number
    isDeleted?: boolean
  }

  export type ExerciseUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    nameLength: number
    isDeleted?: boolean
  }

  export type ExerciseCreateOrConnectWithoutUserInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutUserInput, ExerciseUncheckedCreateWithoutUserInput>
  }

  export type ExerciseCreateManyUserInputEnvelope = {
    data: ExerciseCreateManyUserInput | ExerciseCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutPlanCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    description?: string | null
    burnedCalories?: number
    isDeleted?: boolean
    exercises: JsonNullValueInput | InputJsonValue
    WorkoutResult?: WorkoutResultCreateNestedManyWithoutWorkoutPlanInput
  }

  export type WorkoutPlanUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    description?: string | null
    burnedCalories?: number
    isDeleted?: boolean
    exercises: JsonNullValueInput | InputJsonValue
    WorkoutResult?: WorkoutResultUncheckedCreateNestedManyWithoutWorkoutPlanInput
  }

  export type WorkoutPlanCreateOrConnectWithoutUserInput = {
    where: WorkoutPlanWhereUniqueInput
    create: XOR<WorkoutPlanCreateWithoutUserInput, WorkoutPlanUncheckedCreateWithoutUserInput>
  }

  export type WorkoutPlanCreateManyUserInputEnvelope = {
    data: WorkoutPlanCreateManyUserInput | WorkoutPlanCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutResultCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    note?: string | null
    burnedCalories?: number
    exercises: JsonNullValueInput | InputJsonValue
    whenAdded?: Date | string
    workoutPlan?: WorkoutPlanCreateNestedOneWithoutWorkoutResultInput
  }

  export type WorkoutResultUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    note?: string | null
    burnedCalories?: number
    exercises: JsonNullValueInput | InputJsonValue
    workoutPlanId?: number | null
    whenAdded?: Date | string
  }

  export type WorkoutResultCreateOrConnectWithoutUserInput = {
    where: WorkoutResultWhereUniqueInput
    create: XOR<WorkoutResultCreateWithoutUserInput, WorkoutResultUncheckedCreateWithoutUserInput>
  }

  export type WorkoutResultCreateManyUserInputEnvelope = {
    data: WorkoutResultCreateManyUserInput | WorkoutResultCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProductCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    nameLength: number
    proteins?: Decimal | DecimalJsLike | number | string
    carbs?: Decimal | DecimalJsLike | number | string
    sugar?: Decimal | DecimalJsLike | number | string
    fats?: Decimal | DecimalJsLike | number | string
    fiber?: Decimal | DecimalJsLike | number | string
    sodium?: Decimal | DecimalJsLike | number | string
    ethanol?: Decimal | DecimalJsLike | number | string
    barcode?: string | null
    isVerified?: boolean | null
    isDeleted?: boolean | null
    isExpectingCheck?: boolean | null
    Consumed?: ConsumedCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    nameLength: number
    proteins?: Decimal | DecimalJsLike | number | string
    carbs?: Decimal | DecimalJsLike | number | string
    sugar?: Decimal | DecimalJsLike | number | string
    fats?: Decimal | DecimalJsLike | number | string
    fiber?: Decimal | DecimalJsLike | number | string
    sodium?: Decimal | DecimalJsLike | number | string
    ethanol?: Decimal | DecimalJsLike | number | string
    barcode?: string | null
    isVerified?: boolean | null
    isDeleted?: boolean | null
    isExpectingCheck?: boolean | null
    Consumed?: ConsumedUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutUserInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput>
  }

  export type ProductCreateManyUserInputEnvelope = {
    data: ProductCreateManyUserInput | ProductCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ConsumedCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    howMany?: Decimal | DecimalJsLike | number | string
    meal?: number
    product: ProductCreateNestedOneWithoutConsumedInput
  }

  export type ConsumedUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    productId: number
    howMany?: Decimal | DecimalJsLike | number | string
    meal?: number
  }

  export type ConsumedCreateOrConnectWithoutUserInput = {
    where: ConsumedWhereUniqueInput
    create: XOR<ConsumedCreateWithoutUserInput, ConsumedUncheckedCreateWithoutUserInput>
  }

  export type ConsumedCreateManyUserInputEnvelope = {
    data: ConsumedCreateManyUserInput | ConsumedCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MeasurementCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    weight?: Decimal | DecimalJsLike | number | string
  }

  export type MeasurementUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    weight?: Decimal | DecimalJsLike | number | string
  }

  export type MeasurementCreateOrConnectWithoutUserInput = {
    where: MeasurementWhereUniqueInput
    create: XOR<MeasurementCreateWithoutUserInput, MeasurementUncheckedCreateWithoutUserInput>
  }

  export type MeasurementCreateManyUserInputEnvelope = {
    data: MeasurementCreateManyUserInput | MeasurementCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CoachCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    countedProteins?: number
    countedCarbs?: number
    countedFats?: number
    countedCalories?: number
    currentWeight: Decimal | DecimalJsLike | number | string
    changeInWeight: Decimal | DecimalJsLike | number | string
    isDataInJuicify?: boolean
    data: JsonNullValueInput | InputJsonValue
  }

  export type CoachUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    countedProteins?: number
    countedCarbs?: number
    countedFats?: number
    countedCalories?: number
    currentWeight: Decimal | DecimalJsLike | number | string
    changeInWeight: Decimal | DecimalJsLike | number | string
    isDataInJuicify?: boolean
    data: JsonNullValueInput | InputJsonValue
  }

  export type CoachCreateOrConnectWithoutUserInput = {
    where: CoachWhereUniqueInput
    create: XOR<CoachCreateWithoutUserInput, CoachUncheckedCreateWithoutUserInput>
  }

  export type CoachCreateManyUserInputEnvelope = {
    data: CoachCreateManyUserInput | CoachCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BurnedCaloriesCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    name: string
    burnedCalories: number
  }

  export type BurnedCaloriesUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    name: string
    burnedCalories: number
  }

  export type BurnedCaloriesCreateOrConnectWithoutUserInput = {
    where: BurnedCaloriesWhereUniqueInput
    create: XOR<BurnedCaloriesCreateWithoutUserInput, BurnedCaloriesUncheckedCreateWithoutUserInput>
  }

  export type BurnedCaloriesCreateManyUserInputEnvelope = {
    data: BurnedCaloriesCreateManyUserInput | BurnedCaloriesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PostCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    title: string
    content: string
    img_url: string
  }

  export type PostUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    title: string
    content: string
    img_url: string
  }

  export type PostCreateOrConnectWithoutUserInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput>
  }

  export type PostCreateManyUserInputEnvelope = {
    data: PostCreateManyUserInput | PostCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PermissionUpsertWithWhereUniqueWithoutUsersInput = {
    where: PermissionWhereUniqueInput
    update: XOR<PermissionUpdateWithoutUsersInput, PermissionUncheckedUpdateWithoutUsersInput>
    create: XOR<PermissionCreateWithoutUsersInput, PermissionUncheckedCreateWithoutUsersInput>
  }

  export type PermissionUpdateWithWhereUniqueWithoutUsersInput = {
    where: PermissionWhereUniqueInput
    data: XOR<PermissionUpdateWithoutUsersInput, PermissionUncheckedUpdateWithoutUsersInput>
  }

  export type PermissionUpdateManyWithWhereWithoutUsersInput = {
    where: PermissionScalarWhereInput
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyWithoutUsersInput>
  }

  export type PermissionScalarWhereInput = {
    AND?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
    OR?: PermissionScalarWhereInput[]
    NOT?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
    id?: IntFilter<"Permission"> | number
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    updatedAt?: DateTimeFilter<"Permission"> | Date | string
    name?: StringFilter<"Permission"> | string
    description?: StringNullableFilter<"Permission"> | string | null
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: IntFilter<"Account"> | number
    createdAt?: DateTimeFilter<"Account"> | Date | string
    userId?: IntFilter<"Account"> | number
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: IntFilter<"Session"> | number
    createdAt?: DateTimeFilter<"Session"> | Date | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: IntFilter<"Session"> | number
    expires?: DateTimeFilter<"Session"> | Date | string
  }

  export type ExerciseUpsertWithWhereUniqueWithoutUserInput = {
    where: ExerciseWhereUniqueInput
    update: XOR<ExerciseUpdateWithoutUserInput, ExerciseUncheckedUpdateWithoutUserInput>
    create: XOR<ExerciseCreateWithoutUserInput, ExerciseUncheckedCreateWithoutUserInput>
  }

  export type ExerciseUpdateWithWhereUniqueWithoutUserInput = {
    where: ExerciseWhereUniqueInput
    data: XOR<ExerciseUpdateWithoutUserInput, ExerciseUncheckedUpdateWithoutUserInput>
  }

  export type ExerciseUpdateManyWithWhereWithoutUserInput = {
    where: ExerciseScalarWhereInput
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyWithoutUserInput>
  }

  export type ExerciseScalarWhereInput = {
    AND?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
    OR?: ExerciseScalarWhereInput[]
    NOT?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
    id?: IntFilter<"Exercise"> | number
    createdAt?: DateTimeFilter<"Exercise"> | Date | string
    updatedAt?: DateTimeFilter<"Exercise"> | Date | string
    userId?: IntNullableFilter<"Exercise"> | number | null
    name?: StringFilter<"Exercise"> | string
    nameLength?: IntFilter<"Exercise"> | number
    isDeleted?: BoolFilter<"Exercise"> | boolean
  }

  export type WorkoutPlanUpsertWithWhereUniqueWithoutUserInput = {
    where: WorkoutPlanWhereUniqueInput
    update: XOR<WorkoutPlanUpdateWithoutUserInput, WorkoutPlanUncheckedUpdateWithoutUserInput>
    create: XOR<WorkoutPlanCreateWithoutUserInput, WorkoutPlanUncheckedCreateWithoutUserInput>
  }

  export type WorkoutPlanUpdateWithWhereUniqueWithoutUserInput = {
    where: WorkoutPlanWhereUniqueInput
    data: XOR<WorkoutPlanUpdateWithoutUserInput, WorkoutPlanUncheckedUpdateWithoutUserInput>
  }

  export type WorkoutPlanUpdateManyWithWhereWithoutUserInput = {
    where: WorkoutPlanScalarWhereInput
    data: XOR<WorkoutPlanUpdateManyMutationInput, WorkoutPlanUncheckedUpdateManyWithoutUserInput>
  }

  export type WorkoutPlanScalarWhereInput = {
    AND?: WorkoutPlanScalarWhereInput | WorkoutPlanScalarWhereInput[]
    OR?: WorkoutPlanScalarWhereInput[]
    NOT?: WorkoutPlanScalarWhereInput | WorkoutPlanScalarWhereInput[]
    id?: IntFilter<"WorkoutPlan"> | number
    createdAt?: DateTimeFilter<"WorkoutPlan"> | Date | string
    updatedAt?: DateTimeFilter<"WorkoutPlan"> | Date | string
    userId?: IntFilter<"WorkoutPlan"> | number
    name?: StringFilter<"WorkoutPlan"> | string
    description?: StringNullableFilter<"WorkoutPlan"> | string | null
    burnedCalories?: IntFilter<"WorkoutPlan"> | number
    isDeleted?: BoolFilter<"WorkoutPlan"> | boolean
    exercises?: JsonFilter<"WorkoutPlan">
  }

  export type WorkoutResultUpsertWithWhereUniqueWithoutUserInput = {
    where: WorkoutResultWhereUniqueInput
    update: XOR<WorkoutResultUpdateWithoutUserInput, WorkoutResultUncheckedUpdateWithoutUserInput>
    create: XOR<WorkoutResultCreateWithoutUserInput, WorkoutResultUncheckedCreateWithoutUserInput>
  }

  export type WorkoutResultUpdateWithWhereUniqueWithoutUserInput = {
    where: WorkoutResultWhereUniqueInput
    data: XOR<WorkoutResultUpdateWithoutUserInput, WorkoutResultUncheckedUpdateWithoutUserInput>
  }

  export type WorkoutResultUpdateManyWithWhereWithoutUserInput = {
    where: WorkoutResultScalarWhereInput
    data: XOR<WorkoutResultUpdateManyMutationInput, WorkoutResultUncheckedUpdateManyWithoutUserInput>
  }

  export type WorkoutResultScalarWhereInput = {
    AND?: WorkoutResultScalarWhereInput | WorkoutResultScalarWhereInput[]
    OR?: WorkoutResultScalarWhereInput[]
    NOT?: WorkoutResultScalarWhereInput | WorkoutResultScalarWhereInput[]
    id?: IntFilter<"WorkoutResult"> | number
    createdAt?: DateTimeFilter<"WorkoutResult"> | Date | string
    updatedAt?: DateTimeFilter<"WorkoutResult"> | Date | string
    userId?: IntFilter<"WorkoutResult"> | number
    name?: StringFilter<"WorkoutResult"> | string
    note?: StringNullableFilter<"WorkoutResult"> | string | null
    burnedCalories?: IntFilter<"WorkoutResult"> | number
    exercises?: JsonFilter<"WorkoutResult">
    workoutPlanId?: IntNullableFilter<"WorkoutResult"> | number | null
    whenAdded?: DateTimeFilter<"WorkoutResult"> | Date | string
  }

  export type ProductUpsertWithWhereUniqueWithoutUserInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutUserInput, ProductUncheckedUpdateWithoutUserInput>
    create: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutUserInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutUserInput, ProductUncheckedUpdateWithoutUserInput>
  }

  export type ProductUpdateManyWithWhereWithoutUserInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutUserInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    id?: IntFilter<"Product"> | number
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    userId?: IntNullableFilter<"Product"> | number | null
    name?: StringFilter<"Product"> | string
    nameLength?: IntFilter<"Product"> | number
    proteins?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    carbs?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    sugar?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    fats?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    fiber?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    sodium?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    ethanol?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    barcode?: StringNullableFilter<"Product"> | string | null
    isVerified?: BoolNullableFilter<"Product"> | boolean | null
    isDeleted?: BoolNullableFilter<"Product"> | boolean | null
    isExpectingCheck?: BoolNullableFilter<"Product"> | boolean | null
  }

  export type ConsumedUpsertWithWhereUniqueWithoutUserInput = {
    where: ConsumedWhereUniqueInput
    update: XOR<ConsumedUpdateWithoutUserInput, ConsumedUncheckedUpdateWithoutUserInput>
    create: XOR<ConsumedCreateWithoutUserInput, ConsumedUncheckedCreateWithoutUserInput>
  }

  export type ConsumedUpdateWithWhereUniqueWithoutUserInput = {
    where: ConsumedWhereUniqueInput
    data: XOR<ConsumedUpdateWithoutUserInput, ConsumedUncheckedUpdateWithoutUserInput>
  }

  export type ConsumedUpdateManyWithWhereWithoutUserInput = {
    where: ConsumedScalarWhereInput
    data: XOR<ConsumedUpdateManyMutationInput, ConsumedUncheckedUpdateManyWithoutUserInput>
  }

  export type ConsumedScalarWhereInput = {
    AND?: ConsumedScalarWhereInput | ConsumedScalarWhereInput[]
    OR?: ConsumedScalarWhereInput[]
    NOT?: ConsumedScalarWhereInput | ConsumedScalarWhereInput[]
    id?: IntFilter<"Consumed"> | number
    createdAt?: DateTimeFilter<"Consumed"> | Date | string
    updatedAt?: DateTimeFilter<"Consumed"> | Date | string
    userId?: IntFilter<"Consumed"> | number
    whenAdded?: DateTimeFilter<"Consumed"> | Date | string
    productId?: IntFilter<"Consumed"> | number
    howMany?: DecimalFilter<"Consumed"> | Decimal | DecimalJsLike | number | string
    meal?: IntFilter<"Consumed"> | number
  }

  export type MeasurementUpsertWithWhereUniqueWithoutUserInput = {
    where: MeasurementWhereUniqueInput
    update: XOR<MeasurementUpdateWithoutUserInput, MeasurementUncheckedUpdateWithoutUserInput>
    create: XOR<MeasurementCreateWithoutUserInput, MeasurementUncheckedCreateWithoutUserInput>
  }

  export type MeasurementUpdateWithWhereUniqueWithoutUserInput = {
    where: MeasurementWhereUniqueInput
    data: XOR<MeasurementUpdateWithoutUserInput, MeasurementUncheckedUpdateWithoutUserInput>
  }

  export type MeasurementUpdateManyWithWhereWithoutUserInput = {
    where: MeasurementScalarWhereInput
    data: XOR<MeasurementUpdateManyMutationInput, MeasurementUncheckedUpdateManyWithoutUserInput>
  }

  export type MeasurementScalarWhereInput = {
    AND?: MeasurementScalarWhereInput | MeasurementScalarWhereInput[]
    OR?: MeasurementScalarWhereInput[]
    NOT?: MeasurementScalarWhereInput | MeasurementScalarWhereInput[]
    id?: IntFilter<"Measurement"> | number
    createdAt?: DateTimeFilter<"Measurement"> | Date | string
    updatedAt?: DateTimeFilter<"Measurement"> | Date | string
    whenAdded?: DateTimeFilter<"Measurement"> | Date | string
    weight?: DecimalFilter<"Measurement"> | Decimal | DecimalJsLike | number | string
    userId?: IntFilter<"Measurement"> | number
  }

  export type CoachUpsertWithWhereUniqueWithoutUserInput = {
    where: CoachWhereUniqueInput
    update: XOR<CoachUpdateWithoutUserInput, CoachUncheckedUpdateWithoutUserInput>
    create: XOR<CoachCreateWithoutUserInput, CoachUncheckedCreateWithoutUserInput>
  }

  export type CoachUpdateWithWhereUniqueWithoutUserInput = {
    where: CoachWhereUniqueInput
    data: XOR<CoachUpdateWithoutUserInput, CoachUncheckedUpdateWithoutUserInput>
  }

  export type CoachUpdateManyWithWhereWithoutUserInput = {
    where: CoachScalarWhereInput
    data: XOR<CoachUpdateManyMutationInput, CoachUncheckedUpdateManyWithoutUserInput>
  }

  export type CoachScalarWhereInput = {
    AND?: CoachScalarWhereInput | CoachScalarWhereInput[]
    OR?: CoachScalarWhereInput[]
    NOT?: CoachScalarWhereInput | CoachScalarWhereInput[]
    id?: IntFilter<"Coach"> | number
    createdAt?: DateTimeFilter<"Coach"> | Date | string
    updatedAt?: DateTimeFilter<"Coach"> | Date | string
    userId?: IntFilter<"Coach"> | number
    goal?: EnumgoalsFilter<"Coach"> | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFilter<"Coach"> | $Enums.kindOfDiets
    isSportActive?: BoolFilter<"Coach"> | boolean
    activityLevel?: EnumactivityLevelsFilter<"Coach"> | $Enums.activityLevels
    countedProteins?: IntFilter<"Coach"> | number
    countedCarbs?: IntFilter<"Coach"> | number
    countedFats?: IntFilter<"Coach"> | number
    countedCalories?: IntFilter<"Coach"> | number
    currentWeight?: DecimalFilter<"Coach"> | Decimal | DecimalJsLike | number | string
    changeInWeight?: DecimalFilter<"Coach"> | Decimal | DecimalJsLike | number | string
    isDataInJuicify?: BoolFilter<"Coach"> | boolean
    data?: JsonFilter<"Coach">
  }

  export type BurnedCaloriesUpsertWithWhereUniqueWithoutUserInput = {
    where: BurnedCaloriesWhereUniqueInput
    update: XOR<BurnedCaloriesUpdateWithoutUserInput, BurnedCaloriesUncheckedUpdateWithoutUserInput>
    create: XOR<BurnedCaloriesCreateWithoutUserInput, BurnedCaloriesUncheckedCreateWithoutUserInput>
  }

  export type BurnedCaloriesUpdateWithWhereUniqueWithoutUserInput = {
    where: BurnedCaloriesWhereUniqueInput
    data: XOR<BurnedCaloriesUpdateWithoutUserInput, BurnedCaloriesUncheckedUpdateWithoutUserInput>
  }

  export type BurnedCaloriesUpdateManyWithWhereWithoutUserInput = {
    where: BurnedCaloriesScalarWhereInput
    data: XOR<BurnedCaloriesUpdateManyMutationInput, BurnedCaloriesUncheckedUpdateManyWithoutUserInput>
  }

  export type BurnedCaloriesScalarWhereInput = {
    AND?: BurnedCaloriesScalarWhereInput | BurnedCaloriesScalarWhereInput[]
    OR?: BurnedCaloriesScalarWhereInput[]
    NOT?: BurnedCaloriesScalarWhereInput | BurnedCaloriesScalarWhereInput[]
    id?: IntFilter<"BurnedCalories"> | number
    createdAt?: DateTimeFilter<"BurnedCalories"> | Date | string
    updatedAt?: DateTimeFilter<"BurnedCalories"> | Date | string
    whenAdded?: DateTimeFilter<"BurnedCalories"> | Date | string
    userId?: IntFilter<"BurnedCalories"> | number
    name?: StringFilter<"BurnedCalories"> | string
    burnedCalories?: IntFilter<"BurnedCalories"> | number
  }

  export type PostUpsertWithWhereUniqueWithoutUserInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutUserInput, PostUncheckedUpdateWithoutUserInput>
    create: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput>
  }

  export type PostUpdateWithWhereUniqueWithoutUserInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutUserInput, PostUncheckedUpdateWithoutUserInput>
  }

  export type PostUpdateManyWithWhereWithoutUserInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutUserInput>
  }

  export type PostScalarWhereInput = {
    AND?: PostScalarWhereInput | PostScalarWhereInput[]
    OR?: PostScalarWhereInput[]
    NOT?: PostScalarWhereInput | PostScalarWhereInput[]
    id?: IntFilter<"Post"> | number
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    whenAdded?: DateTimeFilter<"Post"> | Date | string
    userId?: IntFilter<"Post"> | number
    title?: StringFilter<"Post"> | string
    content?: StringFilter<"Post"> | string
    img_url?: StringFilter<"Post"> | string
  }

  export type UserCreateWithoutExerciseInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionCreateNestedManyWithoutUsersInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultCreateNestedManyWithoutUserInput
    Product?: ProductCreateNestedManyWithoutUserInput
    Consumed?: ConsumedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementCreateNestedManyWithoutUserInput
    Coach?: CoachCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutExerciseInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionUncheckedCreateNestedManyWithoutUsersInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanUncheckedCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultUncheckedCreateNestedManyWithoutUserInput
    Product?: ProductUncheckedCreateNestedManyWithoutUserInput
    Consumed?: ConsumedUncheckedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementUncheckedCreateNestedManyWithoutUserInput
    Coach?: CoachUncheckedCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutExerciseInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutExerciseInput, UserUncheckedCreateWithoutExerciseInput>
  }

  export type UserUpsertWithoutExerciseInput = {
    update: XOR<UserUpdateWithoutExerciseInput, UserUncheckedUpdateWithoutExerciseInput>
    create: XOR<UserCreateWithoutExerciseInput, UserUncheckedCreateWithoutExerciseInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutExerciseInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutExerciseInput, UserUncheckedUpdateWithoutExerciseInput>
  }

  export type UserUpdateWithoutExerciseInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUpdateManyWithoutUsersNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUpdateManyWithoutUserNestedInput
    Product?: ProductUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUpdateManyWithoutUserNestedInput
    Coach?: CoachUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUpdateManyWithoutUserNestedInput
    Post?: PostUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutExerciseInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUncheckedUpdateManyWithoutUsersNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUncheckedUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUncheckedUpdateManyWithoutUserNestedInput
    Product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUncheckedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUncheckedUpdateManyWithoutUserNestedInput
    Coach?: CoachUncheckedUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUncheckedUpdateManyWithoutUserNestedInput
    Post?: PostUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutWorkoutPlanInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionCreateNestedManyWithoutUsersInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Exercise?: ExerciseCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultCreateNestedManyWithoutUserInput
    Product?: ProductCreateNestedManyWithoutUserInput
    Consumed?: ConsumedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementCreateNestedManyWithoutUserInput
    Coach?: CoachCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWorkoutPlanInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionUncheckedCreateNestedManyWithoutUsersInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Exercise?: ExerciseUncheckedCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultUncheckedCreateNestedManyWithoutUserInput
    Product?: ProductUncheckedCreateNestedManyWithoutUserInput
    Consumed?: ConsumedUncheckedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementUncheckedCreateNestedManyWithoutUserInput
    Coach?: CoachUncheckedCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWorkoutPlanInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkoutPlanInput, UserUncheckedCreateWithoutWorkoutPlanInput>
  }

  export type WorkoutResultCreateWithoutWorkoutPlanInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    note?: string | null
    burnedCalories?: number
    exercises: JsonNullValueInput | InputJsonValue
    whenAdded?: Date | string
    user: UserCreateNestedOneWithoutWorkoutResultInput
  }

  export type WorkoutResultUncheckedCreateWithoutWorkoutPlanInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    name: string
    note?: string | null
    burnedCalories?: number
    exercises: JsonNullValueInput | InputJsonValue
    whenAdded?: Date | string
  }

  export type WorkoutResultCreateOrConnectWithoutWorkoutPlanInput = {
    where: WorkoutResultWhereUniqueInput
    create: XOR<WorkoutResultCreateWithoutWorkoutPlanInput, WorkoutResultUncheckedCreateWithoutWorkoutPlanInput>
  }

  export type WorkoutResultCreateManyWorkoutPlanInputEnvelope = {
    data: WorkoutResultCreateManyWorkoutPlanInput | WorkoutResultCreateManyWorkoutPlanInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutWorkoutPlanInput = {
    update: XOR<UserUpdateWithoutWorkoutPlanInput, UserUncheckedUpdateWithoutWorkoutPlanInput>
    create: XOR<UserCreateWithoutWorkoutPlanInput, UserUncheckedCreateWithoutWorkoutPlanInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkoutPlanInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkoutPlanInput, UserUncheckedUpdateWithoutWorkoutPlanInput>
  }

  export type UserUpdateWithoutWorkoutPlanInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUpdateManyWithoutUsersNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUpdateManyWithoutUserNestedInput
    Product?: ProductUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUpdateManyWithoutUserNestedInput
    Coach?: CoachUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUpdateManyWithoutUserNestedInput
    Post?: PostUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkoutPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUncheckedUpdateManyWithoutUsersNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUncheckedUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUncheckedUpdateManyWithoutUserNestedInput
    Product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUncheckedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUncheckedUpdateManyWithoutUserNestedInput
    Coach?: CoachUncheckedUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUncheckedUpdateManyWithoutUserNestedInput
    Post?: PostUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WorkoutResultUpsertWithWhereUniqueWithoutWorkoutPlanInput = {
    where: WorkoutResultWhereUniqueInput
    update: XOR<WorkoutResultUpdateWithoutWorkoutPlanInput, WorkoutResultUncheckedUpdateWithoutWorkoutPlanInput>
    create: XOR<WorkoutResultCreateWithoutWorkoutPlanInput, WorkoutResultUncheckedCreateWithoutWorkoutPlanInput>
  }

  export type WorkoutResultUpdateWithWhereUniqueWithoutWorkoutPlanInput = {
    where: WorkoutResultWhereUniqueInput
    data: XOR<WorkoutResultUpdateWithoutWorkoutPlanInput, WorkoutResultUncheckedUpdateWithoutWorkoutPlanInput>
  }

  export type WorkoutResultUpdateManyWithWhereWithoutWorkoutPlanInput = {
    where: WorkoutResultScalarWhereInput
    data: XOR<WorkoutResultUpdateManyMutationInput, WorkoutResultUncheckedUpdateManyWithoutWorkoutPlanInput>
  }

  export type UserCreateWithoutWorkoutResultInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionCreateNestedManyWithoutUsersInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Exercise?: ExerciseCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanCreateNestedManyWithoutUserInput
    Product?: ProductCreateNestedManyWithoutUserInput
    Consumed?: ConsumedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementCreateNestedManyWithoutUserInput
    Coach?: CoachCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWorkoutResultInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionUncheckedCreateNestedManyWithoutUsersInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Exercise?: ExerciseUncheckedCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanUncheckedCreateNestedManyWithoutUserInput
    Product?: ProductUncheckedCreateNestedManyWithoutUserInput
    Consumed?: ConsumedUncheckedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementUncheckedCreateNestedManyWithoutUserInput
    Coach?: CoachUncheckedCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWorkoutResultInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkoutResultInput, UserUncheckedCreateWithoutWorkoutResultInput>
  }

  export type WorkoutPlanCreateWithoutWorkoutResultInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    description?: string | null
    burnedCalories?: number
    isDeleted?: boolean
    exercises: JsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutWorkoutPlanInput
  }

  export type WorkoutPlanUncheckedCreateWithoutWorkoutResultInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    name: string
    description?: string | null
    burnedCalories?: number
    isDeleted?: boolean
    exercises: JsonNullValueInput | InputJsonValue
  }

  export type WorkoutPlanCreateOrConnectWithoutWorkoutResultInput = {
    where: WorkoutPlanWhereUniqueInput
    create: XOR<WorkoutPlanCreateWithoutWorkoutResultInput, WorkoutPlanUncheckedCreateWithoutWorkoutResultInput>
  }

  export type UserUpsertWithoutWorkoutResultInput = {
    update: XOR<UserUpdateWithoutWorkoutResultInput, UserUncheckedUpdateWithoutWorkoutResultInput>
    create: XOR<UserCreateWithoutWorkoutResultInput, UserUncheckedCreateWithoutWorkoutResultInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkoutResultInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkoutResultInput, UserUncheckedUpdateWithoutWorkoutResultInput>
  }

  export type UserUpdateWithoutWorkoutResultInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUpdateManyWithoutUsersNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUpdateManyWithoutUserNestedInput
    Product?: ProductUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUpdateManyWithoutUserNestedInput
    Coach?: CoachUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUpdateManyWithoutUserNestedInput
    Post?: PostUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkoutResultInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUncheckedUpdateManyWithoutUsersNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUncheckedUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUncheckedUpdateManyWithoutUserNestedInput
    Product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUncheckedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUncheckedUpdateManyWithoutUserNestedInput
    Coach?: CoachUncheckedUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUncheckedUpdateManyWithoutUserNestedInput
    Post?: PostUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WorkoutPlanUpsertWithoutWorkoutResultInput = {
    update: XOR<WorkoutPlanUpdateWithoutWorkoutResultInput, WorkoutPlanUncheckedUpdateWithoutWorkoutResultInput>
    create: XOR<WorkoutPlanCreateWithoutWorkoutResultInput, WorkoutPlanUncheckedCreateWithoutWorkoutResultInput>
    where?: WorkoutPlanWhereInput
  }

  export type WorkoutPlanUpdateToOneWithWhereWithoutWorkoutResultInput = {
    where?: WorkoutPlanWhereInput
    data: XOR<WorkoutPlanUpdateWithoutWorkoutResultInput, WorkoutPlanUncheckedUpdateWithoutWorkoutResultInput>
  }

  export type WorkoutPlanUpdateWithoutWorkoutResultInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    burnedCalories?: IntFieldUpdateOperationsInput | number
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    exercises?: JsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutWorkoutPlanNestedInput
  }

  export type WorkoutPlanUncheckedUpdateWithoutWorkoutResultInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    burnedCalories?: IntFieldUpdateOperationsInput | number
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    exercises?: JsonNullValueInput | InputJsonValue
  }

  export type UserCreateWithoutProductInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionCreateNestedManyWithoutUsersInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Exercise?: ExerciseCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultCreateNestedManyWithoutUserInput
    Consumed?: ConsumedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementCreateNestedManyWithoutUserInput
    Coach?: CoachCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProductInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionUncheckedCreateNestedManyWithoutUsersInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Exercise?: ExerciseUncheckedCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanUncheckedCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultUncheckedCreateNestedManyWithoutUserInput
    Consumed?: ConsumedUncheckedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementUncheckedCreateNestedManyWithoutUserInput
    Coach?: CoachUncheckedCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProductInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProductInput, UserUncheckedCreateWithoutProductInput>
  }

  export type ConsumedCreateWithoutProductInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    howMany?: Decimal | DecimalJsLike | number | string
    meal?: number
    user: UserCreateNestedOneWithoutConsumedInput
  }

  export type ConsumedUncheckedCreateWithoutProductInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    whenAdded?: Date | string
    howMany?: Decimal | DecimalJsLike | number | string
    meal?: number
  }

  export type ConsumedCreateOrConnectWithoutProductInput = {
    where: ConsumedWhereUniqueInput
    create: XOR<ConsumedCreateWithoutProductInput, ConsumedUncheckedCreateWithoutProductInput>
  }

  export type ConsumedCreateManyProductInputEnvelope = {
    data: ConsumedCreateManyProductInput | ConsumedCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutProductInput = {
    update: XOR<UserUpdateWithoutProductInput, UserUncheckedUpdateWithoutProductInput>
    create: XOR<UserCreateWithoutProductInput, UserUncheckedCreateWithoutProductInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProductInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProductInput, UserUncheckedUpdateWithoutProductInput>
  }

  export type UserUpdateWithoutProductInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUpdateManyWithoutUsersNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUpdateManyWithoutUserNestedInput
    Coach?: CoachUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUpdateManyWithoutUserNestedInput
    Post?: PostUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUncheckedUpdateManyWithoutUsersNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUncheckedUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUncheckedUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUncheckedUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUncheckedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUncheckedUpdateManyWithoutUserNestedInput
    Coach?: CoachUncheckedUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUncheckedUpdateManyWithoutUserNestedInput
    Post?: PostUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ConsumedUpsertWithWhereUniqueWithoutProductInput = {
    where: ConsumedWhereUniqueInput
    update: XOR<ConsumedUpdateWithoutProductInput, ConsumedUncheckedUpdateWithoutProductInput>
    create: XOR<ConsumedCreateWithoutProductInput, ConsumedUncheckedCreateWithoutProductInput>
  }

  export type ConsumedUpdateWithWhereUniqueWithoutProductInput = {
    where: ConsumedWhereUniqueInput
    data: XOR<ConsumedUpdateWithoutProductInput, ConsumedUncheckedUpdateWithoutProductInput>
  }

  export type ConsumedUpdateManyWithWhereWithoutProductInput = {
    where: ConsumedScalarWhereInput
    data: XOR<ConsumedUpdateManyMutationInput, ConsumedUncheckedUpdateManyWithoutProductInput>
  }

  export type UserCreateWithoutConsumedInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionCreateNestedManyWithoutUsersInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Exercise?: ExerciseCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultCreateNestedManyWithoutUserInput
    Product?: ProductCreateNestedManyWithoutUserInput
    Measurement?: MeasurementCreateNestedManyWithoutUserInput
    Coach?: CoachCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutConsumedInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionUncheckedCreateNestedManyWithoutUsersInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Exercise?: ExerciseUncheckedCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanUncheckedCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultUncheckedCreateNestedManyWithoutUserInput
    Product?: ProductUncheckedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementUncheckedCreateNestedManyWithoutUserInput
    Coach?: CoachUncheckedCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutConsumedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConsumedInput, UserUncheckedCreateWithoutConsumedInput>
  }

  export type ProductCreateWithoutConsumedInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    nameLength: number
    proteins?: Decimal | DecimalJsLike | number | string
    carbs?: Decimal | DecimalJsLike | number | string
    sugar?: Decimal | DecimalJsLike | number | string
    fats?: Decimal | DecimalJsLike | number | string
    fiber?: Decimal | DecimalJsLike | number | string
    sodium?: Decimal | DecimalJsLike | number | string
    ethanol?: Decimal | DecimalJsLike | number | string
    barcode?: string | null
    isVerified?: boolean | null
    isDeleted?: boolean | null
    isExpectingCheck?: boolean | null
    user?: UserCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutConsumedInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: number | null
    name: string
    nameLength: number
    proteins?: Decimal | DecimalJsLike | number | string
    carbs?: Decimal | DecimalJsLike | number | string
    sugar?: Decimal | DecimalJsLike | number | string
    fats?: Decimal | DecimalJsLike | number | string
    fiber?: Decimal | DecimalJsLike | number | string
    sodium?: Decimal | DecimalJsLike | number | string
    ethanol?: Decimal | DecimalJsLike | number | string
    barcode?: string | null
    isVerified?: boolean | null
    isDeleted?: boolean | null
    isExpectingCheck?: boolean | null
  }

  export type ProductCreateOrConnectWithoutConsumedInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutConsumedInput, ProductUncheckedCreateWithoutConsumedInput>
  }

  export type UserUpsertWithoutConsumedInput = {
    update: XOR<UserUpdateWithoutConsumedInput, UserUncheckedUpdateWithoutConsumedInput>
    create: XOR<UserCreateWithoutConsumedInput, UserUncheckedCreateWithoutConsumedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutConsumedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutConsumedInput, UserUncheckedUpdateWithoutConsumedInput>
  }

  export type UserUpdateWithoutConsumedInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUpdateManyWithoutUsersNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUpdateManyWithoutUserNestedInput
    Product?: ProductUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUpdateManyWithoutUserNestedInput
    Coach?: CoachUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUpdateManyWithoutUserNestedInput
    Post?: PostUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutConsumedInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUncheckedUpdateManyWithoutUsersNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUncheckedUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUncheckedUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUncheckedUpdateManyWithoutUserNestedInput
    Product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUncheckedUpdateManyWithoutUserNestedInput
    Coach?: CoachUncheckedUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUncheckedUpdateManyWithoutUserNestedInput
    Post?: PostUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductUpsertWithoutConsumedInput = {
    update: XOR<ProductUpdateWithoutConsumedInput, ProductUncheckedUpdateWithoutConsumedInput>
    create: XOR<ProductCreateWithoutConsumedInput, ProductUncheckedCreateWithoutConsumedInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutConsumedInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutConsumedInput, ProductUncheckedUpdateWithoutConsumedInput>
  }

  export type ProductUpdateWithoutConsumedInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    nameLength?: IntFieldUpdateOperationsInput | number
    proteins?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    carbs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sugar?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fats?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fiber?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sodium?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ethanol?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isExpectingCheck?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user?: UserUpdateOneWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutConsumedInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    nameLength?: IntFieldUpdateOperationsInput | number
    proteins?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    carbs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sugar?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fats?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fiber?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sodium?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ethanol?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isExpectingCheck?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type UserCreateWithoutMeasurementInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionCreateNestedManyWithoutUsersInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Exercise?: ExerciseCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultCreateNestedManyWithoutUserInput
    Product?: ProductCreateNestedManyWithoutUserInput
    Consumed?: ConsumedCreateNestedManyWithoutUserInput
    Coach?: CoachCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMeasurementInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionUncheckedCreateNestedManyWithoutUsersInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Exercise?: ExerciseUncheckedCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanUncheckedCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultUncheckedCreateNestedManyWithoutUserInput
    Product?: ProductUncheckedCreateNestedManyWithoutUserInput
    Consumed?: ConsumedUncheckedCreateNestedManyWithoutUserInput
    Coach?: CoachUncheckedCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMeasurementInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMeasurementInput, UserUncheckedCreateWithoutMeasurementInput>
  }

  export type UserUpsertWithoutMeasurementInput = {
    update: XOR<UserUpdateWithoutMeasurementInput, UserUncheckedUpdateWithoutMeasurementInput>
    create: XOR<UserCreateWithoutMeasurementInput, UserUncheckedCreateWithoutMeasurementInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMeasurementInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMeasurementInput, UserUncheckedUpdateWithoutMeasurementInput>
  }

  export type UserUpdateWithoutMeasurementInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUpdateManyWithoutUsersNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUpdateManyWithoutUserNestedInput
    Product?: ProductUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUpdateManyWithoutUserNestedInput
    Coach?: CoachUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUpdateManyWithoutUserNestedInput
    Post?: PostUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMeasurementInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUncheckedUpdateManyWithoutUsersNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUncheckedUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUncheckedUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUncheckedUpdateManyWithoutUserNestedInput
    Product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUncheckedUpdateManyWithoutUserNestedInput
    Coach?: CoachUncheckedUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUncheckedUpdateManyWithoutUserNestedInput
    Post?: PostUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutCoachInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionCreateNestedManyWithoutUsersInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Exercise?: ExerciseCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultCreateNestedManyWithoutUserInput
    Product?: ProductCreateNestedManyWithoutUserInput
    Consumed?: ConsumedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCoachInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionUncheckedCreateNestedManyWithoutUsersInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Exercise?: ExerciseUncheckedCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanUncheckedCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultUncheckedCreateNestedManyWithoutUserInput
    Product?: ProductUncheckedCreateNestedManyWithoutUserInput
    Consumed?: ConsumedUncheckedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementUncheckedCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCoachInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCoachInput, UserUncheckedCreateWithoutCoachInput>
  }

  export type UserUpsertWithoutCoachInput = {
    update: XOR<UserUpdateWithoutCoachInput, UserUncheckedUpdateWithoutCoachInput>
    create: XOR<UserCreateWithoutCoachInput, UserUncheckedCreateWithoutCoachInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCoachInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCoachInput, UserUncheckedUpdateWithoutCoachInput>
  }

  export type UserUpdateWithoutCoachInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUpdateManyWithoutUsersNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUpdateManyWithoutUserNestedInput
    Product?: ProductUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUpdateManyWithoutUserNestedInput
    Post?: PostUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCoachInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUncheckedUpdateManyWithoutUsersNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUncheckedUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUncheckedUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUncheckedUpdateManyWithoutUserNestedInput
    Product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUncheckedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUncheckedUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUncheckedUpdateManyWithoutUserNestedInput
    Post?: PostUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutBurnedCaloriesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionCreateNestedManyWithoutUsersInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Exercise?: ExerciseCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultCreateNestedManyWithoutUserInput
    Product?: ProductCreateNestedManyWithoutUserInput
    Consumed?: ConsumedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementCreateNestedManyWithoutUserInput
    Coach?: CoachCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBurnedCaloriesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionUncheckedCreateNestedManyWithoutUsersInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Exercise?: ExerciseUncheckedCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanUncheckedCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultUncheckedCreateNestedManyWithoutUserInput
    Product?: ProductUncheckedCreateNestedManyWithoutUserInput
    Consumed?: ConsumedUncheckedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementUncheckedCreateNestedManyWithoutUserInput
    Coach?: CoachUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBurnedCaloriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBurnedCaloriesInput, UserUncheckedCreateWithoutBurnedCaloriesInput>
  }

  export type UserUpsertWithoutBurnedCaloriesInput = {
    update: XOR<UserUpdateWithoutBurnedCaloriesInput, UserUncheckedUpdateWithoutBurnedCaloriesInput>
    create: XOR<UserCreateWithoutBurnedCaloriesInput, UserUncheckedCreateWithoutBurnedCaloriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBurnedCaloriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBurnedCaloriesInput, UserUncheckedUpdateWithoutBurnedCaloriesInput>
  }

  export type UserUpdateWithoutBurnedCaloriesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUpdateManyWithoutUsersNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUpdateManyWithoutUserNestedInput
    Product?: ProductUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUpdateManyWithoutUserNestedInput
    Coach?: CoachUpdateManyWithoutUserNestedInput
    Post?: PostUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBurnedCaloriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUncheckedUpdateManyWithoutUsersNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUncheckedUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUncheckedUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUncheckedUpdateManyWithoutUserNestedInput
    Product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUncheckedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUncheckedUpdateManyWithoutUserNestedInput
    Coach?: CoachUncheckedUpdateManyWithoutUserNestedInput
    Post?: PostUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPostInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionCreateNestedManyWithoutUsersInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Exercise?: ExerciseCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultCreateNestedManyWithoutUserInput
    Product?: ProductCreateNestedManyWithoutUserInput
    Consumed?: ConsumedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementCreateNestedManyWithoutUserInput
    Coach?: CoachCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPostInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    username?: string
    name?: string | null
    surname?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    numberOfMeals?: number
    proteinsDay0?: number
    carbsDay0?: number
    fatsDay0?: number
    proteinsDay1?: number
    carbsDay1?: number
    fatsDay1?: number
    proteinsDay2?: number
    carbsDay2?: number
    fatsDay2?: number
    proteinsDay3?: number
    carbsDay3?: number
    fatsDay3?: number
    proteinsDay4?: number
    carbsDay4?: number
    fatsDay4?: number
    proteinsDay5?: number
    carbsDay5?: number
    fatsDay5?: number
    proteinsDay6?: number
    carbsDay6?: number
    fatsDay6?: number
    fiber?: number
    carbsPercentAsSugar?: number
    nextCoach?: Date | string
    isCoachAnalyze?: boolean
    height?: number
    birth?: Date | string
    description?: string
    website?: string
    facebook?: string
    instagram?: string
    twitter?: string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    sex?: boolean
    isBanned?: boolean
    permissions?: PermissionUncheckedCreateNestedManyWithoutUsersInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Exercise?: ExerciseUncheckedCreateNestedManyWithoutUserInput
    WorkoutPlan?: WorkoutPlanUncheckedCreateNestedManyWithoutUserInput
    WorkoutResult?: WorkoutResultUncheckedCreateNestedManyWithoutUserInput
    Product?: ProductUncheckedCreateNestedManyWithoutUserInput
    Consumed?: ConsumedUncheckedCreateNestedManyWithoutUserInput
    Measurement?: MeasurementUncheckedCreateNestedManyWithoutUserInput
    Coach?: CoachUncheckedCreateNestedManyWithoutUserInput
    BurnedCalories?: BurnedCaloriesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPostInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>
  }

  export type UserUpsertWithoutPostInput = {
    update: XOR<UserUpdateWithoutPostInput, UserUncheckedUpdateWithoutPostInput>
    create: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPostInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPostInput, UserUncheckedUpdateWithoutPostInput>
  }

  export type UserUpdateWithoutPostInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUpdateManyWithoutUsersNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUpdateManyWithoutUserNestedInput
    Product?: ProductUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUpdateManyWithoutUserNestedInput
    Coach?: CoachUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PermissionUncheckedUpdateManyWithoutUsersNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUncheckedUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUncheckedUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUncheckedUpdateManyWithoutUserNestedInput
    Product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUncheckedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUncheckedUpdateManyWithoutUserNestedInput
    Coach?: CoachUncheckedUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpdateWithoutPermissionsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUpdateManyWithoutUserNestedInput
    Product?: ProductUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUpdateManyWithoutUserNestedInput
    Coach?: CoachUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUpdateManyWithoutUserNestedInput
    Post?: PostUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPermissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Exercise?: ExerciseUncheckedUpdateManyWithoutUserNestedInput
    WorkoutPlan?: WorkoutPlanUncheckedUpdateManyWithoutUserNestedInput
    WorkoutResult?: WorkoutResultUncheckedUpdateManyWithoutUserNestedInput
    Product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Consumed?: ConsumedUncheckedUpdateManyWithoutUserNestedInput
    Measurement?: MeasurementUncheckedUpdateManyWithoutUserNestedInput
    Coach?: CoachUncheckedUpdateManyWithoutUserNestedInput
    BurnedCalories?: BurnedCaloriesUncheckedUpdateManyWithoutUserNestedInput
    Post?: PostUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutPermissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    numberOfMeals?: IntFieldUpdateOperationsInput | number
    proteinsDay0?: IntFieldUpdateOperationsInput | number
    carbsDay0?: IntFieldUpdateOperationsInput | number
    fatsDay0?: IntFieldUpdateOperationsInput | number
    proteinsDay1?: IntFieldUpdateOperationsInput | number
    carbsDay1?: IntFieldUpdateOperationsInput | number
    fatsDay1?: IntFieldUpdateOperationsInput | number
    proteinsDay2?: IntFieldUpdateOperationsInput | number
    carbsDay2?: IntFieldUpdateOperationsInput | number
    fatsDay2?: IntFieldUpdateOperationsInput | number
    proteinsDay3?: IntFieldUpdateOperationsInput | number
    carbsDay3?: IntFieldUpdateOperationsInput | number
    fatsDay3?: IntFieldUpdateOperationsInput | number
    proteinsDay4?: IntFieldUpdateOperationsInput | number
    carbsDay4?: IntFieldUpdateOperationsInput | number
    fatsDay4?: IntFieldUpdateOperationsInput | number
    proteinsDay5?: IntFieldUpdateOperationsInput | number
    carbsDay5?: IntFieldUpdateOperationsInput | number
    fatsDay5?: IntFieldUpdateOperationsInput | number
    proteinsDay6?: IntFieldUpdateOperationsInput | number
    carbsDay6?: IntFieldUpdateOperationsInput | number
    fatsDay6?: IntFieldUpdateOperationsInput | number
    fiber?: IntFieldUpdateOperationsInput | number
    carbsPercentAsSugar?: IntFieldUpdateOperationsInput | number
    nextCoach?: DateTimeFieldUpdateOperationsInput | Date | string
    isCoachAnalyze?: BoolFieldUpdateOperationsInput | boolean
    height?: IntFieldUpdateOperationsInput | number
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    instagram?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    sex?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AccountCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    sessionToken: string
    expires: Date | string
  }

  export type ExerciseCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    nameLength: number
    isDeleted?: boolean
  }

  export type WorkoutPlanCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    description?: string | null
    burnedCalories?: number
    isDeleted?: boolean
    exercises: JsonNullValueInput | InputJsonValue
  }

  export type WorkoutResultCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    note?: string | null
    burnedCalories?: number
    exercises: JsonNullValueInput | InputJsonValue
    workoutPlanId?: number | null
    whenAdded?: Date | string
  }

  export type ProductCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    nameLength: number
    proteins?: Decimal | DecimalJsLike | number | string
    carbs?: Decimal | DecimalJsLike | number | string
    sugar?: Decimal | DecimalJsLike | number | string
    fats?: Decimal | DecimalJsLike | number | string
    fiber?: Decimal | DecimalJsLike | number | string
    sodium?: Decimal | DecimalJsLike | number | string
    ethanol?: Decimal | DecimalJsLike | number | string
    barcode?: string | null
    isVerified?: boolean | null
    isDeleted?: boolean | null
    isExpectingCheck?: boolean | null
  }

  export type ConsumedCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    productId: number
    howMany?: Decimal | DecimalJsLike | number | string
    meal?: number
  }

  export type MeasurementCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    weight?: Decimal | DecimalJsLike | number | string
  }

  export type CoachCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    goal?: $Enums.goals
    kindOfDiet?: $Enums.kindOfDiets
    isSportActive?: boolean
    activityLevel?: $Enums.activityLevels
    countedProteins?: number
    countedCarbs?: number
    countedFats?: number
    countedCalories?: number
    currentWeight: Decimal | DecimalJsLike | number | string
    changeInWeight: Decimal | DecimalJsLike | number | string
    isDataInJuicify?: boolean
    data: JsonNullValueInput | InputJsonValue
  }

  export type BurnedCaloriesCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    name: string
    burnedCalories: number
  }

  export type PostCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    whenAdded?: Date | string
    title: string
    content: string
    img_url: string
  }

  export type PermissionUpdateWithoutUsersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PermissionUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PermissionUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExerciseUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    nameLength?: IntFieldUpdateOperationsInput | number
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ExerciseUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    nameLength?: IntFieldUpdateOperationsInput | number
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ExerciseUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    nameLength?: IntFieldUpdateOperationsInput | number
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WorkoutPlanUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    burnedCalories?: IntFieldUpdateOperationsInput | number
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    exercises?: JsonNullValueInput | InputJsonValue
    WorkoutResult?: WorkoutResultUpdateManyWithoutWorkoutPlanNestedInput
  }

  export type WorkoutPlanUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    burnedCalories?: IntFieldUpdateOperationsInput | number
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    exercises?: JsonNullValueInput | InputJsonValue
    WorkoutResult?: WorkoutResultUncheckedUpdateManyWithoutWorkoutPlanNestedInput
  }

  export type WorkoutPlanUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    burnedCalories?: IntFieldUpdateOperationsInput | number
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    exercises?: JsonNullValueInput | InputJsonValue
  }

  export type WorkoutResultUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    burnedCalories?: IntFieldUpdateOperationsInput | number
    exercises?: JsonNullValueInput | InputJsonValue
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutPlan?: WorkoutPlanUpdateOneWithoutWorkoutResultNestedInput
  }

  export type WorkoutResultUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    burnedCalories?: IntFieldUpdateOperationsInput | number
    exercises?: JsonNullValueInput | InputJsonValue
    workoutPlanId?: NullableIntFieldUpdateOperationsInput | number | null
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutResultUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    burnedCalories?: IntFieldUpdateOperationsInput | number
    exercises?: JsonNullValueInput | InputJsonValue
    workoutPlanId?: NullableIntFieldUpdateOperationsInput | number | null
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    nameLength?: IntFieldUpdateOperationsInput | number
    proteins?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    carbs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sugar?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fats?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fiber?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sodium?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ethanol?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isExpectingCheck?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Consumed?: ConsumedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    nameLength?: IntFieldUpdateOperationsInput | number
    proteins?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    carbs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sugar?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fats?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fiber?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sodium?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ethanol?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isExpectingCheck?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Consumed?: ConsumedUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    nameLength?: IntFieldUpdateOperationsInput | number
    proteins?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    carbs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sugar?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fats?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fiber?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sodium?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ethanol?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isExpectingCheck?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ConsumedUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    howMany?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    meal?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutConsumedNestedInput
  }

  export type ConsumedUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: IntFieldUpdateOperationsInput | number
    howMany?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    meal?: IntFieldUpdateOperationsInput | number
  }

  export type ConsumedUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: IntFieldUpdateOperationsInput | number
    howMany?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    meal?: IntFieldUpdateOperationsInput | number
  }

  export type MeasurementUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type MeasurementUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type MeasurementUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type CoachUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    countedProteins?: IntFieldUpdateOperationsInput | number
    countedCarbs?: IntFieldUpdateOperationsInput | number
    countedFats?: IntFieldUpdateOperationsInput | number
    countedCalories?: IntFieldUpdateOperationsInput | number
    currentWeight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    changeInWeight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isDataInJuicify?: BoolFieldUpdateOperationsInput | boolean
    data?: JsonNullValueInput | InputJsonValue
  }

  export type CoachUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    countedProteins?: IntFieldUpdateOperationsInput | number
    countedCarbs?: IntFieldUpdateOperationsInput | number
    countedFats?: IntFieldUpdateOperationsInput | number
    countedCalories?: IntFieldUpdateOperationsInput | number
    currentWeight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    changeInWeight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isDataInJuicify?: BoolFieldUpdateOperationsInput | boolean
    data?: JsonNullValueInput | InputJsonValue
  }

  export type CoachUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goal?: EnumgoalsFieldUpdateOperationsInput | $Enums.goals
    kindOfDiet?: EnumkindOfDietsFieldUpdateOperationsInput | $Enums.kindOfDiets
    isSportActive?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: EnumactivityLevelsFieldUpdateOperationsInput | $Enums.activityLevels
    countedProteins?: IntFieldUpdateOperationsInput | number
    countedCarbs?: IntFieldUpdateOperationsInput | number
    countedFats?: IntFieldUpdateOperationsInput | number
    countedCalories?: IntFieldUpdateOperationsInput | number
    currentWeight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    changeInWeight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isDataInJuicify?: BoolFieldUpdateOperationsInput | boolean
    data?: JsonNullValueInput | InputJsonValue
  }

  export type BurnedCaloriesUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    burnedCalories?: IntFieldUpdateOperationsInput | number
  }

  export type BurnedCaloriesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    burnedCalories?: IntFieldUpdateOperationsInput | number
  }

  export type BurnedCaloriesUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    burnedCalories?: IntFieldUpdateOperationsInput | number
  }

  export type PostUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    img_url?: StringFieldUpdateOperationsInput | string
  }

  export type PostUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    img_url?: StringFieldUpdateOperationsInput | string
  }

  export type PostUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    img_url?: StringFieldUpdateOperationsInput | string
  }

  export type WorkoutResultCreateManyWorkoutPlanInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    name: string
    note?: string | null
    burnedCalories?: number
    exercises: JsonNullValueInput | InputJsonValue
    whenAdded?: Date | string
  }

  export type WorkoutResultUpdateWithoutWorkoutPlanInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    burnedCalories?: IntFieldUpdateOperationsInput | number
    exercises?: JsonNullValueInput | InputJsonValue
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWorkoutResultNestedInput
  }

  export type WorkoutResultUncheckedUpdateWithoutWorkoutPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    burnedCalories?: IntFieldUpdateOperationsInput | number
    exercises?: JsonNullValueInput | InputJsonValue
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutResultUncheckedUpdateManyWithoutWorkoutPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    burnedCalories?: IntFieldUpdateOperationsInput | number
    exercises?: JsonNullValueInput | InputJsonValue
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsumedCreateManyProductInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    whenAdded?: Date | string
    howMany?: Decimal | DecimalJsLike | number | string
    meal?: number
  }

  export type ConsumedUpdateWithoutProductInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    howMany?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    meal?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutConsumedNestedInput
  }

  export type ConsumedUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    howMany?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    meal?: IntFieldUpdateOperationsInput | number
  }

  export type ConsumedUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    whenAdded?: DateTimeFieldUpdateOperationsInput | Date | string
    howMany?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    meal?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PermissionCountOutputTypeDefaultArgs instead
     */
    export type PermissionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutPlanCountOutputTypeDefaultArgs instead
     */
    export type WorkoutPlanCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutPlanCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductCountOutputTypeDefaultArgs instead
     */
    export type ProductCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountDefaultArgs instead
     */
    export type AccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionDefaultArgs instead
     */
    export type PermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VerificationTokenDefaultArgs instead
     */
    export type VerificationTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VerificationTokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExerciseDefaultArgs instead
     */
    export type ExerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExerciseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutPlanDefaultArgs instead
     */
    export type WorkoutPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutPlanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutResultDefaultArgs instead
     */
    export type WorkoutResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutResultDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductDefaultArgs instead
     */
    export type ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConsumedDefaultArgs instead
     */
    export type ConsumedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConsumedDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MeasurementDefaultArgs instead
     */
    export type MeasurementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MeasurementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CoachDefaultArgs instead
     */
    export type CoachArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CoachDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BurnedCaloriesDefaultArgs instead
     */
    export type BurnedCaloriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BurnedCaloriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostDefaultArgs instead
     */
    export type PostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PostDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}