# Generated by Django 3.2 on 2022-08-29 18:01

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('sex', models.BooleanField(default=True, help_text='Designates the sex of user.')),
                ('number_of_meals', models.IntegerField(default=5, help_text='Designates how many meals user wants to have in profile.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('is_public', models.BooleanField(default=True, help_text="Designates whether the user's profile can be show to other people.")),
                ('height', models.IntegerField(default=190, help_text='Designates how tall is user.', validators=[django.core.validators.MinValueValidator(120), django.core.validators.MaxValueValidator(300)])),
                ('twitter', models.CharField(blank=True, max_length=255, null=True)),
                ('facebook', models.CharField(blank=True, max_length=255, null=True)),
                ('instagram', models.CharField(blank=True, max_length=255, null=True)),
                ('website', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('birth', models.DateField(default=datetime.date.today)),
                ('goal', models.IntegerField(choices=[(-4, -1.5), (-3, -1.25), (-2, -1), (-1, -0.5), (0, 0), (1, 0.5), (2, 1), (3, 1.25), (4, 1.5)], default=0, validators=[django.core.validators.MinValueValidator(-4), django.core.validators.MaxValueValidator(4)])),
                ('coach', models.DateField(default=datetime.date.today)),
                ('is_coach_analyze', models.BooleanField(default=True)),
                ('is_water_adder', models.BooleanField(default=True)),
                ('is_workout_watch', models.BooleanField(default=True)),
                ('is_sport_active', models.BooleanField(default=True)),
                ('kind_of_diet', models.IntegerField(choices=[(0, 'REGULAR'), (1, 'KETOGENIC')], default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('activity_level', models.IntegerField(choices=[(0, 1.2), (1, 1.375), (2, 1.55), (3, 1.715), (4, 1.9)], default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4)])),
                ('fiber', models.IntegerField(default=0, help_text='Designates how many grams of fiber user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('carbs_percent_as_sugar', models.IntegerField(default=0, help_text='Designates how many percent of carbs should come from sugar.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('proteins_day_0', models.IntegerField(default=0, help_text='Designates how many grams of proteins user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('carbs_day_0', models.IntegerField(default=0, help_text='Designates how many grams of carbs user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('fats_day_0', models.IntegerField(default=0, help_text='Designates how many grams of fat user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('proteins_day_1', models.IntegerField(default=0, help_text='Designates how many grams of proteins user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('carbs_day_1', models.IntegerField(default=0, help_text='Designates how many grams of carbs user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('fats_day_1', models.IntegerField(default=0, help_text='Designates how many grams of fat user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('proteins_day_2', models.IntegerField(default=0, help_text='Designates how many grams of proteins user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('carbs_day_2', models.IntegerField(default=0, help_text='Designates how many grams of carbs user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('fats_day_2', models.IntegerField(default=0, help_text='Designates how many grams of fat user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('proteins_day_3', models.IntegerField(default=0, help_text='Designates how many grams of proteins user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('carbs_day_3', models.IntegerField(default=0, help_text='Designates how many grams of carbs user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('fats_day_3', models.IntegerField(default=0, help_text='Designates how many grams of fat user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('proteins_day_4', models.IntegerField(default=0, help_text='Designates how many grams of proteins user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('carbs_day_4', models.IntegerField(default=0, help_text='Designates how many grams of carbs user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('fats_day_4', models.IntegerField(default=0, help_text='Designates how many grams of fat user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('proteins_day_5', models.IntegerField(default=0, help_text='Designates how many grams of proteins user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('carbs_day_5', models.IntegerField(default=0, help_text='Designates how many grams of carbs user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('fats_day_5', models.IntegerField(default=0, help_text='Designates how many grams of fat user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('proteins_day_6', models.IntegerField(default=0, help_text='Designates how many grams of proteins user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('carbs_day_6', models.IntegerField(default=0, help_text='Designates how many grams of carbs user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('fats_day_6', models.IntegerField(default=0, help_text='Designates how many grams of fat user wants to consume per day.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
