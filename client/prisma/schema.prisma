generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// TODO adequate @db.Text

model Account {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                   Int                   @id @default(autoincrement())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now())
  username             String                @unique
  email                String                @unique
  emailVerified        DateTime?
  image                String?
  locale               String?               @default("en") @db.Char(2)
  numberOfMeals        Int                   @default(5)
  proteinsDay0         Int                   @default(0)
  carbsDay0            Int                   @default(0)
  fatsDay0             Int                   @default(0)
  proteinsDay1         Int                   @default(0)
  carbsDay1            Int                   @default(0)
  fatsDay1             Int                   @default(0)
  proteinsDay2         Int                   @default(0)
  carbsDay2            Int                   @default(0)
  fatsDay2             Int                   @default(0)
  proteinsDay3         Int                   @default(0)
  carbsDay3            Int                   @default(0)
  fatsDay3             Int                   @default(0)
  proteinsDay4         Int                   @default(0)
  carbsDay4            Int                   @default(0)
  fatsDay4             Int                   @default(0)
  proteinsDay5         Int                   @default(0)
  carbsDay5            Int                   @default(0)
  fatsDay5             Int                   @default(0)
  proteinsDay6         Int                   @default(0)
  carbsDay6            Int                   @default(0)
  fatsDay6             Int                   @default(0)
  nextCoach            DateTime?
  goal                 Float?
  isCoachAnalyze       Boolean?              @default(false)
  height               Int?
  birth                DateTime?
  accounts             Account[]
  sessions             Session[]
  Exercise             Exercise[]
  WorkoutPlan          WorkoutPlan[]
  WorkoutPlanExercises WorkoutPlanExercise[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Exercise {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  name      String
  isDeleted Boolean  @default(false)

  @@unique([userId, name])
  @@index([userId])
}

model WorkoutPlanExercise {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  order         Int
  WorkoutPlan   WorkoutPlan? @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId Int?
  User          User?        @relation(fields: [userId], references: [id])
  userId        Int?

  @@index([workoutPlanId])
  @@index([userId])
}

model WorkoutPlan {
  id                   Int                   @id @default(autoincrement())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now())
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               Int
  name                 String
  description          String?
  burned_calories      Int                   @default(0)
  isDeleted            Boolean               @default(false)
  workoutPlanExercises WorkoutPlanExercise[]

  @@index([userId])
}
